
PTB_kettle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027bc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002950  08002950  00003950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002968  08002968  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002968  08002968  00003968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002970  08002970  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00003970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002974  08002974  00003974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002978  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002984  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002984  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000732b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000137c  00000000  00000000  0000b367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  0000c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e4  00000000  00000000  0000cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148fc  00000000  00000000  0000d234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a23  00000000  00000000  00021b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082126  00000000  00000000  00029553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001960  00000000  00000000  000ab6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ad01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002938 	.word	0x08002938

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002938 	.word	0x08002938

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80004c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80004c8:	b0c0      	sub	sp, #256	@ 0x100
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80004d0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80004d4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80004d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80004dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80004e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80004e4:	f040 810c 	bne.w	8000700 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80004e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80004ec:	2200      	movs	r2, #0
 80004ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80004f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80004f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80004fa:	4622      	mov	r2, r4
 80004fc:	462b      	mov	r3, r5
 80004fe:	1891      	adds	r1, r2, r2
 8000500:	6639      	str	r1, [r7, #96]	@ 0x60
 8000502:	415b      	adcs	r3, r3
 8000504:	667b      	str	r3, [r7, #100]	@ 0x64
 8000506:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800050a:	4621      	mov	r1, r4
 800050c:	eb12 0801 	adds.w	r8, r2, r1
 8000510:	4629      	mov	r1, r5
 8000512:	eb43 0901 	adc.w	r9, r3, r1
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	f04f 0300 	mov.w	r3, #0
 800051e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800052a:	4690      	mov	r8, r2
 800052c:	4699      	mov	r9, r3
 800052e:	4623      	mov	r3, r4
 8000530:	eb18 0303 	adds.w	r3, r8, r3
 8000534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000538:	462b      	mov	r3, r5
 800053a:	eb49 0303 	adc.w	r3, r9, r3
 800053e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000542:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000546:	2200      	movs	r2, #0
 8000548:	469a      	mov	sl, r3
 800054a:	4693      	mov	fp, r2
 800054c:	eb1a 030a 	adds.w	r3, sl, sl
 8000550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000552:	eb4b 030b 	adc.w	r3, fp, fp
 8000556:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000558:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800055c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8000560:	f7ff fe38 	bl	80001d4 <__aeabi_uldivmod>
 8000564:	4602      	mov	r2, r0
 8000566:	460b      	mov	r3, r1
 8000568:	4b64      	ldr	r3, [pc, #400]	@ (80006fc <LL_USART_SetBaudRate+0x238>)
 800056a:	fba3 2302 	umull	r2, r3, r3, r2
 800056e:	095b      	lsrs	r3, r3, #5
 8000570:	b29b      	uxth	r3, r3
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	b29c      	uxth	r4, r3
 8000576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800057a:	2200      	movs	r2, #0
 800057c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000580:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000584:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8000588:	4642      	mov	r2, r8
 800058a:	464b      	mov	r3, r9
 800058c:	1891      	adds	r1, r2, r2
 800058e:	6539      	str	r1, [r7, #80]	@ 0x50
 8000590:	415b      	adcs	r3, r3
 8000592:	657b      	str	r3, [r7, #84]	@ 0x54
 8000594:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000598:	4641      	mov	r1, r8
 800059a:	1851      	adds	r1, r2, r1
 800059c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800059e:	4649      	mov	r1, r9
 80005a0:	414b      	adcs	r3, r1
 80005a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80005a4:	f04f 0200 	mov.w	r2, #0
 80005a8:	f04f 0300 	mov.w	r3, #0
 80005ac:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80005b0:	4659      	mov	r1, fp
 80005b2:	00cb      	lsls	r3, r1, #3
 80005b4:	4651      	mov	r1, sl
 80005b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80005ba:	4651      	mov	r1, sl
 80005bc:	00ca      	lsls	r2, r1, #3
 80005be:	4610      	mov	r0, r2
 80005c0:	4619      	mov	r1, r3
 80005c2:	4603      	mov	r3, r0
 80005c4:	4642      	mov	r2, r8
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80005cc:	464b      	mov	r3, r9
 80005ce:	460a      	mov	r2, r1
 80005d0:	eb42 0303 	adc.w	r3, r2, r3
 80005d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80005d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80005dc:	2200      	movs	r2, #0
 80005de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80005e2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80005e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80005ea:	460b      	mov	r3, r1
 80005ec:	18db      	adds	r3, r3, r3
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80005f0:	4613      	mov	r3, r2
 80005f2:	eb42 0303 	adc.w	r3, r2, r3
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80005f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80005fc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8000600:	f7ff fde8 	bl	80001d4 <__aeabi_uldivmod>
 8000604:	4602      	mov	r2, r0
 8000606:	460b      	mov	r3, r1
 8000608:	4611      	mov	r1, r2
 800060a:	4b3c      	ldr	r3, [pc, #240]	@ (80006fc <LL_USART_SetBaudRate+0x238>)
 800060c:	fba3 2301 	umull	r2, r3, r3, r1
 8000610:	095b      	lsrs	r3, r3, #5
 8000612:	2264      	movs	r2, #100	@ 0x64
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	1acb      	subs	r3, r1, r3
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8000620:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <LL_USART_SetBaudRate+0x238>)
 8000622:	fba3 2302 	umull	r2, r3, r3, r2
 8000626:	095b      	lsrs	r3, r3, #5
 8000628:	b29b      	uxth	r3, r3
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	b29b      	uxth	r3, r3
 800062e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000632:	b29b      	uxth	r3, r3
 8000634:	4423      	add	r3, r4
 8000636:	b29c      	uxth	r4, r3
 8000638:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800063c:	2200      	movs	r2, #0
 800063e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000642:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000646:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800064a:	4642      	mov	r2, r8
 800064c:	464b      	mov	r3, r9
 800064e:	1891      	adds	r1, r2, r2
 8000650:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000652:	415b      	adcs	r3, r3
 8000654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000656:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800065a:	4641      	mov	r1, r8
 800065c:	1851      	adds	r1, r2, r1
 800065e:	6339      	str	r1, [r7, #48]	@ 0x30
 8000660:	4649      	mov	r1, r9
 8000662:	414b      	adcs	r3, r1
 8000664:	637b      	str	r3, [r7, #52]	@ 0x34
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8000672:	4659      	mov	r1, fp
 8000674:	00cb      	lsls	r3, r1, #3
 8000676:	4651      	mov	r1, sl
 8000678:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800067c:	4651      	mov	r1, sl
 800067e:	00ca      	lsls	r2, r1, #3
 8000680:	4610      	mov	r0, r2
 8000682:	4619      	mov	r1, r3
 8000684:	4603      	mov	r3, r0
 8000686:	4642      	mov	r2, r8
 8000688:	189b      	adds	r3, r3, r2
 800068a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800068e:	464b      	mov	r3, r9
 8000690:	460a      	mov	r2, r1
 8000692:	eb42 0303 	adc.w	r3, r2, r3
 8000696:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800069a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800069e:	2200      	movs	r2, #0
 80006a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80006a4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80006a8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80006ac:	460b      	mov	r3, r1
 80006ae:	18db      	adds	r3, r3, r3
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006b2:	4613      	mov	r3, r2
 80006b4:	eb42 0303 	adc.w	r3, r2, r3
 80006b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80006be:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80006c2:	f7ff fd87 	bl	80001d4 <__aeabi_uldivmod>
 80006c6:	4602      	mov	r2, r0
 80006c8:	460b      	mov	r3, r1
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <LL_USART_SetBaudRate+0x238>)
 80006cc:	fba3 1302 	umull	r1, r3, r3, r2
 80006d0:	095b      	lsrs	r3, r3, #5
 80006d2:	2164      	movs	r1, #100	@ 0x64
 80006d4:	fb01 f303 	mul.w	r3, r1, r3
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	3332      	adds	r3, #50	@ 0x32
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <LL_USART_SetBaudRate+0x238>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	095b      	lsrs	r3, r3, #5
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	f003 0307 	and.w	r3, r3, #7
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4423      	add	r3, r4
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80006f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80006fa:	e108      	b.n	800090e <LL_USART_SetBaudRate+0x44a>
 80006fc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000704:	2200      	movs	r2, #0
 8000706:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800070a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800070e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8000712:	4642      	mov	r2, r8
 8000714:	464b      	mov	r3, r9
 8000716:	1891      	adds	r1, r2, r2
 8000718:	6239      	str	r1, [r7, #32]
 800071a:	415b      	adcs	r3, r3
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
 800071e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000722:	4641      	mov	r1, r8
 8000724:	1854      	adds	r4, r2, r1
 8000726:	4649      	mov	r1, r9
 8000728:	eb43 0501 	adc.w	r5, r3, r1
 800072c:	f04f 0200 	mov.w	r2, #0
 8000730:	f04f 0300 	mov.w	r3, #0
 8000734:	00eb      	lsls	r3, r5, #3
 8000736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800073a:	00e2      	lsls	r2, r4, #3
 800073c:	4614      	mov	r4, r2
 800073e:	461d      	mov	r5, r3
 8000740:	4643      	mov	r3, r8
 8000742:	18e3      	adds	r3, r4, r3
 8000744:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000748:	464b      	mov	r3, r9
 800074a:	eb45 0303 	adc.w	r3, r5, r3
 800074e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000752:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000756:	2200      	movs	r2, #0
 8000758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800075c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000760:	f04f 0200 	mov.w	r2, #0
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800076c:	4629      	mov	r1, r5
 800076e:	008b      	lsls	r3, r1, #2
 8000770:	4621      	mov	r1, r4
 8000772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000776:	4621      	mov	r1, r4
 8000778:	008a      	lsls	r2, r1, #2
 800077a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800077e:	f7ff fd29 	bl	80001d4 <__aeabi_uldivmod>
 8000782:	4602      	mov	r2, r0
 8000784:	460b      	mov	r3, r1
 8000786:	4b65      	ldr	r3, [pc, #404]	@ (800091c <LL_USART_SetBaudRate+0x458>)
 8000788:	fba3 2302 	umull	r2, r3, r3, r2
 800078c:	095b      	lsrs	r3, r3, #5
 800078e:	b29b      	uxth	r3, r3
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	b29c      	uxth	r4, r3
 8000794:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000798:	2200      	movs	r2, #0
 800079a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800079e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80007a2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80007a6:	4642      	mov	r2, r8
 80007a8:	464b      	mov	r3, r9
 80007aa:	1891      	adds	r1, r2, r2
 80007ac:	61b9      	str	r1, [r7, #24]
 80007ae:	415b      	adcs	r3, r3
 80007b0:	61fb      	str	r3, [r7, #28]
 80007b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80007b6:	4641      	mov	r1, r8
 80007b8:	1851      	adds	r1, r2, r1
 80007ba:	6139      	str	r1, [r7, #16]
 80007bc:	4649      	mov	r1, r9
 80007be:	414b      	adcs	r3, r1
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80007ce:	4659      	mov	r1, fp
 80007d0:	00cb      	lsls	r3, r1, #3
 80007d2:	4651      	mov	r1, sl
 80007d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80007d8:	4651      	mov	r1, sl
 80007da:	00ca      	lsls	r2, r1, #3
 80007dc:	4610      	mov	r0, r2
 80007de:	4619      	mov	r1, r3
 80007e0:	4603      	mov	r3, r0
 80007e2:	4642      	mov	r2, r8
 80007e4:	189b      	adds	r3, r3, r2
 80007e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80007ea:	464b      	mov	r3, r9
 80007ec:	460a      	mov	r2, r1
 80007ee:	eb42 0303 	adc.w	r3, r2, r3
 80007f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80007f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80007fa:	2200      	movs	r2, #0
 80007fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000800:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000804:	f04f 0200 	mov.w	r2, #0
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8000810:	4649      	mov	r1, r9
 8000812:	008b      	lsls	r3, r1, #2
 8000814:	4641      	mov	r1, r8
 8000816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800081a:	4641      	mov	r1, r8
 800081c:	008a      	lsls	r2, r1, #2
 800081e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8000822:	f7ff fcd7 	bl	80001d4 <__aeabi_uldivmod>
 8000826:	4602      	mov	r2, r0
 8000828:	460b      	mov	r3, r1
 800082a:	4611      	mov	r1, r2
 800082c:	4b3b      	ldr	r3, [pc, #236]	@ (800091c <LL_USART_SetBaudRate+0x458>)
 800082e:	fba3 2301 	umull	r2, r3, r3, r1
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2264      	movs	r2, #100	@ 0x64
 8000836:	fb02 f303 	mul.w	r3, r2, r3
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	3332      	adds	r3, #50	@ 0x32
 8000840:	4a36      	ldr	r2, [pc, #216]	@ (800091c <LL_USART_SetBaudRate+0x458>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	b29b      	uxth	r3, r3
 800084a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800084e:	b29b      	uxth	r3, r3
 8000850:	4423      	add	r3, r4
 8000852:	b29c      	uxth	r4, r3
 8000854:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000858:	2200      	movs	r2, #0
 800085a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800085c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800085e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8000862:	4642      	mov	r2, r8
 8000864:	464b      	mov	r3, r9
 8000866:	1891      	adds	r1, r2, r2
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	415b      	adcs	r3, r3
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000872:	4641      	mov	r1, r8
 8000874:	1851      	adds	r1, r2, r1
 8000876:	6039      	str	r1, [r7, #0]
 8000878:	4649      	mov	r1, r9
 800087a:	414b      	adcs	r3, r1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	f04f 0300 	mov.w	r3, #0
 8000886:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800088a:	4659      	mov	r1, fp
 800088c:	00cb      	lsls	r3, r1, #3
 800088e:	4651      	mov	r1, sl
 8000890:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000894:	4651      	mov	r1, sl
 8000896:	00ca      	lsls	r2, r1, #3
 8000898:	4610      	mov	r0, r2
 800089a:	4619      	mov	r1, r3
 800089c:	4603      	mov	r3, r0
 800089e:	4642      	mov	r2, r8
 80008a0:	189b      	adds	r3, r3, r2
 80008a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80008a4:	464b      	mov	r3, r9
 80008a6:	460a      	mov	r2, r1
 80008a8:	eb42 0303 	adc.w	r3, r2, r3
 80008ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80008ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80008b2:	2200      	movs	r2, #0
 80008b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80008b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80008b8:	f04f 0200 	mov.w	r2, #0
 80008bc:	f04f 0300 	mov.w	r3, #0
 80008c0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80008c4:	4649      	mov	r1, r9
 80008c6:	008b      	lsls	r3, r1, #2
 80008c8:	4641      	mov	r1, r8
 80008ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80008ce:	4641      	mov	r1, r8
 80008d0:	008a      	lsls	r2, r1, #2
 80008d2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80008d6:	f7ff fc7d 	bl	80001d4 <__aeabi_uldivmod>
 80008da:	4602      	mov	r2, r0
 80008dc:	460b      	mov	r3, r1
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <LL_USART_SetBaudRate+0x458>)
 80008e0:	fba3 1302 	umull	r1, r3, r3, r2
 80008e4:	095b      	lsrs	r3, r3, #5
 80008e6:	2164      	movs	r1, #100	@ 0x64
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	3332      	adds	r3, #50	@ 0x32
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LL_USART_SetBaudRate+0x458>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	b29b      	uxth	r3, r3
 8000902:	4423      	add	r3, r4
 8000904:	b29b      	uxth	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800090c:	609a      	str	r2, [r3, #8]
}
 800090e:	bf00      	nop
 8000910:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000914:	46bd      	mov	sp, r7
 8000916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800091a:	bf00      	nop
 800091c:	51eb851f 	.word	0x51eb851f

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000924:	f000 fb30 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000928:	f000 f816 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092c:	f000 f8d2 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000930:	f000 f87c 	bl	8000a2c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000934:	f000 f8a4 	bl	8000a80 <MX_USART6_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Skeleton code to receive temperature every 100ms
	  DS18B20_resetTemperature();
 8000938:	f000 f9d9 	bl	8000cee <DS18B20_resetTemperature>
	  currentTemp = DS18B20_readTemperature();
 800093c:	f000 f9e3 	bl	8000d06 <DS18B20_readTemperature>
 8000940:	eef0 7a40 	vmov.f32	s15, s0
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <main+0x34>)
 8000946:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(100); // delay for 100ms
 800094a:	2064      	movs	r0, #100	@ 0x64
 800094c:	f000 fb8e 	bl	800106c <HAL_Delay>
	  DS18B20_resetTemperature();
 8000950:	bf00      	nop
 8000952:	e7f1      	b.n	8000938 <main+0x18>
 8000954:	200000b8 	.word	0x200000b8

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	@ 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	@ 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 ffba 	bl	80028e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <SystemClock_Config+0xcc>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a27      	ldr	r2, [pc, #156]	@ (8000a24 <SystemClock_Config+0xcc>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
 800098c:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <SystemClock_Config+0xcc>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <SystemClock_Config+0xd0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009a4:	4a20      	ldr	r2, [pc, #128]	@ (8000a28 <SystemClock_Config+0xd0>)
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <SystemClock_Config+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009d0:	2348      	movs	r3, #72	@ 0x48
 80009d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009d8:	2307      	movs	r3, #7
 80009da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fdeb 	bl	80015bc <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009ec:	f000 f9b4 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2302      	movs	r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 f84d 	bl	8001aac <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a18:	f000 f99e 	bl	8000d58 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	@ 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_USART2_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_USART2_UART_Init+0x4c>)
 8000a64:	f001 fa42 	bl	8001eec <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f000 f973 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000028 	.word	0x20000028
 8000a7c:	40004400 	.word	0x40004400

08000a80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <MX_USART6_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_USART6_UART_Init+0x4c>)
 8000ab8:	f001 fa68 	bl	8001f8c <HAL_HalfDuplex_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f000 f949 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000070 	.word	0x20000070
 8000ad0:	40011400 	.word	0x40011400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b60:	f000 fd12 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_GPIO_Init+0xd8>)
 8000b7c:	f000 fb80 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b80:	2320      	movs	r3, #32
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b98:	f000 fb72 	bl	8001280 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020800 	.word	0x40020800

08000bb0 <DS18B20_reset>:

/* USER CODE BEGIN 4 */
static uint8_t DS18B20_reset(void){
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
    // 11110000 = 0xF0 (need 5 LOW, 1 from master other 4 from reset)
	uint8_t reset = 0xF0, device;
 8000bb6:	23f0      	movs	r3, #240	@ 0xf0
 8000bb8:	71fb      	strb	r3, [r7, #7]

	// Lower baud rate for timings
    LL_USART_SetBaudRate(huart6.Instance, HAL_RCC_GetPCLK2Freq(), LL_USART_OVERSAMPLING_16, 9600);
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <DS18B20_reset+0x64>)
 8000bbc:	681c      	ldr	r4, [r3, #0]
 8000bbe:	f001 f981 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f7ff fc7a 	bl	80004c4 <LL_USART_SetBaudRate>


    HAL_UART_Transmit(&huart6, &reset, 1, 1);
 8000bd0:	1df9      	adds	r1, r7, #7
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <DS18B20_reset+0x64>)
 8000bd8:	f001 fa30 	bl	800203c <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, &device, 1, 1);
 8000bdc:	1db9      	adds	r1, r7, #6
 8000bde:	2301      	movs	r3, #1
 8000be0:	2201      	movs	r2, #1
 8000be2:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <DS18B20_reset+0x64>)
 8000be4:	f001 fab5 	bl	8002152 <HAL_UART_Receive>

    LL_USART_SetBaudRate(huart6.Instance, HAL_RCC_GetPCLK2Freq(), LL_USART_OVERSAMPLING_16, 115200);
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <DS18B20_reset+0x64>)
 8000bea:	681c      	ldr	r4, [r3, #0]
 8000bec:	f001 f96a 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fc63 	bl	80004c4 <LL_USART_SetBaudRate>


    // Check if device available
    if (device != reset) return 1;
 8000bfe:	79ba      	ldrb	r2, [r7, #6]
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d001      	beq.n	8000c0a <DS18B20_reset+0x5a>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <DS18B20_reset+0x5c>
    else return 0;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	20000070 	.word	0x20000070

08000c18 <DS18B20_write>:

static void DS18B20_write(uint8_t data){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[8];

    for (int i = 0; i < 8; i++){
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e017      	b.n	8000c58 <DS18B20_write+0x40>
      if ((data & (1<<i)) == 0) buffer[i] = 0; // bit 0: 8 LOW bytes
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	fa42 f303 	asr.w	r3, r2, r3
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <DS18B20_write+0x2e>
 8000c38:	f107 020c 	add.w	r2, r7, #12
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e005      	b.n	8000c52 <DS18B20_write+0x3a>
      else buffer[i] = 0xFF; // bit 1: 11111111 = 0xFF (8 HIGH bytes)
 8000c46:	f107 020c 	add.w	r2, r7, #12
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	22ff      	movs	r2, #255	@ 0xff
 8000c50:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++){
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b07      	cmp	r3, #7
 8000c5c:	dde4      	ble.n	8000c28 <DS18B20_write+0x10>
    }

    HAL_UART_Transmit(&huart6, buffer, 8, 10);
 8000c5e:	f107 010c 	add.w	r1, r7, #12
 8000c62:	230a      	movs	r3, #10
 8000c64:	2208      	movs	r2, #8
 8000c66:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <DS18B20_write+0x5c>)
 8000c68:	f001 f9e8 	bl	800203c <HAL_UART_Transmit>
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000070 	.word	0x20000070

08000c78 <DS18B20_readBit>:

static uint8_t DS18B20_readBit(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	// 0xFF (8 HIGH bytes)
	uint8_t readBit = 0xFF, bit;
 8000c7e:	23ff      	movs	r3, #255	@ 0xff
 8000c80:	71fb      	strb	r3, [r7, #7]

    // Send read bit command and receive
    HAL_UART_Transmit(&huart6, &readBit, 1, 1);
 8000c82:	1df9      	adds	r1, r7, #7
 8000c84:	2301      	movs	r3, #1
 8000c86:	2201      	movs	r2, #1
 8000c88:	4808      	ldr	r0, [pc, #32]	@ (8000cac <DS18B20_readBit+0x34>)
 8000c8a:	f001 f9d7 	bl	800203c <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, &bit, 1, 1);
 8000c8e:	1db9      	adds	r1, r7, #6
 8000c90:	2301      	movs	r3, #1
 8000c92:	2201      	movs	r2, #1
 8000c94:	4805      	ldr	r0, [pc, #20]	@ (8000cac <DS18B20_readBit+0x34>)
 8000c96:	f001 fa5c 	bl	8002152 <HAL_UART_Receive>

    // 00000001 = 0x01 gets last bit (since only sent by single bit)
    return (bit & 0x01);
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000070 	.word	0x20000070

08000cb0 <DS18B20_readByte>:

static uint8_t DS18B20_readByte(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]

    for (int i = 0; i < 8; i++){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	e00e      	b.n	8000cde <DS18B20_readByte+0x2e>
        byte >>= 1; // shift bit one to the right
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	085b      	lsrs	r3, r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]

        // 10000000 = 0x80 if bit is 1 add
        if (DS18B20_readBit()) byte |= 0x80;
 8000cc6:	f7ff ffd7 	bl	8000c78 <DS18B20_readBit>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <DS18B20_readByte+0x28>
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cd6:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++){
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	dded      	ble.n	8000cc0 <DS18B20_readByte+0x10>
    }
    return byte;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <DS18B20_resetTemperature>:

void DS18B20_resetTemperature(void){
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
    DS18B20_reset();
 8000cf2:	f7ff ff5d 	bl	8000bb0 <DS18B20_reset>
    DS18B20_write(0xCC);  // Skip ROM [CCh] since only 1 sensor
 8000cf6:	20cc      	movs	r0, #204	@ 0xcc
 8000cf8:	f7ff ff8e 	bl	8000c18 <DS18B20_write>
    DS18B20_write(0x44);  // Convert T [44h] to start temp conversion
 8000cfc:	2044      	movs	r0, #68	@ 0x44
 8000cfe:	f7ff ff8b 	bl	8000c18 <DS18B20_write>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <DS18B20_readTemperature>:

float DS18B20_readTemperature(void){
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
    uint8_t LSB, MSB;
    float temperature;

    DS18B20_reset();
 8000d0c:	f7ff ff50 	bl	8000bb0 <DS18B20_reset>
    DS18B20_write(0xCC);  // Skip ROM [CCh] since only 1 sensor
 8000d10:	20cc      	movs	r0, #204	@ 0xcc
 8000d12:	f7ff ff81 	bl	8000c18 <DS18B20_write>
    DS18B20_write(0xBE);  // Read Scratchpad [BEh] to get temp data
 8000d16:	20be      	movs	r0, #190	@ 0xbe
 8000d18:	f7ff ff7e 	bl	8000c18 <DS18B20_write>

    LSB = DS18B20_readByte();
 8000d1c:	f7ff ffc8 	bl	8000cb0 <DS18B20_readByte>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
    MSB = DS18B20_readByte();
 8000d24:	f7ff ffc4 	bl	8000cb0 <DS18B20_readByte>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71bb      	strb	r3, [r7, #6]

    temperature = (float)((MSB<<8)|LSB)/16.0;
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	021a      	lsls	r2, r3, #8
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	ee07 3a90 	vmov	s15, r3
 8000d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d3c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d44:	edc7 7a00 	vstr	s15, [r7]

    return temperature;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	ee07 3a90 	vmov	s15, r3
}
 8000d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	4a0f      	ldr	r2, [pc, #60]	@ (8000db0 <HAL_MspInit+0x4c>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <HAL_MspInit+0x4c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000da2:	2007      	movs	r0, #7
 8000da4:	f000 fa38 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	@ 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a32      	ldr	r2, [pc, #200]	@ (8000e9c <HAL_UART_MspInit+0xe8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12c      	bne.n	8000e30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a30      	ldr	r2, [pc, #192]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a29      	ldr	r2, [pc, #164]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1e:	2307      	movs	r3, #7
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <HAL_UART_MspInit+0xf0>)
 8000e2a:	f000 fa29 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e2e:	e030      	b.n	8000e92 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <HAL_UART_MspInit+0xf4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12b      	bne.n	8000e92 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_UART_MspInit+0xec>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e72:	2340      	movs	r3, #64	@ 0x40
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e76:	2312      	movs	r3, #18
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e82:	2308      	movs	r3, #8
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <HAL_UART_MspInit+0xf8>)
 8000e8e:	f000 f9f7 	bl	8001280 <HAL_GPIO_Init>
}
 8000e92:	bf00      	nop
 8000e94:	3730      	adds	r7, #48	@ 0x30
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40011400 	.word	0x40011400
 8000eac:	40020800 	.word	0x40020800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f06:	f000 f891 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f001 fcc5 	bl	80028f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fcdb 	bl	8000920 <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f78:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f80:	200000c0 	.word	0x200000c0

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f931 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fed2 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f93b 	bl	8001266 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f911 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	200000bc 	.word	0x200000bc

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200000bc 	.word	0x200000bc

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	@ (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	@ (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	@ 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff47 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff5c 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff8e 	bl	800116c <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffb0 	bl	80011d4 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e159      	b.n	8001550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8148 	bne.w	800154a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d005      	beq.n	80012d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a2 	beq.w	800154a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b57      	ldr	r3, [pc, #348]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	4a56      	ldr	r2, [pc, #344]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001414:	6453      	str	r3, [r2, #68]	@ 0x44
 8001416:	4b54      	ldr	r3, [pc, #336]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001422:	4a52      	ldr	r2, [pc, #328]	@ (800156c <HAL_GPIO_Init+0x2ec>)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	@ (8001570 <HAL_GPIO_Init+0x2f0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x202>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a48      	ldr	r2, [pc, #288]	@ (8001574 <HAL_GPIO_Init+0x2f4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x1fe>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a47      	ldr	r2, [pc, #284]	@ (8001578 <HAL_GPIO_Init+0x2f8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x1fa>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a46      	ldr	r2, [pc, #280]	@ (800157c <HAL_GPIO_Init+0x2fc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x1f6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a45      	ldr	r2, [pc, #276]	@ (8001580 <HAL_GPIO_Init+0x300>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x1f2>
 800146e:	2304      	movs	r3, #4
 8001470:	e008      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001472:	2307      	movs	r3, #7
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001476:	2303      	movs	r3, #3
 8001478:	e004      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147a:	2302      	movs	r3, #2
 800147c:	e002      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001482:	2300      	movs	r3, #0
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	f002 0203 	and.w	r2, r2, #3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4093      	lsls	r3, r2
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001494:	4935      	ldr	r1, [pc, #212]	@ (800156c <HAL_GPIO_Init+0x2ec>)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f0:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151a:	4a1a      	ldr	r2, [pc, #104]	@ (8001584 <HAL_GPIO_Init+0x304>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_GPIO_Init+0x304>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001544:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <HAL_GPIO_Init+0x304>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3301      	adds	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	f67f aea2 	bls.w	800129c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40013800 	.word	0x40013800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40021000 	.word	0x40021000
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e267      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d075      	beq.n	80016c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015da:	4b88      	ldr	r3, [pc, #544]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d00c      	beq.n	8001600 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4b85      	ldr	r3, [pc, #532]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d112      	bne.n	8001618 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f2:	4b82      	ldr	r3, [pc, #520]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015fe:	d10b      	bne.n	8001618 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	4b7e      	ldr	r3, [pc, #504]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d05b      	beq.n	80016c4 <HAL_RCC_OscConfig+0x108>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d157      	bne.n	80016c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e242      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x74>
 8001622:	4b76      	ldr	r3, [pc, #472]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a75      	ldr	r2, [pc, #468]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xb0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x98>
 800163a:	4b70      	ldr	r3, [pc, #448]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6f      	ldr	r2, [pc, #444]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b6d      	ldr	r3, [pc, #436]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6c      	ldr	r2, [pc, #432]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xb0>
 8001654:	4b69      	ldr	r3, [pc, #420]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a68      	ldr	r2, [pc, #416]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a65      	ldr	r2, [pc, #404]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800166a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fcee 	bl	8001054 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fcea 	bl	8001054 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	@ 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e207      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b5b      	ldr	r3, [pc, #364]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xc0>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fcda 	bl	8001054 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fcd6 	bl	8001054 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1f3      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b51      	ldr	r3, [pc, #324]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0xe8>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016d2:	4b4a      	ldr	r3, [pc, #296]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b47      	ldr	r3, [pc, #284]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ea:	4b44      	ldr	r3, [pc, #272]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b41      	ldr	r3, [pc, #260]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x152>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e1c7      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4937      	ldr	r1, [pc, #220]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b34      	ldr	r3, [pc, #208]	@ (8001800 <HAL_RCC_OscConfig+0x244>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fc8f 	bl	8001054 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fc8b 	bl	8001054 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1a8      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4925      	ldr	r1, [pc, #148]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_RCC_OscConfig+0x244>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fc6e 	bl	8001054 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff fc6a 	bl	8001054 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e187      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d036      	beq.n	8001814 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d016      	beq.n	80017dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <HAL_RCC_OscConfig+0x248>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fc4e 	bl	8001054 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fc4a 	bl	8001054 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e167      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_RCC_OscConfig+0x240>)
 80017d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x200>
 80017da:	e01b      	b.n	8001814 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_RCC_OscConfig+0x248>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fc37 	bl	8001054 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	e00e      	b.n	8001808 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fc33 	bl	8001054 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d907      	bls.n	8001808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e150      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
 80017fc:	40023800 	.word	0x40023800
 8001800:	42470000 	.word	0x42470000
 8001804:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	4b88      	ldr	r3, [pc, #544]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 800180a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1ea      	bne.n	80017ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8097 	beq.w	8001950 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001826:	4b81      	ldr	r3, [pc, #516]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b7d      	ldr	r3, [pc, #500]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b7a      	ldr	r3, [pc, #488]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b77      	ldr	r3, [pc, #476]	@ (8001a30 <HAL_RCC_OscConfig+0x474>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d118      	bne.n	8001890 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4b74      	ldr	r3, [pc, #464]	@ (8001a30 <HAL_RCC_OscConfig+0x474>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a73      	ldr	r2, [pc, #460]	@ (8001a30 <HAL_RCC_OscConfig+0x474>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff fbf3 	bl	8001054 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fbef 	bl	8001054 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e10c      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b6a      	ldr	r3, [pc, #424]	@ (8001a30 <HAL_RCC_OscConfig+0x474>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2ea>
 8001898:	4b64      	ldr	r3, [pc, #400]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189c:	4a63      	ldr	r2, [pc, #396]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a4:	e01c      	b.n	80018e0 <HAL_RCC_OscConfig+0x324>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x30c>
 80018ae:	4b5f      	ldr	r3, [pc, #380]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ba:	4b5c      	ldr	r3, [pc, #368]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018be:	4a5b      	ldr	r2, [pc, #364]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0x324>
 80018c8:	4b58      	ldr	r3, [pc, #352]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a57      	ldr	r2, [pc, #348]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d4:	4b55      	ldr	r3, [pc, #340]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d8:	4a54      	ldr	r2, [pc, #336]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80018da:	f023 0304 	bic.w	r3, r3, #4
 80018de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d015      	beq.n	8001914 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fbb4 	bl	8001054 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fbb0 	bl	8001054 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0cb      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0ee      	beq.n	80018f0 <HAL_RCC_OscConfig+0x334>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff fb9e 	bl	8001054 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191a:	e00a      	b.n	8001932 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191c:	f7ff fb9a 	bl	8001054 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e0b5      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	4b3e      	ldr	r3, [pc, #248]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ee      	bne.n	800191c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b39      	ldr	r3, [pc, #228]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a38      	ldr	r2, [pc, #224]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 800194a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a1 	beq.w	8001a9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800195a:	4b34      	ldr	r3, [pc, #208]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	d05c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d141      	bne.n	80019f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <HAL_RCC_OscConfig+0x478>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fb6e 	bl	8001054 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fb6a 	bl	8001054 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e087      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	019b      	lsls	r3, r3, #6
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	491b      	ldr	r1, [pc, #108]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_RCC_OscConfig+0x478>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb43 	bl	8001054 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff fb3f 	bl	8001054 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e05c      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x416>
 80019f0:	e054      	b.n	8001a9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_RCC_OscConfig+0x478>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fb2c 	bl	8001054 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff fb28 	bl	8001054 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e045      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_RCC_OscConfig+0x470>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x444>
 8001a1e:	e03d      	b.n	8001a9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e038      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000
 8001a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <HAL_RCC_OscConfig+0x4ec>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d028      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d121      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d11a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a68:	4013      	ands	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d111      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0cc      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b68      	ldr	r3, [pc, #416]	@ (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d90c      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b65      	ldr	r3, [pc, #404]	@ (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	@ (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a58      	ldr	r2, [pc, #352]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d044      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d119      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e067      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b37      	ldr	r3, [pc, #220]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4934      	ldr	r1, [pc, #208]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fa5a 	bl	8001054 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fa56 	bl	8001054 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e04f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d20c      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 f821 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490a      	ldr	r1, [pc, #40]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f9ba 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08002950 	.word	0x08002950
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	b094      	sub	sp, #80	@ 0x50
 8001c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c90:	4b79      	ldr	r3, [pc, #484]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	f200 80e1 	bhi.w	8001e64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x34>
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001caa:	e0db      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b73      	ldr	r3, [pc, #460]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb0:	e0db      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cb2:	4b73      	ldr	r3, [pc, #460]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb6:	e0d8      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cce:	4b6a      	ldr	r3, [pc, #424]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cea:	4622      	mov	r2, r4
 8001cec:	462b      	mov	r3, r5
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	0159      	lsls	r1, r3, #5
 8001cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfc:	0150      	lsls	r0, r2, #5
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4621      	mov	r1, r4
 8001d04:	1a51      	subs	r1, r2, r1
 8001d06:	6139      	str	r1, [r7, #16]
 8001d08:	4629      	mov	r1, r5
 8001d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	018b      	lsls	r3, r1, #6
 8001d20:	4651      	mov	r1, sl
 8001d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d26:	4651      	mov	r1, sl
 8001d28:	018a      	lsls	r2, r1, #6
 8001d2a:	4651      	mov	r1, sl
 8001d2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d30:	4659      	mov	r1, fp
 8001d32:	eb63 0901 	sbc.w	r9, r3, r1
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	eb18 0303 	adds.w	r3, r8, r3
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	462b      	mov	r3, r5
 8001d58:	eb49 0303 	adc.w	r3, r9, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	024b      	lsls	r3, r1, #9
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d74:	4621      	mov	r1, r4
 8001d76:	024a      	lsls	r2, r1, #9
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d88:	f7fe fa24 	bl	80001d4 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4613      	mov	r3, r2
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d94:	e058      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b38      	ldr	r3, [pc, #224]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	4611      	mov	r1, r2
 8001da2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001db0:	4642      	mov	r2, r8
 8001db2:	464b      	mov	r3, r9
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0159      	lsls	r1, r3, #5
 8001dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc2:	0150      	lsls	r0, r2, #5
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4641      	mov	r1, r8
 8001dca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dce:	4649      	mov	r1, r9
 8001dd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001de0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001de4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dec:	eb63 050b 	sbc.w	r5, r3, fp
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	00eb      	lsls	r3, r5, #3
 8001dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfe:	00e2      	lsls	r2, r4, #3
 8001e00:	4614      	mov	r4, r2
 8001e02:	461d      	mov	r5, r3
 8001e04:	4643      	mov	r3, r8
 8001e06:	18e3      	adds	r3, r4, r3
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	eb45 0303 	adc.w	r3, r5, r3
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e1e:	4629      	mov	r1, r5
 8001e20:	028b      	lsls	r3, r1, #10
 8001e22:	4621      	mov	r1, r4
 8001e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e28:	4621      	mov	r1, r4
 8001e2a:	028a      	lsls	r2, r1, #10
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e32:	2200      	movs	r2, #0
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	61fa      	str	r2, [r7, #28]
 8001e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3c:	f7fe f9ca 	bl	80001d4 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4613      	mov	r3, r2
 8001e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	3301      	adds	r3, #1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3750      	adds	r7, #80	@ 0x50
 8001e70:	46bd      	mov	sp, r7
 8001e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200

08001e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea0:	f7ff fff0 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a9b      	lsrs	r3, r3, #10
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	@ (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08002960 	.word	0x08002960

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec8:	f7ff ffdc 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0b5b      	lsrs	r3, r3, #13
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08002960 	.word	0x08002960

08001eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e042      	b.n	8001f84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe ff4e 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2224      	movs	r2, #36	@ 0x24
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fa61 	bl	80023f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e04a      	b.n	8002034 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fefe 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fa11 	bl	80023f8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0208 	orr.w	r2, r2, #8
 8002004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	@ 0x28
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b20      	cmp	r3, #32
 800205a:	d175      	bne.n	8002148 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_UART_Transmit+0x2c>
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e06e      	b.n	800214a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2221      	movs	r2, #33	@ 0x21
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800207a:	f7fe ffeb 	bl	8001054 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002094:	d108      	bne.n	80020a8 <HAL_UART_Transmit+0x6c>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e003      	b.n	80020b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020b0:	e02e      	b.n	8002110 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f8df 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e03a      	b.n	800214a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3302      	adds	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e007      	b.n	8002102 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3301      	adds	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1cb      	bne.n	80020b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2140      	movs	r1, #64	@ 0x40
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f8ab 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e006      	b.n	800214a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b08a      	sub	sp, #40	@ 0x28
 8002156:	af02      	add	r7, sp, #8
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	f040 8081 	bne.w	8002276 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_UART_Receive+0x2e>
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e079      	b.n	8002278 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2222      	movs	r2, #34	@ 0x22
 800218e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002198:	f7fe ff5c 	bl	8001054 <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b2:	d108      	bne.n	80021c6 <HAL_UART_Receive+0x74>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	e003      	b.n	80021ce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021ce:	e047      	b.n	8002260 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2200      	movs	r2, #0
 80021d8:	2120      	movs	r1, #32
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f850 	bl	8002280 <UART_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e042      	b.n	8002278 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10c      	bne.n	8002212 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002204:	b29a      	uxth	r2, r3
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	3302      	adds	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	e01f      	b.n	8002252 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800221a:	d007      	beq.n	800222c <HAL_UART_Receive+0xda>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_UART_Receive+0xe8>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e008      	b.n	800224c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002246:	b2da      	uxtb	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3301      	adds	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1b2      	bne.n	80021d0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002290:	e03b      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d037      	beq.n	800230a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7fe fedb 	bl	8001054 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e03a      	b.n	800232a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d023      	beq.n	800230a <UART_WaitOnFlagUntilTimeout+0x8a>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b80      	cmp	r3, #128	@ 0x80
 80022c6:	d020      	beq.n	800230a <UART_WaitOnFlagUntilTimeout+0x8a>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b40      	cmp	r3, #64	@ 0x40
 80022cc:	d01d      	beq.n	800230a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d116      	bne.n	800230a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f81d 	bl	8002332 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2208      	movs	r2, #8
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00f      	b.n	800232a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	429a      	cmp	r2, r3
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	429a      	cmp	r2, r3
 8002326:	d0b4      	beq.n	8002292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002332:	b480      	push	{r7}
 8002334:	b095      	sub	sp, #84	@ 0x54
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	330c      	adds	r3, #12
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	e853 3f00 	ldrex	r3, [r3]
 8002348:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	330c      	adds	r3, #12
 8002358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800235a:	643a      	str	r2, [r7, #64]	@ 0x40
 800235c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002362:	e841 2300 	strex	r3, r2, [r1]
 8002366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1e5      	bne.n	800233a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3314      	adds	r3, #20
 8002374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	e853 3f00 	ldrex	r3, [r3]
 800237c:	61fb      	str	r3, [r7, #28]
   return(result);
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3314      	adds	r3, #20
 800238c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800238e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e5      	bne.n	800236e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d119      	bne.n	80023de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	330c      	adds	r3, #12
 80023b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f023 0310 	bic.w	r3, r3, #16
 80023c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023ca:	61ba      	str	r2, [r7, #24]
 80023cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ce:	6979      	ldr	r1, [r7, #20]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	e841 2300 	strex	r3, r2, [r1]
 80023d6:	613b      	str	r3, [r7, #16]
   return(result);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e5      	bne.n	80023aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023ec:	bf00      	nop
 80023ee:	3754      	adds	r7, #84	@ 0x54
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023fc:	b0c0      	sub	sp, #256	@ 0x100
 80023fe:	af00      	add	r7, sp, #0
 8002400:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002414:	68d9      	ldr	r1, [r3, #12]
 8002416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	ea40 0301 	orr.w	r3, r0, r1
 8002420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	431a      	orrs	r2, r3
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	431a      	orrs	r2, r3
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002450:	f021 010c 	bic.w	r1, r1, #12
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800245e:	430b      	orrs	r3, r1
 8002460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002472:	6999      	ldr	r1, [r3, #24]
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	ea40 0301 	orr.w	r3, r0, r1
 800247e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b8f      	ldr	r3, [pc, #572]	@ (80026c4 <UART_SetConfig+0x2cc>)
 8002488:	429a      	cmp	r2, r3
 800248a:	d005      	beq.n	8002498 <UART_SetConfig+0xa0>
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b8d      	ldr	r3, [pc, #564]	@ (80026c8 <UART_SetConfig+0x2d0>)
 8002494:	429a      	cmp	r2, r3
 8002496:	d104      	bne.n	80024a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002498:	f7ff fd14 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 800249c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80024a0:	e003      	b.n	80024aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a2:	f7ff fcfb 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80024a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b4:	f040 810c 	bne.w	80026d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024bc:	2200      	movs	r2, #0
 80024be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	1891      	adds	r1, r2, r2
 80024d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024d2:	415b      	adcs	r3, r3
 80024d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024da:	4621      	mov	r1, r4
 80024dc:	eb12 0801 	adds.w	r8, r2, r1
 80024e0:	4629      	mov	r1, r5
 80024e2:	eb43 0901 	adc.w	r9, r3, r1
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fa:	4690      	mov	r8, r2
 80024fc:	4699      	mov	r9, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	eb18 0303 	adds.w	r3, r8, r3
 8002504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002508:	462b      	mov	r3, r5
 800250a:	eb49 0303 	adc.w	r3, r9, r3
 800250e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800251e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002526:	460b      	mov	r3, r1
 8002528:	18db      	adds	r3, r3, r3
 800252a:	653b      	str	r3, [r7, #80]	@ 0x50
 800252c:	4613      	mov	r3, r2
 800252e:	eb42 0303 	adc.w	r3, r2, r3
 8002532:	657b      	str	r3, [r7, #84]	@ 0x54
 8002534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800253c:	f7fd fe4a 	bl	80001d4 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4b61      	ldr	r3, [pc, #388]	@ (80026cc <UART_SetConfig+0x2d4>)
 8002546:	fba3 2302 	umull	r2, r3, r3, r2
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	011c      	lsls	r4, r3, #4
 800254e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002558:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800255c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	1891      	adds	r1, r2, r2
 8002566:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002568:	415b      	adcs	r3, r3
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800256c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002570:	4641      	mov	r1, r8
 8002572:	eb12 0a01 	adds.w	sl, r2, r1
 8002576:	4649      	mov	r1, r9
 8002578:	eb43 0b01 	adc.w	fp, r3, r1
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800258c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002590:	4692      	mov	sl, r2
 8002592:	469b      	mov	fp, r3
 8002594:	4643      	mov	r3, r8
 8002596:	eb1a 0303 	adds.w	r3, sl, r3
 800259a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800259e:	464b      	mov	r3, r9
 80025a0:	eb4b 0303 	adc.w	r3, fp, r3
 80025a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025bc:	460b      	mov	r3, r1
 80025be:	18db      	adds	r3, r3, r3
 80025c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80025c2:	4613      	mov	r3, r2
 80025c4:	eb42 0303 	adc.w	r3, r2, r3
 80025c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025d2:	f7fd fdff 	bl	80001d4 <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	4b3b      	ldr	r3, [pc, #236]	@ (80026cc <UART_SetConfig+0x2d4>)
 80025de:	fba3 2301 	umull	r2, r3, r3, r1
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2264      	movs	r2, #100	@ 0x64
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	1acb      	subs	r3, r1, r3
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025f2:	4b36      	ldr	r3, [pc, #216]	@ (80026cc <UART_SetConfig+0x2d4>)
 80025f4:	fba3 2302 	umull	r2, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002600:	441c      	add	r4, r3
 8002602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800260c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	1891      	adds	r1, r2, r2
 800261a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800261c:	415b      	adcs	r3, r3
 800261e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002624:	4641      	mov	r1, r8
 8002626:	1851      	adds	r1, r2, r1
 8002628:	6339      	str	r1, [r7, #48]	@ 0x30
 800262a:	4649      	mov	r1, r9
 800262c:	414b      	adcs	r3, r1
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800263c:	4659      	mov	r1, fp
 800263e:	00cb      	lsls	r3, r1, #3
 8002640:	4651      	mov	r1, sl
 8002642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002646:	4651      	mov	r1, sl
 8002648:	00ca      	lsls	r2, r1, #3
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4603      	mov	r3, r0
 8002650:	4642      	mov	r2, r8
 8002652:	189b      	adds	r3, r3, r2
 8002654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002658:	464b      	mov	r3, r9
 800265a:	460a      	mov	r2, r1
 800265c:	eb42 0303 	adc.w	r3, r2, r3
 8002660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002670:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002678:	460b      	mov	r3, r1
 800267a:	18db      	adds	r3, r3, r3
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800267e:	4613      	mov	r3, r2
 8002680:	eb42 0303 	adc.w	r3, r2, r3
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800268a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800268e:	f7fd fda1 	bl	80001d4 <__aeabi_uldivmod>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <UART_SetConfig+0x2d4>)
 8002698:	fba3 1302 	umull	r1, r3, r3, r2
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	2164      	movs	r1, #100	@ 0x64
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	3332      	adds	r3, #50	@ 0x32
 80026aa:	4a08      	ldr	r2, [pc, #32]	@ (80026cc <UART_SetConfig+0x2d4>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	f003 0207 	and.w	r2, r3, #7
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4422      	add	r2, r4
 80026be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026c0:	e106      	b.n	80028d0 <UART_SetConfig+0x4d8>
 80026c2:	bf00      	nop
 80026c4:	40011000 	.word	0x40011000
 80026c8:	40011400 	.word	0x40011400
 80026cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026e2:	4642      	mov	r2, r8
 80026e4:	464b      	mov	r3, r9
 80026e6:	1891      	adds	r1, r2, r2
 80026e8:	6239      	str	r1, [r7, #32]
 80026ea:	415b      	adcs	r3, r3
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026f2:	4641      	mov	r1, r8
 80026f4:	1854      	adds	r4, r2, r1
 80026f6:	4649      	mov	r1, r9
 80026f8:	eb43 0501 	adc.w	r5, r3, r1
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	00eb      	lsls	r3, r5, #3
 8002706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270a:	00e2      	lsls	r2, r4, #3
 800270c:	4614      	mov	r4, r2
 800270e:	461d      	mov	r5, r3
 8002710:	4643      	mov	r3, r8
 8002712:	18e3      	adds	r3, r4, r3
 8002714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002718:	464b      	mov	r3, r9
 800271a:	eb45 0303 	adc.w	r3, r5, r3
 800271e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800272e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800273e:	4629      	mov	r1, r5
 8002740:	008b      	lsls	r3, r1, #2
 8002742:	4621      	mov	r1, r4
 8002744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002748:	4621      	mov	r1, r4
 800274a:	008a      	lsls	r2, r1, #2
 800274c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002750:	f7fd fd40 	bl	80001d4 <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4b60      	ldr	r3, [pc, #384]	@ (80028dc <UART_SetConfig+0x4e4>)
 800275a:	fba3 2302 	umull	r2, r3, r3, r2
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	011c      	lsls	r4, r3, #4
 8002762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002766:	2200      	movs	r2, #0
 8002768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800276c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002774:	4642      	mov	r2, r8
 8002776:	464b      	mov	r3, r9
 8002778:	1891      	adds	r1, r2, r2
 800277a:	61b9      	str	r1, [r7, #24]
 800277c:	415b      	adcs	r3, r3
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002784:	4641      	mov	r1, r8
 8002786:	1851      	adds	r1, r2, r1
 8002788:	6139      	str	r1, [r7, #16]
 800278a:	4649      	mov	r1, r9
 800278c:	414b      	adcs	r3, r1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800279c:	4659      	mov	r1, fp
 800279e:	00cb      	lsls	r3, r1, #3
 80027a0:	4651      	mov	r1, sl
 80027a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a6:	4651      	mov	r1, sl
 80027a8:	00ca      	lsls	r2, r1, #3
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	4642      	mov	r2, r8
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027b8:	464b      	mov	r3, r9
 80027ba:	460a      	mov	r2, r1
 80027bc:	eb42 0303 	adc.w	r3, r2, r3
 80027c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027dc:	4649      	mov	r1, r9
 80027de:	008b      	lsls	r3, r1, #2
 80027e0:	4641      	mov	r1, r8
 80027e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e6:	4641      	mov	r1, r8
 80027e8:	008a      	lsls	r2, r1, #2
 80027ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027ee:	f7fd fcf1 	bl	80001d4 <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <UART_SetConfig+0x4e4>)
 80027fa:	fba3 2301 	umull	r2, r3, r3, r1
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2264      	movs	r2, #100	@ 0x64
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	1acb      	subs	r3, r1, r3
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	3332      	adds	r3, #50	@ 0x32
 800280c:	4a33      	ldr	r2, [pc, #204]	@ (80028dc <UART_SetConfig+0x4e4>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002818:	441c      	add	r4, r3
 800281a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800281e:	2200      	movs	r2, #0
 8002820:	673b      	str	r3, [r7, #112]	@ 0x70
 8002822:	677a      	str	r2, [r7, #116]	@ 0x74
 8002824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	1891      	adds	r1, r2, r2
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	415b      	adcs	r3, r3
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002838:	4641      	mov	r1, r8
 800283a:	1851      	adds	r1, r2, r1
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	4649      	mov	r1, r9
 8002840:	414b      	adcs	r3, r1
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002850:	4659      	mov	r1, fp
 8002852:	00cb      	lsls	r3, r1, #3
 8002854:	4651      	mov	r1, sl
 8002856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800285a:	4651      	mov	r1, sl
 800285c:	00ca      	lsls	r2, r1, #3
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	4603      	mov	r3, r0
 8002864:	4642      	mov	r2, r8
 8002866:	189b      	adds	r3, r3, r2
 8002868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800286a:	464b      	mov	r3, r9
 800286c:	460a      	mov	r2, r1
 800286e:	eb42 0303 	adc.w	r3, r2, r3
 8002872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	663b      	str	r3, [r7, #96]	@ 0x60
 800287e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800288c:	4649      	mov	r1, r9
 800288e:	008b      	lsls	r3, r1, #2
 8002890:	4641      	mov	r1, r8
 8002892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002896:	4641      	mov	r1, r8
 8002898:	008a      	lsls	r2, r1, #2
 800289a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800289e:	f7fd fc99 	bl	80001d4 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <UART_SetConfig+0x4e4>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2164      	movs	r1, #100	@ 0x64
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	3332      	adds	r3, #50	@ 0x32
 80028ba:	4a08      	ldr	r2, [pc, #32]	@ (80028dc <UART_SetConfig+0x4e4>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	f003 020f 	and.w	r2, r3, #15
 80028c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4422      	add	r2, r4
 80028ce:	609a      	str	r2, [r3, #8]
}
 80028d0:	bf00      	nop
 80028d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028d6:	46bd      	mov	sp, r7
 80028d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028dc:	51eb851f 	.word	0x51eb851f

080028e0 <memset>:
 80028e0:	4402      	add	r2, r0
 80028e2:	4603      	mov	r3, r0
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d100      	bne.n	80028ea <memset+0xa>
 80028e8:	4770      	bx	lr
 80028ea:	f803 1b01 	strb.w	r1, [r3], #1
 80028ee:	e7f9      	b.n	80028e4 <memset+0x4>

080028f0 <__libc_init_array>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002928 <__libc_init_array+0x38>)
 80028f4:	4c0d      	ldr	r4, [pc, #52]	@ (800292c <__libc_init_array+0x3c>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	2600      	movs	r6, #0
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d109      	bne.n	8002914 <__libc_init_array+0x24>
 8002900:	4d0b      	ldr	r5, [pc, #44]	@ (8002930 <__libc_init_array+0x40>)
 8002902:	4c0c      	ldr	r4, [pc, #48]	@ (8002934 <__libc_init_array+0x44>)
 8002904:	f000 f818 	bl	8002938 <_init>
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	2600      	movs	r6, #0
 800290e:	42a6      	cmp	r6, r4
 8002910:	d105      	bne.n	800291e <__libc_init_array+0x2e>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	f855 3b04 	ldr.w	r3, [r5], #4
 8002918:	4798      	blx	r3
 800291a:	3601      	adds	r6, #1
 800291c:	e7ee      	b.n	80028fc <__libc_init_array+0xc>
 800291e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002922:	4798      	blx	r3
 8002924:	3601      	adds	r6, #1
 8002926:	e7f2      	b.n	800290e <__libc_init_array+0x1e>
 8002928:	08002970 	.word	0x08002970
 800292c:	08002970 	.word	0x08002970
 8002930:	08002970 	.word	0x08002970
 8002934:	08002974 	.word	0x08002974

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
