
PTB_kettle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bcc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08007d70  08007d70  00008d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800816c  0800816c  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008174  08008174  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008178  08008178  00009178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800817c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200001d4  08008350  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08008350  0000a468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6ea  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e79  00000000  00000000  000178ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00019768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0b  00000000  00000000  0001a460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017497  00000000  00000000  0001ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed4a  00000000  00000000  00032302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902fa  00000000  00000000  0004104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c0  00000000  00000000  000d138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d5d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d54 	.word	0x08007d54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007d54 	.word	0x08007d54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f98:	b0c0      	sub	sp, #256	@ 0x100
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8000fa0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8000fa4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000fa8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fb4:	f040 810c 	bne.w	80011d0 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000fb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8000fc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8000fca:	4622      	mov	r2, r4
 8000fcc:	462b      	mov	r3, r5
 8000fce:	1891      	adds	r1, r2, r2
 8000fd0:	6639      	str	r1, [r7, #96]	@ 0x60
 8000fd2:	415b      	adcs	r3, r3
 8000fd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000fd6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000fda:	4621      	mov	r1, r4
 8000fdc:	eb12 0801 	adds.w	r8, r2, r1
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	eb43 0901 	adc.w	r9, r3, r1
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ffa:	4690      	mov	r8, r2
 8000ffc:	4699      	mov	r9, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	eb18 0303 	adds.w	r3, r8, r3
 8001004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001008:	462b      	mov	r3, r5
 800100a:	eb49 0303 	adc.w	r3, r9, r3
 800100e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001012:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001016:	2200      	movs	r2, #0
 8001018:	469a      	mov	sl, r3
 800101a:	4693      	mov	fp, r2
 800101c:	eb1a 030a 	adds.w	r3, sl, sl
 8001020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001022:	eb4b 030b 	adc.w	r3, fp, fp
 8001026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001028:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800102c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001030:	f7ff fe02 	bl	8000c38 <__aeabi_uldivmod>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4b64      	ldr	r3, [pc, #400]	@ (80011cc <LL_USART_SetBaudRate+0x238>)
 800103a:	fba3 2302 	umull	r2, r3, r3, r2
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	b29b      	uxth	r3, r3
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	b29c      	uxth	r4, r3
 8001046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800104a:	2200      	movs	r2, #0
 800104c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001050:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001054:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8001058:	4642      	mov	r2, r8
 800105a:	464b      	mov	r3, r9
 800105c:	1891      	adds	r1, r2, r2
 800105e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001060:	415b      	adcs	r3, r3
 8001062:	657b      	str	r3, [r7, #84]	@ 0x54
 8001064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001068:	4641      	mov	r1, r8
 800106a:	1851      	adds	r1, r2, r1
 800106c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800106e:	4649      	mov	r1, r9
 8001070:	414b      	adcs	r3, r1
 8001072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8001080:	4659      	mov	r1, fp
 8001082:	00cb      	lsls	r3, r1, #3
 8001084:	4651      	mov	r1, sl
 8001086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800108a:	4651      	mov	r1, sl
 800108c:	00ca      	lsls	r2, r1, #3
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	4603      	mov	r3, r0
 8001094:	4642      	mov	r2, r8
 8001096:	189b      	adds	r3, r3, r2
 8001098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800109c:	464b      	mov	r3, r9
 800109e:	460a      	mov	r2, r1
 80010a0:	eb42 0303 	adc.w	r3, r2, r3
 80010a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80010a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80010ac:	2200      	movs	r2, #0
 80010ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80010b2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80010b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80010ba:	460b      	mov	r3, r1
 80010bc:	18db      	adds	r3, r3, r3
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
 80010c0:	4613      	mov	r3, r2
 80010c2:	eb42 0303 	adc.w	r3, r2, r3
 80010c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80010c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80010cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80010d0:	f7ff fdb2 	bl	8000c38 <__aeabi_uldivmod>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	4b3c      	ldr	r3, [pc, #240]	@ (80011cc <LL_USART_SetBaudRate+0x238>)
 80010dc:	fba3 2301 	umull	r2, r3, r3, r1
 80010e0:	095b      	lsrs	r3, r3, #5
 80010e2:	2264      	movs	r2, #100	@ 0x64
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	1acb      	subs	r3, r1, r3
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <LL_USART_SetBaudRate+0x238>)
 80010f2:	fba3 2302 	umull	r2, r3, r3, r2
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001102:	b29b      	uxth	r3, r3
 8001104:	4423      	add	r3, r4
 8001106:	b29c      	uxth	r4, r3
 8001108:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800110c:	2200      	movs	r2, #0
 800110e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001112:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001116:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800111a:	4642      	mov	r2, r8
 800111c:	464b      	mov	r3, r9
 800111e:	1891      	adds	r1, r2, r2
 8001120:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001122:	415b      	adcs	r3, r3
 8001124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001126:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800112a:	4641      	mov	r1, r8
 800112c:	1851      	adds	r1, r2, r1
 800112e:	6339      	str	r1, [r7, #48]	@ 0x30
 8001130:	4649      	mov	r1, r9
 8001132:	414b      	adcs	r3, r1
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001142:	4659      	mov	r1, fp
 8001144:	00cb      	lsls	r3, r1, #3
 8001146:	4651      	mov	r1, sl
 8001148:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800114c:	4651      	mov	r1, sl
 800114e:	00ca      	lsls	r2, r1, #3
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	4603      	mov	r3, r0
 8001156:	4642      	mov	r2, r8
 8001158:	189b      	adds	r3, r3, r2
 800115a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800115e:	464b      	mov	r3, r9
 8001160:	460a      	mov	r2, r1
 8001162:	eb42 0303 	adc.w	r3, r2, r3
 8001166:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800116a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800116e:	2200      	movs	r2, #0
 8001170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001174:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001178:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800117c:	460b      	mov	r3, r1
 800117e:	18db      	adds	r3, r3, r3
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001182:	4613      	mov	r3, r2
 8001184:	eb42 0303 	adc.w	r3, r2, r3
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800118a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800118e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001192:	f7ff fd51 	bl	8000c38 <__aeabi_uldivmod>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <LL_USART_SetBaudRate+0x238>)
 800119c:	fba3 1302 	umull	r1, r3, r3, r2
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	2164      	movs	r1, #100	@ 0x64
 80011a4:	fb01 f303 	mul.w	r3, r1, r3
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	3332      	adds	r3, #50	@ 0x32
 80011ae:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <LL_USART_SetBaudRate+0x238>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	095b      	lsrs	r3, r3, #5
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4423      	add	r3, r4
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80011c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80011ca:	e108      	b.n	80013de <LL_USART_SetBaudRate+0x44a>
 80011cc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80011d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80011d4:	2200      	movs	r2, #0
 80011d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80011da:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80011de:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80011e2:	4642      	mov	r2, r8
 80011e4:	464b      	mov	r3, r9
 80011e6:	1891      	adds	r1, r2, r2
 80011e8:	6239      	str	r1, [r7, #32]
 80011ea:	415b      	adcs	r3, r3
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011f2:	4641      	mov	r1, r8
 80011f4:	1854      	adds	r4, r2, r1
 80011f6:	4649      	mov	r1, r9
 80011f8:	eb43 0501 	adc.w	r5, r3, r1
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	00eb      	lsls	r3, r5, #3
 8001206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800120a:	00e2      	lsls	r2, r4, #3
 800120c:	4614      	mov	r4, r2
 800120e:	461d      	mov	r5, r3
 8001210:	4643      	mov	r3, r8
 8001212:	18e3      	adds	r3, r4, r3
 8001214:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001218:	464b      	mov	r3, r9
 800121a:	eb45 0303 	adc.w	r3, r5, r3
 800121e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001222:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001226:	2200      	movs	r2, #0
 8001228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800122c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800123c:	4629      	mov	r1, r5
 800123e:	008b      	lsls	r3, r1, #2
 8001240:	4621      	mov	r1, r4
 8001242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001246:	4621      	mov	r1, r4
 8001248:	008a      	lsls	r2, r1, #2
 800124a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800124e:	f7ff fcf3 	bl	8000c38 <__aeabi_uldivmod>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <LL_USART_SetBaudRate+0x458>)
 8001258:	fba3 2302 	umull	r2, r3, r3, r2
 800125c:	095b      	lsrs	r3, r3, #5
 800125e:	b29b      	uxth	r3, r3
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	b29c      	uxth	r4, r3
 8001264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001268:	2200      	movs	r2, #0
 800126a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800126e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001272:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001276:	4642      	mov	r2, r8
 8001278:	464b      	mov	r3, r9
 800127a:	1891      	adds	r1, r2, r2
 800127c:	61b9      	str	r1, [r7, #24]
 800127e:	415b      	adcs	r3, r3
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001286:	4641      	mov	r1, r8
 8001288:	1851      	adds	r1, r2, r1
 800128a:	6139      	str	r1, [r7, #16]
 800128c:	4649      	mov	r1, r9
 800128e:	414b      	adcs	r3, r1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800129e:	4659      	mov	r1, fp
 80012a0:	00cb      	lsls	r3, r1, #3
 80012a2:	4651      	mov	r1, sl
 80012a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012a8:	4651      	mov	r1, sl
 80012aa:	00ca      	lsls	r2, r1, #3
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	4642      	mov	r2, r8
 80012b4:	189b      	adds	r3, r3, r2
 80012b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012ba:	464b      	mov	r3, r9
 80012bc:	460a      	mov	r2, r1
 80012be:	eb42 0303 	adc.w	r3, r2, r3
 80012c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80012ca:	2200      	movs	r2, #0
 80012cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80012e0:	4649      	mov	r1, r9
 80012e2:	008b      	lsls	r3, r1, #2
 80012e4:	4641      	mov	r1, r8
 80012e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80012ea:	4641      	mov	r1, r8
 80012ec:	008a      	lsls	r2, r1, #2
 80012ee:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80012f2:	f7ff fca1 	bl	8000c38 <__aeabi_uldivmod>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ec <LL_USART_SetBaudRate+0x458>)
 80012fe:	fba3 2301 	umull	r2, r3, r3, r1
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2264      	movs	r2, #100	@ 0x64
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	1acb      	subs	r3, r1, r3
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	3332      	adds	r3, #50	@ 0x32
 8001310:	4a36      	ldr	r2, [pc, #216]	@ (80013ec <LL_USART_SetBaudRate+0x458>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	b29b      	uxth	r3, r3
 800131a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800131e:	b29b      	uxth	r3, r3
 8001320:	4423      	add	r3, r4
 8001322:	b29c      	uxth	r4, r3
 8001324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001328:	2200      	movs	r2, #0
 800132a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800132c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800132e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001332:	4642      	mov	r2, r8
 8001334:	464b      	mov	r3, r9
 8001336:	1891      	adds	r1, r2, r2
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	415b      	adcs	r3, r3
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001342:	4641      	mov	r1, r8
 8001344:	1851      	adds	r1, r2, r1
 8001346:	6039      	str	r1, [r7, #0]
 8001348:	4649      	mov	r1, r9
 800134a:	414b      	adcs	r3, r1
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800135a:	4659      	mov	r1, fp
 800135c:	00cb      	lsls	r3, r1, #3
 800135e:	4651      	mov	r1, sl
 8001360:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001364:	4651      	mov	r1, sl
 8001366:	00ca      	lsls	r2, r1, #3
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	4603      	mov	r3, r0
 800136e:	4642      	mov	r2, r8
 8001370:	189b      	adds	r3, r3, r2
 8001372:	673b      	str	r3, [r7, #112]	@ 0x70
 8001374:	464b      	mov	r3, r9
 8001376:	460a      	mov	r2, r1
 8001378:	eb42 0303 	adc.w	r3, r2, r3
 800137c:	677b      	str	r3, [r7, #116]	@ 0x74
 800137e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001382:	2200      	movs	r2, #0
 8001384:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001386:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001394:	4649      	mov	r1, r9
 8001396:	008b      	lsls	r3, r1, #2
 8001398:	4641      	mov	r1, r8
 800139a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800139e:	4641      	mov	r1, r8
 80013a0:	008a      	lsls	r2, r1, #2
 80013a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80013a6:	f7ff fc47 	bl	8000c38 <__aeabi_uldivmod>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <LL_USART_SetBaudRate+0x458>)
 80013b0:	fba3 1302 	umull	r1, r3, r3, r2
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	2164      	movs	r1, #100	@ 0x64
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	3332      	adds	r3, #50	@ 0x32
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LL_USART_SetBaudRate+0x458>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	095b      	lsrs	r3, r3, #5
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4423      	add	r3, r4
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013dc:	609a      	str	r2, [r3, #8]
}
 80013de:	bf00      	nop
 80013e0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80013e4:	46bd      	mov	sp, r7
 80013e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013ea:	bf00      	nop
 80013ec:	51eb851f 	.word	0x51eb851f

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f000 fd29 	bl	8001e4c <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t high_temp = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	72fb      	strb	r3, [r7, #11]
  uint8_t low_temp = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	72bb      	strb	r3, [r7, #10]
  uint8_t time = 0; // never used a bit useless
 8001402:	2300      	movs	r3, #0
 8001404:	727b      	strb	r3, [r7, #9]
  uint8_t data[3] = {0, 0, 0};
 8001406:	4a28      	ldr	r2, [pc, #160]	@ (80014a8 <main+0xb8>)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	4611      	mov	r1, r2
 800140e:	8019      	strh	r1, [r3, #0]
 8001410:	3302      	adds	r3, #2
 8001412:	0c12      	lsrs	r2, r2, #16
 8001414:	701a      	strb	r2, [r3, #0]
  uint8_t status = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	70fb      	strb	r3, [r7, #3]
  float currentTemp = 0;
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f846 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001424:	f000 f978 	bl	8001718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001428:	f000 f922 	bl	8001670 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800142c:	f000 f8aa 	bl	8001584 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001430:	f000 f8f4 	bl	800161c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001434:	f000 f946 	bl	80016c4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(SERVO_Motor1);
 8001438:	2000      	movs	r0, #0
 800143a:	f003 f80b 	bl	8004454 <SERVO_Init>
		  HAL_UART_Transmit(&huart1, &signal, sizeof(signal), 1000);
	  }*/


	  // If button has been pressed
	  if(HAL_UART_Receive(&huart1, data, sizeof(data), HAL_MAX_DELAY) == HAL_OK){
 800143e:	1d39      	adds	r1, r7, #4
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	2203      	movs	r2, #3
 8001446:	4819      	ldr	r0, [pc, #100]	@ (80014ac <main+0xbc>)
 8001448:	f002 fc0d 	bl	8003c66 <HAL_UART_Receive>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f5      	bne.n	800143e <main+0x4e>
		  high_temp = data[0];
 8001452:	793b      	ldrb	r3, [r7, #4]
 8001454:	72fb      	strb	r3, [r7, #11]
		  low_temp = data[1];
 8001456:	797b      	ldrb	r3, [r7, #5]
 8001458:	72bb      	strb	r3, [r7, #10]
		  time = data[2];
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	727b      	strb	r3, [r7, #9]

		  // Receive temperature every 100ms until temp is midway between high and low
		  while(currentTemp < ((high_temp-low_temp)/2 + low_temp)){
 800145e:	e008      	b.n	8001472 <main+0x82>
			  DS18B20_resetTemperature();
 8001460:	f000 fa67 	bl	8001932 <DS18B20_resetTemperature>
			  currentTemp = DS18B20_readTemperature();
 8001464:	f000 fa71 	bl	800194a <DS18B20_readTemperature>
 8001468:	ed87 0a03 	vstr	s0, [r7, #12]
			  HAL_Delay(100);
 800146c:	2064      	movs	r0, #100	@ 0x64
 800146e:	f000 fd5f 	bl	8001f30 <HAL_Delay>
		  while(currentTemp < ((high_temp-low_temp)/2 + low_temp)){
 8001472:	7afa      	ldrb	r2, [r7, #11]
 8001474:	7abb      	ldrb	r3, [r7, #10]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	0fda      	lsrs	r2, r3, #31
 800147a:	4413      	add	r3, r2
 800147c:	105b      	asrs	r3, r3, #1
 800147e:	461a      	mov	r2, r3
 8001480:	7abb      	ldrb	r3, [r7, #10]
 8001482:	4413      	add	r3, r2
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d4e2      	bmi.n	8001460 <main+0x70>
		  }

		  // If past temperature is done
		  HAL_UART_Transmit(&huart1, &status, 1, 1);
 800149a:	1cf9      	adds	r1, r7, #3
 800149c:	2301      	movs	r3, #1
 800149e:	2201      	movs	r2, #1
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <main+0xbc>)
 80014a2:	f002 fb55 	bl	8003b50 <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart1, data, sizeof(data), HAL_MAX_DELAY) == HAL_OK){
 80014a6:	e7ca      	b.n	800143e <main+0x4e>
 80014a8:	08007d70 	.word	0x08007d70
 80014ac:	20000238 	.word	0x20000238

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fd31 	bl	8004f26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b28      	ldr	r3, [pc, #160]	@ (800157c <SystemClock_Config+0xcc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a27      	ldr	r2, [pc, #156]	@ (800157c <SystemClock_Config+0xcc>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <SystemClock_Config+0xcc>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <SystemClock_Config+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014fc:	4a20      	ldr	r2, [pc, #128]	@ (8001580 <SystemClock_Config+0xd0>)
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <SystemClock_Config+0xd0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001510:	2301      	movs	r3, #1
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151a:	2302      	movs	r3, #2
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001528:	2348      	movs	r3, #72	@ 0x48
 800152a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800152c:	2302      	movs	r3, #2
 800152e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001530:	2307      	movs	r3, #7
 8001532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001534:	f107 0320 	add.w	r3, r7, #32
 8001538:	4618      	mov	r0, r3
 800153a:	f000 ffa1 	bl	8002480 <HAL_RCC_OscConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001544:	f000 fa2a 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001548:	230f      	movs	r3, #15
 800154a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154c:	2302      	movs	r3, #2
 800154e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001558:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2102      	movs	r1, #2
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fa03 	bl	8002970 <HAL_RCC_ClockConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001570:	f000 fa14 	bl	800199c <Error_Handler>
  }
}
 8001574:	bf00      	nop
 8001576:	3750      	adds	r7, #80	@ 0x50
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c8:	4813      	ldr	r0, [pc, #76]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015ca:	f001 fbf1 	bl	8002db0 <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015d4:	f000 f9e2 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <MX_TIM2_Init+0x94>)
 80015e6:	f001 fdfd 	bl	80031e4 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015f0:	f000 f9d4 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fc:	463b      	mov	r3, r7
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_TIM2_Init+0x94>)
 8001602:	f002 f98f 	bl	8003924 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 f9c6 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200001f0 	.word	0x200001f0

0800161c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <MX_USART1_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001654:	f002 f9d4 	bl	8003a00 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f99d 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000238 	.word	0x20000238
 800166c:	40011000 	.word	0x40011000

08001670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <MX_USART2_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 80016a8:	f002 f9aa 	bl	8003a00 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f973 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000280 	.word	0x20000280
 80016c0:	40004400 	.word	0x40004400

080016c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <MX_USART6_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_USART6_UART_Init+0x4c>)
 80016fc:	f002 f9d0 	bl	8003aa0 <HAL_HalfDuplex_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f949 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002c8 	.word	0x200002c8
 8001714:	40011400 	.word	0x40011400

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a2c      	ldr	r2, [pc, #176]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b2a      	ldr	r3, [pc, #168]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a25      	ldr	r2, [pc, #148]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a1e      	ldr	r2, [pc, #120]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a17      	ldr	r2, [pc, #92]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <MX_GPIO_Init+0xd0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0xd4>)
 80017a4:	f000 fe52 	bl	800244c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_GPIO_Init+0xd8>)
 80017be:	f000 fcc1 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017c2:	2320      	movs	r3, #32
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_GPIO_Init+0xd4>)
 80017da:	f000 fcb3 	bl	8002144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	@ 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020800 	.word	0x40020800

080017f4 <DS18B20_reset>:

/* USER CODE BEGIN 4 */
static uint8_t DS18B20_reset(void){
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
    // 11110000 = 0xF0 (need 5 LOW, 1 from master other 4 from reset)
	uint8_t reset = 0xF0, device;
 80017fa:	23f0      	movs	r3, #240	@ 0xf0
 80017fc:	71fb      	strb	r3, [r7, #7]

	// Lower baud rate for timings
    LL_USART_SetBaudRate(huart6.Instance, HAL_RCC_GetPCLK2Freq(), LL_USART_OVERSAMPLING_16, 9600);
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <DS18B20_reset+0x64>)
 8001800:	681c      	ldr	r4, [r3, #0]
 8001802:	f001 fac1 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8001806:	4601      	mov	r1, r0
 8001808:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800180c:	2200      	movs	r2, #0
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fbc0 	bl	8000f94 <LL_USART_SetBaudRate>


    HAL_UART_Transmit(&huart6, &reset, 1, 1);
 8001814:	1df9      	adds	r1, r7, #7
 8001816:	2301      	movs	r3, #1
 8001818:	2201      	movs	r2, #1
 800181a:	480f      	ldr	r0, [pc, #60]	@ (8001858 <DS18B20_reset+0x64>)
 800181c:	f002 f998 	bl	8003b50 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, &device, 1, 1);
 8001820:	1db9      	adds	r1, r7, #6
 8001822:	2301      	movs	r3, #1
 8001824:	2201      	movs	r2, #1
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <DS18B20_reset+0x64>)
 8001828:	f002 fa1d 	bl	8003c66 <HAL_UART_Receive>

    LL_USART_SetBaudRate(huart6.Instance, HAL_RCC_GetPCLK2Freq(), LL_USART_OVERSAMPLING_16, 115200);
 800182c:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <DS18B20_reset+0x64>)
 800182e:	681c      	ldr	r4, [r3, #0]
 8001830:	f001 faaa 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8001834:	4601      	mov	r1, r0
 8001836:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800183a:	2200      	movs	r2, #0
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fba9 	bl	8000f94 <LL_USART_SetBaudRate>


    // Check if device available
    if (device != reset) return 1;
 8001842:	79ba      	ldrb	r2, [r7, #6]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <DS18B20_reset+0x5a>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <DS18B20_reset+0x5c>
    else return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	200002c8 	.word	0x200002c8

0800185c <DS18B20_write>:

static void DS18B20_write(uint8_t data){
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[8];

    for (int i = 0; i < 8; i++){
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e017      	b.n	800189c <DS18B20_write+0x40>
      if ((data & (1<<i)) == 0) buffer[i] = 0; // bit 0: 8 LOW bytes
 800186c:	79fa      	ldrb	r2, [r7, #7]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa42 f303 	asr.w	r3, r2, r3
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d106      	bne.n	800188a <DS18B20_write+0x2e>
 800187c:	f107 020c 	add.w	r2, r7, #12
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4413      	add	r3, r2
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	e005      	b.n	8001896 <DS18B20_write+0x3a>
      else buffer[i] = 0xFF; // bit 1: 11111111 = 0xFF (8 HIGH bytes)
 800188a:	f107 020c 	add.w	r2, r7, #12
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++){
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b07      	cmp	r3, #7
 80018a0:	dde4      	ble.n	800186c <DS18B20_write+0x10>
    }

    HAL_UART_Transmit(&huart6, buffer, 8, 10);
 80018a2:	f107 010c 	add.w	r1, r7, #12
 80018a6:	230a      	movs	r3, #10
 80018a8:	2208      	movs	r2, #8
 80018aa:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <DS18B20_write+0x5c>)
 80018ac:	f002 f950 	bl	8003b50 <HAL_UART_Transmit>
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200002c8 	.word	0x200002c8

080018bc <DS18B20_readBit>:

static uint8_t DS18B20_readBit(void){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	// 0xFF (8 HIGH bytes)
	uint8_t readBit = 0xFF, bit;
 80018c2:	23ff      	movs	r3, #255	@ 0xff
 80018c4:	71fb      	strb	r3, [r7, #7]

    // Send read bit command and receive
    HAL_UART_Transmit(&huart6, &readBit, 1, 1);
 80018c6:	1df9      	adds	r1, r7, #7
 80018c8:	2301      	movs	r3, #1
 80018ca:	2201      	movs	r2, #1
 80018cc:	4808      	ldr	r0, [pc, #32]	@ (80018f0 <DS18B20_readBit+0x34>)
 80018ce:	f002 f93f 	bl	8003b50 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, &bit, 1, 1);
 80018d2:	1db9      	adds	r1, r7, #6
 80018d4:	2301      	movs	r3, #1
 80018d6:	2201      	movs	r2, #1
 80018d8:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <DS18B20_readBit+0x34>)
 80018da:	f002 f9c4 	bl	8003c66 <HAL_UART_Receive>

    // 00000001 = 0x01 gets last bit (since only sent by single bit)
    return (bit & 0x01);
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200002c8 	.word	0x200002c8

080018f4 <DS18B20_readByte>:

static uint8_t DS18B20_readByte(void){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	71fb      	strb	r3, [r7, #7]

    for (int i = 0; i < 8; i++){
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	e00e      	b.n	8001922 <DS18B20_readByte+0x2e>
        byte >>= 1; // shift bit one to the right
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	71fb      	strb	r3, [r7, #7]

        // 10000000 = 0x80 if bit is 1 add
        if (DS18B20_readBit()) byte |= 0x80;
 800190a:	f7ff ffd7 	bl	80018bc <DS18B20_readBit>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <DS18B20_readByte+0x28>
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800191a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++){
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b07      	cmp	r3, #7
 8001926:	dded      	ble.n	8001904 <DS18B20_readByte+0x10>
    }
    return byte;
 8001928:	79fb      	ldrb	r3, [r7, #7]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <DS18B20_resetTemperature>:

void DS18B20_resetTemperature(void){
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
    DS18B20_reset();
 8001936:	f7ff ff5d 	bl	80017f4 <DS18B20_reset>
    DS18B20_write(0xCC);  // Skip ROM [CCh] since only 1 sensor
 800193a:	20cc      	movs	r0, #204	@ 0xcc
 800193c:	f7ff ff8e 	bl	800185c <DS18B20_write>
    DS18B20_write(0x44);  // Convert T [44h] to start temp conversion
 8001940:	2044      	movs	r0, #68	@ 0x44
 8001942:	f7ff ff8b 	bl	800185c <DS18B20_write>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}

0800194a <DS18B20_readTemperature>:

float DS18B20_readTemperature(void){
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
    uint8_t LSB, MSB;
    float temperature;

    DS18B20_reset();
 8001950:	f7ff ff50 	bl	80017f4 <DS18B20_reset>
    DS18B20_write(0xCC);  // Skip ROM [CCh] since only 1 sensor
 8001954:	20cc      	movs	r0, #204	@ 0xcc
 8001956:	f7ff ff81 	bl	800185c <DS18B20_write>
    DS18B20_write(0xBE);  // Read Scratchpad [BEh] to get temp data
 800195a:	20be      	movs	r0, #190	@ 0xbe
 800195c:	f7ff ff7e 	bl	800185c <DS18B20_write>

    LSB = DS18B20_readByte();
 8001960:	f7ff ffc8 	bl	80018f4 <DS18B20_readByte>
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
    MSB = DS18B20_readByte();
 8001968:	f7ff ffc4 	bl	80018f4 <DS18B20_readByte>
 800196c:	4603      	mov	r3, r0
 800196e:	71bb      	strb	r3, [r7, #6]

    temperature = (float)((MSB<<8)|LSB)/16.0;
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	021a      	lsls	r2, r3, #8
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4313      	orrs	r3, r2
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001980:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001984:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001988:	edc7 7a00 	vstr	s15, [r7]

    return temperature;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	ee07 3a90 	vmov	s15, r3
}
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <Error_Handler+0x8>

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	4a0f      	ldr	r2, [pc, #60]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a08      	ldr	r2, [pc, #32]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019e6:	2007      	movs	r0, #7
 80019e8:	f000 fb78 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a18:	d12b      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_TIM_Base_MspInit+0x84>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	4a16      	ldr	r2, [pc, #88]	@ (8001a7c <HAL_TIM_Base_MspInit+0x84>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_TIM_Base_MspInit+0x84>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_TIM_Base_MspInit+0x84>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_TIM_Base_MspInit+0x84>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_TIM_Base_MspInit+0x84>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a52:	2301      	movs	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a62:	2301      	movs	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <HAL_TIM_Base_MspInit+0x88>)
 8001a6e:	f000 fb69 	bl	8002144 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	@ 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	@ 0x38
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8001bd0 <HAL_UART_MspInit+0x14c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12d      	bne.n	8001b02 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a49      	ldr	r2, [pc, #292]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b47      	ldr	r3, [pc, #284]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	4b43      	ldr	r3, [pc, #268]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a42      	ldr	r2, [pc, #264]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b40      	ldr	r3, [pc, #256]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ade:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af0:	2307      	movs	r3, #7
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af8:	4619      	mov	r1, r3
 8001afa:	4837      	ldr	r0, [pc, #220]	@ (8001bd8 <HAL_UART_MspInit+0x154>)
 8001afc:	f000 fb22 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b00:	e062      	b.n	8001bc8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a35      	ldr	r2, [pc, #212]	@ (8001bdc <HAL_UART_MspInit+0x158>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12c      	bne.n	8001b66 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	4b30      	ldr	r3, [pc, #192]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	4a28      	ldr	r2, [pc, #160]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b38:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b44:	230c      	movs	r3, #12
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b54:	2307      	movs	r3, #7
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481e      	ldr	r0, [pc, #120]	@ (8001bd8 <HAL_UART_MspInit+0x154>)
 8001b60:	f000 faf0 	bl	8002144 <HAL_GPIO_Init>
}
 8001b64:	e030      	b.n	8001bc8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <HAL_UART_MspInit+0x15c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d12b      	bne.n	8001bc8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b78:	4a16      	ldr	r2, [pc, #88]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <HAL_UART_MspInit+0x150>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba8:	2340      	movs	r3, #64	@ 0x40
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4808      	ldr	r0, [pc, #32]	@ (8001be4 <HAL_UART_MspInit+0x160>)
 8001bc4:	f000 fabe 	bl	8002144 <HAL_GPIO_Init>
}
 8001bc8:	bf00      	nop
 8001bca:	3738      	adds	r7, #56	@ 0x38
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40020800 	.word	0x40020800

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <NMI_Handler+0x4>

08001bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <MemManage_Handler+0x4>

08001c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3e:	f000 f957 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_kill>:

int _kill(int pid, int sig)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c60:	f003 f9b0 	bl	8004fc4 <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2216      	movs	r2, #22
 8001c68:	601a      	str	r2, [r3, #0]
  return -1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_exit>:

void _exit (int status)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffe7 	bl	8001c56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <_exit+0x12>

08001c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00a      	b.n	8001cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9e:	f3af 8000 	nop.w
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	b2ca      	uxtb	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf0      	blt.n	8001c9e <_read+0x12>
  }

  return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e009      	b.n	8001cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf1      	blt.n	8001cd8 <_write+0x12>
  }
  return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:

int _close(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d26:	605a      	str	r2, [r3, #4]
  return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_isatty>:

int _isatty(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f003 f914 	bl	8004fc4 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20018000 	.word	0x20018000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	20000310 	.word	0x20000310
 8001dd0:	20000468 	.word	0x20000468

08001dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dfc:	f7ff ffea 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	@ (8001e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	@ (8001e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	@ (8001e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f003 f8d3 	bl	8004fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff fae1 	bl	80013f0 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e3c:	0800817c 	.word	0x0800817c
  ldr r2, =_sbss
 8001e40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e44:	20000468 	.word	0x20000468

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f931 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fd92 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f93b 	bl	800212a <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 f911 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000314 	.word	0x20000314

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000314 	.word	0x20000314

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff47 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff5c 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffb0 	bl	8002098 <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	@ 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e159      	b.n	8002414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002160:	2201      	movs	r2, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	429a      	cmp	r2, r3
 800217a:	f040 8148 	bne.w	800240e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d005      	beq.n	8002196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002192:	2b02      	cmp	r3, #2
 8002194:	d130      	bne.n	80021f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021cc:	2201      	movs	r2, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 0201 	and.w	r2, r3, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b03      	cmp	r3, #3
 8002202:	d017      	beq.n	8002234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d123      	bne.n	8002288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0203 	and.w	r2, r3, #3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a2 	beq.w	800240e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b57      	ldr	r3, [pc, #348]	@ (800242c <HAL_GPIO_Init+0x2e8>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	4a56      	ldr	r2, [pc, #344]	@ (800242c <HAL_GPIO_Init+0x2e8>)
 80022d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022da:	4b54      	ldr	r3, [pc, #336]	@ (800242c <HAL_GPIO_Init+0x2e8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e6:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <HAL_GPIO_Init+0x2ec>)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a49      	ldr	r2, [pc, #292]	@ (8002434 <HAL_GPIO_Init+0x2f0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x202>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a48      	ldr	r2, [pc, #288]	@ (8002438 <HAL_GPIO_Init+0x2f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x1fe>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a47      	ldr	r2, [pc, #284]	@ (800243c <HAL_GPIO_Init+0x2f8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x1fa>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a46      	ldr	r2, [pc, #280]	@ (8002440 <HAL_GPIO_Init+0x2fc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x1f6>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a45      	ldr	r2, [pc, #276]	@ (8002444 <HAL_GPIO_Init+0x300>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x1f2>
 8002332:	2304      	movs	r3, #4
 8002334:	e008      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002336:	2307      	movs	r3, #7
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x204>
 800233a:	2303      	movs	r3, #3
 800233c:	e004      	b.n	8002348 <HAL_GPIO_Init+0x204>
 800233e:	2302      	movs	r3, #2
 8002340:	e002      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x204>
 8002346:	2300      	movs	r3, #0
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f002 0203 	and.w	r2, r2, #3
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	4093      	lsls	r3, r2
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002358:	4935      	ldr	r1, [pc, #212]	@ (8002430 <HAL_GPIO_Init+0x2ec>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002366:	4b38      	ldr	r3, [pc, #224]	@ (8002448 <HAL_GPIO_Init+0x304>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238a:	4a2f      	ldr	r2, [pc, #188]	@ (8002448 <HAL_GPIO_Init+0x304>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002390:	4b2d      	ldr	r3, [pc, #180]	@ (8002448 <HAL_GPIO_Init+0x304>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b4:	4a24      	ldr	r2, [pc, #144]	@ (8002448 <HAL_GPIO_Init+0x304>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ba:	4b23      	ldr	r3, [pc, #140]	@ (8002448 <HAL_GPIO_Init+0x304>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023de:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <HAL_GPIO_Init+0x304>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e4:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <HAL_GPIO_Init+0x304>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002408:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <HAL_GPIO_Init+0x304>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	f67f aea2 	bls.w	8002160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40013800 	.word	0x40013800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020400 	.word	0x40020400
 800243c:	40020800 	.word	0x40020800
 8002440:	40020c00 	.word	0x40020c00
 8002444:	40021000 	.word	0x40021000
 8002448:	40013c00 	.word	0x40013c00

0800244c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	787b      	ldrb	r3, [r7, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002468:	e003      	b.n	8002472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	619a      	str	r2, [r3, #24]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e267      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d075      	beq.n	800258a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800249e:	4b88      	ldr	r3, [pc, #544]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b85      	ldr	r3, [pc, #532]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b7e      	ldr	r3, [pc, #504]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e242      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x74>
 80024e6:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b70      	ldr	r3, [pc, #448]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6f      	ldr	r2, [pc, #444]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b6d      	ldr	r3, [pc, #436]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6c      	ldr	r2, [pc, #432]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 8002518:	4b69      	ldr	r3, [pc, #420]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a68      	ldr	r2, [pc, #416]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fcee 	bl	8001f18 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fcea 	bl	8001f18 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e207      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b5b      	ldr	r3, [pc, #364]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xc0>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fcda 	bl	8001f18 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fcd6 	bl	8001f18 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1f3      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b51      	ldr	r3, [pc, #324]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002596:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b44      	ldr	r3, [pc, #272]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1c7      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4937      	ldr	r1, [pc, #220]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <HAL_RCC_OscConfig+0x244>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7ff fc8f 	bl	8001f18 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7ff fc8b 	bl	8001f18 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1a8      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4925      	ldr	r1, [pc, #148]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_RCC_OscConfig+0x244>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff fc6e 	bl	8001f18 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7ff fc6a 	bl	8001f18 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e187      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_RCC_OscConfig+0x248>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff fc4e 	bl	8001f18 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff fc4a 	bl	8001f18 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e167      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x200>
 800269e:	e01b      	b.n	80026d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_RCC_OscConfig+0x248>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fc37 	bl	8001f18 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e00e      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ae:	f7ff fc33 	bl	8001f18 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d907      	bls.n	80026cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e150      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b88      	ldr	r3, [pc, #544]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ea      	bne.n	80026ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b81      	ldr	r3, [pc, #516]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b7d      	ldr	r3, [pc, #500]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a7c      	ldr	r2, [pc, #496]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b7a      	ldr	r3, [pc, #488]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b77      	ldr	r3, [pc, #476]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b74      	ldr	r3, [pc, #464]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a73      	ldr	r2, [pc, #460]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7ff fbf3 	bl	8001f18 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7ff fbef 	bl	8001f18 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e10c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b6a      	ldr	r3, [pc, #424]	@ (80028f4 <HAL_RCC_OscConfig+0x474>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x2ea>
 800275c:	4b64      	ldr	r3, [pc, #400]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	4a63      	ldr	r2, [pc, #396]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x30c>
 8002772:	4b5f      	ldr	r3, [pc, #380]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	4a5e      	ldr	r2, [pc, #376]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70
 800277e:	4b5c      	ldr	r3, [pc, #368]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002782:	4a5b      	ldr	r2, [pc, #364]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	@ 0x70
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800278c:	4b58      	ldr	r3, [pc, #352]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a57      	ldr	r2, [pc, #348]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	4b55      	ldr	r3, [pc, #340]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279c:	4a54      	ldr	r2, [pc, #336]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7ff fbb4 	bl	8001f18 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7ff fbb0 	bl	8001f18 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0cb      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b49      	ldr	r3, [pc, #292]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCC_OscConfig+0x334>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7ff fb9e 	bl	8001f18 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7ff fb9a 	bl	8001f18 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0b5      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	4b3e      	ldr	r3, [pc, #248]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b39      	ldr	r3, [pc, #228]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	4a38      	ldr	r2, [pc, #224]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a1 	beq.w	8002960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281e:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d05c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d141      	bne.n	80028b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fb6e 	bl	8001f18 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7ff fb6a 	bl	8001f18 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e087      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	491b      	ldr	r1, [pc, #108]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x478>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7ff fb43 	bl	8001f18 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7ff fb3f 	bl	8001f18 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e05c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x416>
 80028b4:	e054      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <HAL_RCC_OscConfig+0x478>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fb2c 	bl	8001f18 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff fb28 	bl	8001f18 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e045      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x444>
 80028e2:	e03d      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e038      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000
 80028f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_RCC_OscConfig+0x4ec>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d028      	beq.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d121      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d11a      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	4293      	cmp	r3, r2
 8002936:	d111      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	3b01      	subs	r3, #1
 8002946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b68      	ldr	r3, [pc, #416]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90c      	bls.n	80029ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b65      	ldr	r3, [pc, #404]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a58      	ldr	r2, [pc, #352]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a52      	ldr	r2, [pc, #328]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d044      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e067      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4934      	ldr	r1, [pc, #208]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7ff fa5a 	bl	8001f18 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7ff fa56 	bl	8001f18 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d20c      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f9ba 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08007d74 	.word	0x08007d74
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b094      	sub	sp, #80	@ 0x50
 8002b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b54:	4b79      	ldr	r3, [pc, #484]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d00d      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x40>
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	f200 80e1 	bhi.w	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b6e:	e0db      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b73      	ldr	r3, [pc, #460]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b74:	e0db      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b76:	4b73      	ldr	r3, [pc, #460]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7a:	e0d8      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b86:	4b6d      	ldr	r3, [pc, #436]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc0:	0150      	lsls	r0, r2, #5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	1a51      	subs	r1, r2, r1
 8002bca:	6139      	str	r1, [r7, #16]
 8002bcc:	4629      	mov	r1, r5
 8002bce:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be0:	4659      	mov	r1, fp
 8002be2:	018b      	lsls	r3, r1, #6
 8002be4:	4651      	mov	r1, sl
 8002be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bea:	4651      	mov	r1, sl
 8002bec:	018a      	lsls	r2, r1, #6
 8002bee:	4651      	mov	r1, sl
 8002bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	eb18 0303 	adds.w	r3, r8, r3
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	eb49 0303 	adc.w	r3, r9, r3
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c2e:	4629      	mov	r1, r5
 8002c30:	024b      	lsls	r3, r1, #9
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c38:	4621      	mov	r1, r4
 8002c3a:	024a      	lsls	r2, r1, #9
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c4c:	f7fd fff4 	bl	8000c38 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c58:	e058      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	2200      	movs	r2, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	4611      	mov	r1, r2
 8002c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	0159      	lsls	r1, r3, #5
 8002c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c86:	0150      	lsls	r0, r2, #5
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c92:	4649      	mov	r1, r9
 8002c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cac:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	00eb      	lsls	r3, r5, #3
 8002cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc2:	00e2      	lsls	r2, r4, #3
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4643      	mov	r3, r8
 8002cca:	18e3      	adds	r3, r4, r3
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	464b      	mov	r3, r9
 8002cd0:	eb45 0303 	adc.w	r3, r5, r3
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	028b      	lsls	r3, r1, #10
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cec:	4621      	mov	r1, r4
 8002cee:	028a      	lsls	r2, r1, #10
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	61fa      	str	r2, [r7, #28]
 8002cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d00:	f7fd ff9a 	bl	8000c38 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3750      	adds	r7, #80	@ 0x50
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	007a1200 	.word	0x007a1200

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff0 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08007d84 	.word	0x08007d84

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffdc 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	@ (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08007d84 	.word	0x08007d84

08002db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e041      	b.n	8002e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fe0e 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f000 fac0 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e041      	b.n	8002ee4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f839 	bl	8002eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f000 fa71 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_TIM_PWM_Start+0x24>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e022      	b.n	8002f6a <HAL_TIM_PWM_Start+0x6a>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d109      	bne.n	8002f3e <HAL_TIM_PWM_Start+0x3e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	e015      	b.n	8002f6a <HAL_TIM_PWM_Start+0x6a>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d109      	bne.n	8002f58 <HAL_TIM_PWM_Start+0x58>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e008      	b.n	8002f6a <HAL_TIM_PWM_Start+0x6a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e068      	b.n	8003044 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d104      	bne.n	8002f82 <HAL_TIM_PWM_Start+0x82>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f80:	e013      	b.n	8002faa <HAL_TIM_PWM_Start+0xaa>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d104      	bne.n	8002f92 <HAL_TIM_PWM_Start+0x92>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f90:	e00b      	b.n	8002faa <HAL_TIM_PWM_Start+0xaa>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d104      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0xa2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa0:	e003      	b.n	8002faa <HAL_TIM_PWM_Start+0xaa>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	6839      	ldr	r1, [r7, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fc90 	bl	80038d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a23      	ldr	r2, [pc, #140]	@ (800304c <HAL_TIM_PWM_Start+0x14c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d107      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <HAL_TIM_PWM_Start+0x14c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d018      	beq.n	800300e <HAL_TIM_PWM_Start+0x10e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe4:	d013      	beq.n	800300e <HAL_TIM_PWM_Start+0x10e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a19      	ldr	r2, [pc, #100]	@ (8003050 <HAL_TIM_PWM_Start+0x150>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_TIM_PWM_Start+0x10e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a17      	ldr	r2, [pc, #92]	@ (8003054 <HAL_TIM_PWM_Start+0x154>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_TIM_PWM_Start+0x10e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <HAL_TIM_PWM_Start+0x158>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIM_PWM_Start+0x10e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a14      	ldr	r2, [pc, #80]	@ (800305c <HAL_TIM_PWM_Start+0x15c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d111      	bne.n	8003032 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d010      	beq.n	8003042 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	e007      	b.n	8003042 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40010000 	.word	0x40010000
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40000c00 	.word	0x40000c00
 800305c:	40014000 	.word	0x40014000

08003060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800307a:	2302      	movs	r3, #2
 800307c:	e0ae      	b.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	f200 809f 	bhi.w	80031cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800308e:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080031cd 	.word	0x080031cd
 800309c:	080031cd 	.word	0x080031cd
 80030a0:	080031cd 	.word	0x080031cd
 80030a4:	08003109 	.word	0x08003109
 80030a8:	080031cd 	.word	0x080031cd
 80030ac:	080031cd 	.word	0x080031cd
 80030b0:	080031cd 	.word	0x080031cd
 80030b4:	0800314b 	.word	0x0800314b
 80030b8:	080031cd 	.word	0x080031cd
 80030bc:	080031cd 	.word	0x080031cd
 80030c0:	080031cd 	.word	0x080031cd
 80030c4:	0800318b 	.word	0x0800318b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f9dc 	bl	800348c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6999      	ldr	r1, [r3, #24]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	619a      	str	r2, [r3, #24]
      break;
 8003106:	e064      	b.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fa22 	bl	8003558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6999      	ldr	r1, [r3, #24]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	619a      	str	r2, [r3, #24]
      break;
 8003148:	e043      	b.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fa6d 	bl	8003630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0208 	orr.w	r2, r2, #8
 8003164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0204 	bic.w	r2, r2, #4
 8003174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69d9      	ldr	r1, [r3, #28]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	61da      	str	r2, [r3, #28]
      break;
 8003188:	e023      	b.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fab7 	bl	8003704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69d9      	ldr	r1, [r3, #28]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	61da      	str	r2, [r3, #28]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75fb      	strb	r3, [r7, #23]
      break;
 80031d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_TIM_ConfigClockSource+0x1c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0b4      	b.n	800336a <HAL_TIM_ConfigClockSource+0x186>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800321e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003238:	d03e      	beq.n	80032b8 <HAL_TIM_ConfigClockSource+0xd4>
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323e:	f200 8087 	bhi.w	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003246:	f000 8086 	beq.w	8003356 <HAL_TIM_ConfigClockSource+0x172>
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	d87f      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b70      	cmp	r3, #112	@ 0x70
 8003252:	d01a      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xa6>
 8003254:	2b70      	cmp	r3, #112	@ 0x70
 8003256:	d87b      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b60      	cmp	r3, #96	@ 0x60
 800325a:	d050      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x11a>
 800325c:	2b60      	cmp	r3, #96	@ 0x60
 800325e:	d877      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b50      	cmp	r3, #80	@ 0x50
 8003262:	d03c      	beq.n	80032de <HAL_TIM_ConfigClockSource+0xfa>
 8003264:	2b50      	cmp	r3, #80	@ 0x50
 8003266:	d873      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d058      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x13a>
 800326c:	2b40      	cmp	r3, #64	@ 0x40
 800326e:	d86f      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b30      	cmp	r3, #48	@ 0x30
 8003272:	d064      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 8003274:	2b30      	cmp	r3, #48	@ 0x30
 8003276:	d86b      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b20      	cmp	r3, #32
 800327a:	d060      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	2b20      	cmp	r3, #32
 800327e:	d867      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05c      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b10      	cmp	r3, #16
 8003286:	d05a      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	e062      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800329a:	f000 fafd 	bl	8003898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	609a      	str	r2, [r3, #8]
      break;
 80032b6:	e04f      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	f000 fae6 	bl	8003898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032da:	609a      	str	r2, [r3, #8]
      break;
 80032dc:	e03c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 fa5a 	bl	80037a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2150      	movs	r1, #80	@ 0x50
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fab3 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 80032fc:	e02c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800330a:	461a      	mov	r2, r3
 800330c:	f000 fa79 	bl	8003802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2160      	movs	r1, #96	@ 0x60
 8003316:	4618      	mov	r0, r3
 8003318:	f000 faa3 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 800331c:	e01c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	461a      	mov	r2, r3
 800332c:	f000 fa3a 	bl	80037a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	@ 0x40
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa93 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 800333c:	e00c      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f000 fa8a 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 800334e:	e003      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e000      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3a      	ldr	r2, [pc, #232]	@ (8003470 <TIM_Base_SetConfig+0xfc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00f      	beq.n	80033ac <TIM_Base_SetConfig+0x38>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003392:	d00b      	beq.n	80033ac <TIM_Base_SetConfig+0x38>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a37      	ldr	r2, [pc, #220]	@ (8003474 <TIM_Base_SetConfig+0x100>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d007      	beq.n	80033ac <TIM_Base_SetConfig+0x38>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a36      	ldr	r2, [pc, #216]	@ (8003478 <TIM_Base_SetConfig+0x104>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_Base_SetConfig+0x38>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a35      	ldr	r2, [pc, #212]	@ (800347c <TIM_Base_SetConfig+0x108>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d108      	bne.n	80033be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003470 <TIM_Base_SetConfig+0xfc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01b      	beq.n	80033fe <TIM_Base_SetConfig+0x8a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033cc:	d017      	beq.n	80033fe <TIM_Base_SetConfig+0x8a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <TIM_Base_SetConfig+0x100>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <TIM_Base_SetConfig+0x8a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a27      	ldr	r2, [pc, #156]	@ (8003478 <TIM_Base_SetConfig+0x104>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00f      	beq.n	80033fe <TIM_Base_SetConfig+0x8a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a26      	ldr	r2, [pc, #152]	@ (800347c <TIM_Base_SetConfig+0x108>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00b      	beq.n	80033fe <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a25      	ldr	r2, [pc, #148]	@ (8003480 <TIM_Base_SetConfig+0x10c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a24      	ldr	r2, [pc, #144]	@ (8003484 <TIM_Base_SetConfig+0x110>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a23      	ldr	r2, [pc, #140]	@ (8003488 <TIM_Base_SetConfig+0x114>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d108      	bne.n	8003410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a0e      	ldr	r2, [pc, #56]	@ (8003470 <TIM_Base_SetConfig+0xfc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d103      	bne.n	8003444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f023 0201 	bic.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]
  }
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40014000 	.word	0x40014000
 8003484:	40014400 	.word	0x40014400
 8003488:	40014800 	.word	0x40014800

0800348c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 0201 	bic.w	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f023 0302 	bic.w	r3, r3, #2
 80034d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003554 <TIM_OC1_SetConfig+0xc8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10c      	bne.n	8003502 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0308 	bic.w	r3, r3, #8
 80034ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f023 0304 	bic.w	r3, r3, #4
 8003500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <TIM_OC1_SetConfig+0xc8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d111      	bne.n	800352e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40010000 	.word	0x40010000

08003558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 0210 	bic.w	r2, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0320 	bic.w	r3, r3, #32
 80035a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1e      	ldr	r2, [pc, #120]	@ (800362c <TIM_OC2_SetConfig+0xd4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10d      	bne.n	80035d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a15      	ldr	r2, [pc, #84]	@ (800362c <TIM_OC2_SetConfig+0xd4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d113      	bne.n	8003604 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40010000 	.word	0x40010000

08003630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1d      	ldr	r2, [pc, #116]	@ (8003700 <TIM_OC3_SetConfig+0xd0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10d      	bne.n	80036aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <TIM_OC3_SetConfig+0xd0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40010000 	.word	0x40010000

08003704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800374e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a10      	ldr	r2, [pc, #64]	@ (80037a0 <TIM_OC4_SetConfig+0x9c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d109      	bne.n	8003778 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800376a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000

080037a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f023 030a 	bic.w	r3, r3, #10
 80037e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003802:	b480      	push	{r7}
 8003804:	b087      	sub	sp, #28
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 0210 	bic.w	r2, r3, #16
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800382c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	031b      	lsls	r3, r3, #12
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800383e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	f043 0307 	orr.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2201      	movs	r2, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1a      	ldr	r2, [r3, #32]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	401a      	ands	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	431a      	orrs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003938:	2302      	movs	r3, #2
 800393a:	e050      	b.n	80039de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d018      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d013      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10c      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40014000 	.word	0x40014000

08003a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e042      	b.n	8003a98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe f82c 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	@ 0x24
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa61 	bl	8003f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e04a      	b.n	8003b48 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd ffdc 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	@ 0x24
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fa11 	bl	8003f0c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003b08:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0208 	orr.w	r2, r2, #8
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	@ 0x28
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d175      	bne.n	8003c5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_UART_Transmit+0x2c>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e06e      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2221      	movs	r2, #33	@ 0x21
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8e:	f7fe f9c3 	bl	8001f18 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba8:	d108      	bne.n	8003bbc <HAL_UART_Transmit+0x6c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	e003      	b.n	8003bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bc4:	e02e      	b.n	8003c24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2180      	movs	r1, #128	@ 0x80
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f8df 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e03a      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10b      	bne.n	8003c06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	3302      	adds	r3, #2
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	e007      	b.n	8003c16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1cb      	bne.n	8003bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2200      	movs	r2, #0
 8003c36:	2140      	movs	r1, #64	@ 0x40
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8ab 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08a      	sub	sp, #40	@ 0x28
 8003c6a:	af02      	add	r7, sp, #8
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	f040 8081 	bne.w	8003d8a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_UART_Receive+0x2e>
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e079      	b.n	8003d8c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2222      	movs	r2, #34	@ 0x22
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cac:	f7fe f934 	bl	8001f18 <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	88fa      	ldrh	r2, [r7, #6]
 8003cb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc6:	d108      	bne.n	8003cda <HAL_UART_Receive+0x74>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e003      	b.n	8003ce2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ce2:	e047      	b.n	8003d74 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	2120      	movs	r1, #32
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f850 	bl	8003d94 <UART_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e042      	b.n	8003d8c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10c      	bne.n	8003d26 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	3302      	adds	r3, #2
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e01f      	b.n	8003d66 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d2e:	d007      	beq.n	8003d40 <HAL_UART_Receive+0xda>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <HAL_UART_Receive+0xe8>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e008      	b.n	8003d60 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1b2      	bne.n	8003ce4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da4:	e03b      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d037      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fe f8b3 	bl	8001f18 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e03a      	b.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d023      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b80      	cmp	r3, #128	@ 0x80
 8003dda:	d020      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b40      	cmp	r3, #64	@ 0x40
 8003de0:	d01d      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d116      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f81d 	bl	8003e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2208      	movs	r2, #8
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e00f      	b.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d0b4      	beq.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b095      	sub	sp, #84	@ 0x54
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e5      	bne.n	8003e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3314      	adds	r3, #20
 8003e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d119      	bne.n	8003ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f023 0310 	bic.w	r3, r3, #16
 8003ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ede:	61ba      	str	r2, [r7, #24]
 8003ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6979      	ldr	r1, [r7, #20]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	613b      	str	r3, [r7, #16]
   return(result);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f00:	bf00      	nop
 8003f02:	3754      	adds	r7, #84	@ 0x54
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f10:	b0c0      	sub	sp, #256	@ 0x100
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	68d9      	ldr	r1, [r3, #12]
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	ea40 0301 	orr.w	r3, r0, r1
 8003f34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f64:	f021 010c 	bic.w	r1, r1, #12
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f72:	430b      	orrs	r3, r1
 8003f74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f86:	6999      	ldr	r1, [r3, #24]
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	ea40 0301 	orr.w	r3, r0, r1
 8003f92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b8f      	ldr	r3, [pc, #572]	@ (80041d8 <UART_SetConfig+0x2cc>)
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d005      	beq.n	8003fac <UART_SetConfig+0xa0>
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80041dc <UART_SetConfig+0x2d0>)
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d104      	bne.n	8003fb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fac:	f7fe feec 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8003fb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fb4:	e003      	b.n	8003fbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb6:	f7fe fed3 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8003fba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc8:	f040 810c 	bne.w	80041e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fde:	4622      	mov	r2, r4
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	1891      	adds	r1, r2, r2
 8003fe4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fe6:	415b      	adcs	r3, r3
 8003fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fee:	4621      	mov	r1, r4
 8003ff0:	eb12 0801 	adds.w	r8, r2, r1
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	eb43 0901 	adc.w	r9, r3, r1
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800400e:	4690      	mov	r8, r2
 8004010:	4699      	mov	r9, r3
 8004012:	4623      	mov	r3, r4
 8004014:	eb18 0303 	adds.w	r3, r8, r3
 8004018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800401c:	462b      	mov	r3, r5
 800401e:	eb49 0303 	adc.w	r3, r9, r3
 8004022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004032:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004036:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800403a:	460b      	mov	r3, r1
 800403c:	18db      	adds	r3, r3, r3
 800403e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004040:	4613      	mov	r3, r2
 8004042:	eb42 0303 	adc.w	r3, r2, r3
 8004046:	657b      	str	r3, [r7, #84]	@ 0x54
 8004048:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800404c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004050:	f7fc fdf2 	bl	8000c38 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4b61      	ldr	r3, [pc, #388]	@ (80041e0 <UART_SetConfig+0x2d4>)
 800405a:	fba3 2302 	umull	r2, r3, r3, r2
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	011c      	lsls	r4, r3, #4
 8004062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800406c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004074:	4642      	mov	r2, r8
 8004076:	464b      	mov	r3, r9
 8004078:	1891      	adds	r1, r2, r2
 800407a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800407c:	415b      	adcs	r3, r3
 800407e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004084:	4641      	mov	r1, r8
 8004086:	eb12 0a01 	adds.w	sl, r2, r1
 800408a:	4649      	mov	r1, r9
 800408c:	eb43 0b01 	adc.w	fp, r3, r1
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800409c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a4:	4692      	mov	sl, r2
 80040a6:	469b      	mov	fp, r3
 80040a8:	4643      	mov	r3, r8
 80040aa:	eb1a 0303 	adds.w	r3, sl, r3
 80040ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040b2:	464b      	mov	r3, r9
 80040b4:	eb4b 0303 	adc.w	r3, fp, r3
 80040b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040d0:	460b      	mov	r3, r1
 80040d2:	18db      	adds	r3, r3, r3
 80040d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040d6:	4613      	mov	r3, r2
 80040d8:	eb42 0303 	adc.w	r3, r2, r3
 80040dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80040de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040e6:	f7fc fda7 	bl	8000c38 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <UART_SetConfig+0x2d4>)
 80040f2:	fba3 2301 	umull	r2, r3, r3, r1
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2264      	movs	r2, #100	@ 0x64
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	1acb      	subs	r3, r1, r3
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004106:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <UART_SetConfig+0x2d4>)
 8004108:	fba3 2302 	umull	r2, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004114:	441c      	add	r4, r3
 8004116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004120:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004124:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	1891      	adds	r1, r2, r2
 800412e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004130:	415b      	adcs	r3, r3
 8004132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004138:	4641      	mov	r1, r8
 800413a:	1851      	adds	r1, r2, r1
 800413c:	6339      	str	r1, [r7, #48]	@ 0x30
 800413e:	4649      	mov	r1, r9
 8004140:	414b      	adcs	r3, r1
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004150:	4659      	mov	r1, fp
 8004152:	00cb      	lsls	r3, r1, #3
 8004154:	4651      	mov	r1, sl
 8004156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415a:	4651      	mov	r1, sl
 800415c:	00ca      	lsls	r2, r1, #3
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	4603      	mov	r3, r0
 8004164:	4642      	mov	r2, r8
 8004166:	189b      	adds	r3, r3, r2
 8004168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800416c:	464b      	mov	r3, r9
 800416e:	460a      	mov	r2, r1
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004184:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004188:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800418c:	460b      	mov	r3, r1
 800418e:	18db      	adds	r3, r3, r3
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004192:	4613      	mov	r3, r2
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800419a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800419e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041a2:	f7fc fd49 	bl	8000c38 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <UART_SetConfig+0x2d4>)
 80041ac:	fba3 1302 	umull	r1, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	2164      	movs	r1, #100	@ 0x64
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	3332      	adds	r3, #50	@ 0x32
 80041be:	4a08      	ldr	r2, [pc, #32]	@ (80041e0 <UART_SetConfig+0x2d4>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	f003 0207 	and.w	r2, r3, #7
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4422      	add	r2, r4
 80041d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041d4:	e106      	b.n	80043e4 <UART_SetConfig+0x4d8>
 80041d6:	bf00      	nop
 80041d8:	40011000 	.word	0x40011000
 80041dc:	40011400 	.word	0x40011400
 80041e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041f6:	4642      	mov	r2, r8
 80041f8:	464b      	mov	r3, r9
 80041fa:	1891      	adds	r1, r2, r2
 80041fc:	6239      	str	r1, [r7, #32]
 80041fe:	415b      	adcs	r3, r3
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
 8004202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004206:	4641      	mov	r1, r8
 8004208:	1854      	adds	r4, r2, r1
 800420a:	4649      	mov	r1, r9
 800420c:	eb43 0501 	adc.w	r5, r3, r1
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	00eb      	lsls	r3, r5, #3
 800421a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800421e:	00e2      	lsls	r2, r4, #3
 8004220:	4614      	mov	r4, r2
 8004222:	461d      	mov	r5, r3
 8004224:	4643      	mov	r3, r8
 8004226:	18e3      	adds	r3, r4, r3
 8004228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800422c:	464b      	mov	r3, r9
 800422e:	eb45 0303 	adc.w	r3, r5, r3
 8004232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004242:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004252:	4629      	mov	r1, r5
 8004254:	008b      	lsls	r3, r1, #2
 8004256:	4621      	mov	r1, r4
 8004258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800425c:	4621      	mov	r1, r4
 800425e:	008a      	lsls	r2, r1, #2
 8004260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004264:	f7fc fce8 	bl	8000c38 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4b60      	ldr	r3, [pc, #384]	@ (80043f0 <UART_SetConfig+0x4e4>)
 800426e:	fba3 2302 	umull	r2, r3, r3, r2
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	011c      	lsls	r4, r3, #4
 8004276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800427a:	2200      	movs	r2, #0
 800427c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004280:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004284:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	1891      	adds	r1, r2, r2
 800428e:	61b9      	str	r1, [r7, #24]
 8004290:	415b      	adcs	r3, r3
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004298:	4641      	mov	r1, r8
 800429a:	1851      	adds	r1, r2, r1
 800429c:	6139      	str	r1, [r7, #16]
 800429e:	4649      	mov	r1, r9
 80042a0:	414b      	adcs	r3, r1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b0:	4659      	mov	r1, fp
 80042b2:	00cb      	lsls	r3, r1, #3
 80042b4:	4651      	mov	r1, sl
 80042b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ba:	4651      	mov	r1, sl
 80042bc:	00ca      	lsls	r2, r1, #3
 80042be:	4610      	mov	r0, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	4603      	mov	r3, r0
 80042c4:	4642      	mov	r2, r8
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042cc:	464b      	mov	r3, r9
 80042ce:	460a      	mov	r2, r1
 80042d0:	eb42 0303 	adc.w	r3, r2, r3
 80042d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042f0:	4649      	mov	r1, r9
 80042f2:	008b      	lsls	r3, r1, #2
 80042f4:	4641      	mov	r1, r8
 80042f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042fa:	4641      	mov	r1, r8
 80042fc:	008a      	lsls	r2, r1, #2
 80042fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004302:	f7fc fc99 	bl	8000c38 <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4611      	mov	r1, r2
 800430c:	4b38      	ldr	r3, [pc, #224]	@ (80043f0 <UART_SetConfig+0x4e4>)
 800430e:	fba3 2301 	umull	r2, r3, r3, r1
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2264      	movs	r2, #100	@ 0x64
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	1acb      	subs	r3, r1, r3
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	3332      	adds	r3, #50	@ 0x32
 8004320:	4a33      	ldr	r2, [pc, #204]	@ (80043f0 <UART_SetConfig+0x4e4>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800432c:	441c      	add	r4, r3
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	673b      	str	r3, [r7, #112]	@ 0x70
 8004336:	677a      	str	r2, [r7, #116]	@ 0x74
 8004338:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	1891      	adds	r1, r2, r2
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	415b      	adcs	r3, r3
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800434c:	4641      	mov	r1, r8
 800434e:	1851      	adds	r1, r2, r1
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	4649      	mov	r1, r9
 8004354:	414b      	adcs	r3, r1
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004364:	4659      	mov	r1, fp
 8004366:	00cb      	lsls	r3, r1, #3
 8004368:	4651      	mov	r1, sl
 800436a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800436e:	4651      	mov	r1, sl
 8004370:	00ca      	lsls	r2, r1, #3
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	4603      	mov	r3, r0
 8004378:	4642      	mov	r2, r8
 800437a:	189b      	adds	r3, r3, r2
 800437c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437e:	464b      	mov	r3, r9
 8004380:	460a      	mov	r2, r1
 8004382:	eb42 0303 	adc.w	r3, r2, r3
 8004386:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	663b      	str	r3, [r7, #96]	@ 0x60
 8004392:	667a      	str	r2, [r7, #100]	@ 0x64
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043a0:	4649      	mov	r1, r9
 80043a2:	008b      	lsls	r3, r1, #2
 80043a4:	4641      	mov	r1, r8
 80043a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043aa:	4641      	mov	r1, r8
 80043ac:	008a      	lsls	r2, r1, #2
 80043ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043b2:	f7fc fc41 	bl	8000c38 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4b0d      	ldr	r3, [pc, #52]	@ (80043f0 <UART_SetConfig+0x4e4>)
 80043bc:	fba3 1302 	umull	r1, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	2164      	movs	r1, #100	@ 0x64
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	3332      	adds	r3, #50	@ 0x32
 80043ce:	4a08      	ldr	r2, [pc, #32]	@ (80043f0 <UART_SetConfig+0x4e4>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4422      	add	r2, r4
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f0:	51eb851f 	.word	0x51eb851f

080043f4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80043f8:	4b14      	ldr	r3, [pc, #80]	@ (800444c <DWT_Delay_Init+0x58>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a13      	ldr	r2, [pc, #76]	@ (800444c <DWT_Delay_Init+0x58>)
 80043fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004402:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8004404:	4b11      	ldr	r3, [pc, #68]	@ (800444c <DWT_Delay_Init+0x58>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a10      	ldr	r2, [pc, #64]	@ (800444c <DWT_Delay_Init+0x58>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8004410:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <DWT_Delay_Init+0x5c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0e      	ldr	r2, [pc, #56]	@ (8004450 <DWT_Delay_Init+0x5c>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <DWT_Delay_Init+0x5c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0b      	ldr	r2, [pc, #44]	@ (8004450 <DWT_Delay_Init+0x5c>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <DWT_Delay_Init+0x5c>)
 800442a:	2200      	movs	r2, #0
 800442c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800442e:	bf00      	nop
    __ASM volatile ("NOP");
 8004430:	bf00      	nop
    __ASM volatile ("NOP");
 8004432:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8004434:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <DWT_Delay_Init+0x5c>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8004440:	2301      	movs	r3, #1
    }
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000edf0 	.word	0xe000edf0
 8004450:	e0001000 	.word	0xe0001000

08004454 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 8004454:	b5b0      	push	{r4, r5, r7, lr}
 8004456:	b0b2      	sub	sp, #200	@ 0xc8
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800446e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800447c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8004486:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	609a      	str	r2, [r3, #8]
 8004492:	60da      	str	r2, [r3, #12]
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	615a      	str	r2, [r3, #20]
 8004498:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    uint32_t ARR_Value = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    DWT_Delay_Init();
 80044a6:	f7ff ffa5 	bl	80043f4 <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	4a8e      	ldr	r2, [pc, #568]	@ (80046e8 <SERVO_Init+0x294>)
 80044ae:	015b      	lsls	r3, r3, #5
 80044b0:	4413      	add	r3, r2
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a8d      	ldr	r2, [pc, #564]	@ (80046ec <SERVO_Init+0x298>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d10e      	bne.n	80044d8 <SERVO_Init+0x84>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044be:	4b8c      	ldr	r3, [pc, #560]	@ (80046f0 <SERVO_Init+0x29c>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4a8b      	ldr	r2, [pc, #556]	@ (80046f0 <SERVO_Init+0x29c>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ca:	4b89      	ldr	r3, [pc, #548]	@ (80046f0 <SERVO_Init+0x29c>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	e05a      	b.n	800458e <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	4a83      	ldr	r2, [pc, #524]	@ (80046e8 <SERVO_Init+0x294>)
 80044dc:	015b      	lsls	r3, r3, #5
 80044de:	4413      	add	r3, r2
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a84      	ldr	r2, [pc, #528]	@ (80046f4 <SERVO_Init+0x2a0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10e      	bne.n	8004506 <SERVO_Init+0xb2>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80044e8:	2300      	movs	r3, #0
 80044ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ec:	4b80      	ldr	r3, [pc, #512]	@ (80046f0 <SERVO_Init+0x29c>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	4a7f      	ldr	r2, [pc, #508]	@ (80046f0 <SERVO_Init+0x29c>)
 80044f2:	f043 0302 	orr.w	r3, r3, #2
 80044f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80044f8:	4b7d      	ldr	r3, [pc, #500]	@ (80046f0 <SERVO_Init+0x29c>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004504:	e043      	b.n	800458e <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	4a77      	ldr	r2, [pc, #476]	@ (80046e8 <SERVO_Init+0x294>)
 800450a:	015b      	lsls	r3, r3, #5
 800450c:	4413      	add	r3, r2
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a79      	ldr	r2, [pc, #484]	@ (80046f8 <SERVO_Init+0x2a4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10e      	bne.n	8004534 <SERVO_Init+0xe0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
 800451a:	4b75      	ldr	r3, [pc, #468]	@ (80046f0 <SERVO_Init+0x29c>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	4a74      	ldr	r2, [pc, #464]	@ (80046f0 <SERVO_Init+0x29c>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6313      	str	r3, [r2, #48]	@ 0x30
 8004526:	4b72      	ldr	r3, [pc, #456]	@ (80046f0 <SERVO_Init+0x29c>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	e02c      	b.n	800458e <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	4a6c      	ldr	r2, [pc, #432]	@ (80046e8 <SERVO_Init+0x294>)
 8004538:	015b      	lsls	r3, r3, #5
 800453a:	4413      	add	r3, r2
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6f      	ldr	r2, [pc, #444]	@ (80046fc <SERVO_Init+0x2a8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10e      	bne.n	8004562 <SERVO_Init+0x10e>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
 8004548:	4b69      	ldr	r3, [pc, #420]	@ (80046f0 <SERVO_Init+0x29c>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	4a68      	ldr	r2, [pc, #416]	@ (80046f0 <SERVO_Init+0x29c>)
 800454e:	f043 0308 	orr.w	r3, r3, #8
 8004552:	6313      	str	r3, [r2, #48]	@ 0x30
 8004554:	4b66      	ldr	r3, [pc, #408]	@ (80046f0 <SERVO_Init+0x29c>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	623b      	str	r3, [r7, #32]
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	e015      	b.n	800458e <SERVO_Init+0x13a>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	4a60      	ldr	r2, [pc, #384]	@ (80046e8 <SERVO_Init+0x294>)
 8004566:	015b      	lsls	r3, r3, #5
 8004568:	4413      	add	r3, r2
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a64      	ldr	r2, [pc, #400]	@ (8004700 <SERVO_Init+0x2ac>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10d      	bne.n	800458e <SERVO_Init+0x13a>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	4b5e      	ldr	r3, [pc, #376]	@ (80046f0 <SERVO_Init+0x29c>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	4a5d      	ldr	r2, [pc, #372]	@ (80046f0 <SERVO_Init+0x29c>)
 800457c:	f043 0310 	orr.w	r3, r3, #16
 8004580:	6313      	str	r3, [r2, #48]	@ 0x30
 8004582:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <SERVO_Init+0x29c>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	69fb      	ldr	r3, [r7, #28]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	4a55      	ldr	r2, [pc, #340]	@ (80046e8 <SERVO_Init+0x294>)
 8004592:	015b      	lsls	r3, r3, #5
 8004594:	4413      	add	r3, r2
 8004596:	3304      	adds	r3, #4
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	2302      	movs	r3, #2
 80045a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	4a4e      	ldr	r2, [pc, #312]	@ (80046e8 <SERVO_Init+0x294>)
 80045ae:	015b      	lsls	r3, r3, #5
 80045b0:	4413      	add	r3, r2
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fdc2 	bl	8002144 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4a49      	ldr	r2, [pc, #292]	@ (80046e8 <SERVO_Init+0x294>)
 80045c4:	015b      	lsls	r3, r3, #5
 80045c6:	4413      	add	r3, r2
 80045c8:	3314      	adds	r3, #20
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fb ff99 	bl	8000504 <__aeabi_ui2d>
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004704 <SERVO_Init+0x2b0>)
 80045d8:	f7fc f938 	bl	800084c <__aeabi_ddiv>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	f7fc fab8 	bl	8000b58 <__aeabi_d2uiz>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	4a3d      	ldr	r2, [pc, #244]	@ (80046e8 <SERVO_Init+0x294>)
 80045f2:	015b      	lsls	r3, r3, #5
 80045f4:	4413      	add	r3, r2
 80045f6:	3314      	adds	r3, #20
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb ff82 	bl	8000504 <__aeabi_ui2d>
 8004600:	4604      	mov	r4, r0
 8004602:	460d      	mov	r5, r1
 8004604:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8004608:	f7fb ff7c 	bl	8000504 <__aeabi_ui2d>
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	4b3d      	ldr	r3, [pc, #244]	@ (8004708 <SERVO_Init+0x2b4>)
 8004612:	f7fb fe3b 	bl	800028c <__adddf3>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	4b3a      	ldr	r3, [pc, #232]	@ (800470c <SERVO_Init+0x2b8>)
 8004624:	f7fb ffe8 	bl	80005f8 <__aeabi_dmul>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4620      	mov	r0, r4
 800462e:	4629      	mov	r1, r5
 8004630:	f7fc f90c 	bl	800084c <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <SERVO_Init+0x2b4>)
 8004642:	f7fb fe21 	bl	8000288 <__aeabi_dsub>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	f7fc fa83 	bl	8000b58 <__aeabi_d2uiz>
 8004652:	4603      	mov	r3, r0
 8004654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	4a23      	ldr	r2, [pc, #140]	@ (80046e8 <SERVO_Init+0x294>)
 800465c:	015b      	lsls	r3, r3, #5
 800465e:	4413      	add	r3, r2
 8004660:	3308      	adds	r3, #8
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2a      	ldr	r2, [pc, #168]	@ (8004710 <SERVO_Init+0x2bc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10e      	bne.n	8004688 <SERVO_Init+0x234>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	4b20      	ldr	r3, [pc, #128]	@ (80046f0 <SERVO_Init+0x29c>)
 8004670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004672:	4a1f      	ldr	r2, [pc, #124]	@ (80046f0 <SERVO_Init+0x29c>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6453      	str	r3, [r2, #68]	@ 0x44
 800467a:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <SERVO_Init+0x29c>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	e05e      	b.n	8004746 <SERVO_Init+0x2f2>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	4a17      	ldr	r2, [pc, #92]	@ (80046e8 <SERVO_Init+0x294>)
 800468c:	015b      	lsls	r3, r3, #5
 800468e:	4413      	add	r3, r2
 8004690:	3308      	adds	r3, #8
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004698:	d10e      	bne.n	80046b8 <SERVO_Init+0x264>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <SERVO_Init+0x29c>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <SERVO_Init+0x29c>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046aa:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <SERVO_Init+0x29c>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e046      	b.n	8004746 <SERVO_Init+0x2f2>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	4a0b      	ldr	r2, [pc, #44]	@ (80046e8 <SERVO_Init+0x294>)
 80046bc:	015b      	lsls	r3, r3, #5
 80046be:	4413      	add	r3, r2
 80046c0:	3308      	adds	r3, #8
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a13      	ldr	r2, [pc, #76]	@ (8004714 <SERVO_Init+0x2c0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d126      	bne.n	8004718 <SERVO_Init+0x2c4>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <SERVO_Init+0x29c>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <SERVO_Init+0x29c>)
 80046d4:	f043 0302 	orr.w	r3, r3, #2
 80046d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046da:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <SERVO_Init+0x29c>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	e02e      	b.n	8004746 <SERVO_Init+0x2f2>
 80046e8:	08007d8c 	.word	0x08007d8c
 80046ec:	40020000 	.word	0x40020000
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40020400 	.word	0x40020400
 80046f8:	40020800 	.word	0x40020800
 80046fc:	40020c00 	.word	0x40020c00
 8004700:	40021000 	.word	0x40021000
 8004704:	41490000 	.word	0x41490000
 8004708:	3ff00000 	.word	0x3ff00000
 800470c:	40490000 	.word	0x40490000
 8004710:	40010000 	.word	0x40010000
 8004714:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	4a61      	ldr	r2, [pc, #388]	@ (80048a0 <SERVO_Init+0x44c>)
 800471c:	015b      	lsls	r3, r3, #5
 800471e:	4413      	add	r3, r2
 8004720:	3308      	adds	r3, #8
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5f      	ldr	r2, [pc, #380]	@ (80048a4 <SERVO_Init+0x450>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10d      	bne.n	8004746 <SERVO_Init+0x2f2>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	4b5e      	ldr	r3, [pc, #376]	@ (80048a8 <SERVO_Init+0x454>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a5d      	ldr	r2, [pc, #372]	@ (80048a8 <SERVO_Init+0x454>)
 8004734:	f043 0304 	orr.w	r3, r3, #4
 8004738:	6413      	str	r3, [r2, #64]	@ 0x40
 800473a:	4b5b      	ldr	r3, [pc, #364]	@ (80048a8 <SERVO_Init+0x454>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	4a55      	ldr	r2, [pc, #340]	@ (80048a0 <SERVO_Init+0x44c>)
 800474a:	015b      	lsls	r3, r3, #5
 800474c:	4413      	add	r3, r2
 800474e:	3308      	adds	r3, #8
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	633b      	str	r3, [r7, #48]	@ 0x30
	htim.Init.Prescaler = PSC_Value;
 8004754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800475a:	2300      	movs	r3, #0
 800475c:	63bb      	str	r3, [r7, #56]	@ 0x38
	htim.Init.Period = ARR_Value;
 800475e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004762:	63fb      	str	r3, [r7, #60]	@ 0x3c
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004764:	2300      	movs	r3, #0
 8004766:	643b      	str	r3, [r7, #64]	@ 0x40
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004768:	2380      	movs	r3, #128	@ 0x80
 800476a:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_TIM_Base_Init(&htim);
 800476c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fb1d 	bl	8002db0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800477a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800477e:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8004782:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fd2b 	bl	80031e4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 800478e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fb5b 	bl	8002e4e <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479e:	2300      	movs	r3, #0
 80047a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80047a4:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80047a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f8b8 	bl	8003924 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047b4:	2360      	movs	r3, #96	@ 0x60
 80047b6:	67bb      	str	r3, [r7, #120]	@ 0x78
	sConfigOC.Pulse = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	4a35      	ldr	r2, [pc, #212]	@ (80048a0 <SERVO_Init+0x44c>)
 80047cc:	015b      	lsls	r3, r3, #5
 80047ce:	4413      	add	r3, r2
 80047d0:	3310      	adds	r3, #16
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80047d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fc3f 	bl	8003060 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 80047e2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80047e6:	f7fb fe8d 	bl	8000504 <__aeabi_ui2d>
 80047ea:	4604      	mov	r4, r0
 80047ec:	460d      	mov	r5, r1
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <SERVO_Init+0x44c>)
 80047f2:	015b      	lsls	r3, r3, #5
 80047f4:	4413      	add	r3, r2
 80047f6:	3318      	adds	r3, #24
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fea4 	bl	8000548 <__aeabi_f2d>
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	4b29      	ldr	r3, [pc, #164]	@ (80048ac <SERVO_Init+0x458>)
 8004806:	f7fc f821 	bl	800084c <__aeabi_ddiv>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	f7fb fef1 	bl	80005f8 <__aeabi_dmul>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	88fc      	ldrh	r4, [r7, #6]
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	f7fc f99a 	bl	8000b58 <__aeabi_d2uiz>
 8004824:	4603      	mov	r3, r0
 8004826:	b29a      	uxth	r2, r3
 8004828:	4b21      	ldr	r3, [pc, #132]	@ (80048b0 <SERVO_Init+0x45c>)
 800482a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 800482e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8004832:	f7fb fe67 	bl	8000504 <__aeabi_ui2d>
 8004836:	4604      	mov	r4, r0
 8004838:	460d      	mov	r5, r1
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	4a18      	ldr	r2, [pc, #96]	@ (80048a0 <SERVO_Init+0x44c>)
 800483e:	015b      	lsls	r3, r3, #5
 8004840:	4413      	add	r3, r2
 8004842:	331c      	adds	r3, #28
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb fe7e 	bl	8000548 <__aeabi_f2d>
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	4b16      	ldr	r3, [pc, #88]	@ (80048ac <SERVO_Init+0x458>)
 8004852:	f7fb fffb 	bl	800084c <__aeabi_ddiv>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	f7fb fecb 	bl	80005f8 <__aeabi_dmul>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	88fc      	ldrh	r4, [r7, #6]
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f7fc f974 	bl	8000b58 <__aeabi_d2uiz>
 8004870:	4603      	mov	r3, r0
 8004872:	b299      	uxth	r1, r3
 8004874:	4a0e      	ldr	r2, [pc, #56]	@ (80048b0 <SERVO_Init+0x45c>)
 8004876:	00a3      	lsls	r3, r4, #2
 8004878:	4413      	add	r3, r2
 800487a:	460a      	mov	r2, r1
 800487c:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	4a07      	ldr	r2, [pc, #28]	@ (80048a0 <SERVO_Init+0x44c>)
 8004882:	015b      	lsls	r3, r3, #5
 8004884:	4413      	add	r3, r2
 8004886:	3310      	adds	r3, #16
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fb35 	bl	8002f00 <HAL_TIM_PWM_Start>
}
 8004896:	bf00      	nop
 8004898:	37c8      	adds	r7, #200	@ 0xc8
 800489a:	46bd      	mov	sp, r7
 800489c:	bdb0      	pop	{r4, r5, r7, pc}
 800489e:	bf00      	nop
 80048a0:	08007d8c 	.word	0x08007d8c
 80048a4:	40000800 	.word	0x40000800
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40340000 	.word	0x40340000
 80048b0:	20000318 	.word	0x20000318

080048b4 <_scanf_float>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	b087      	sub	sp, #28
 80048ba:	4617      	mov	r7, r2
 80048bc:	9303      	str	r3, [sp, #12]
 80048be:	688b      	ldr	r3, [r1, #8]
 80048c0:	1e5a      	subs	r2, r3, #1
 80048c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80048c6:	bf81      	itttt	hi
 80048c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80048cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80048d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80048d4:	608b      	strhi	r3, [r1, #8]
 80048d6:	680b      	ldr	r3, [r1, #0]
 80048d8:	460a      	mov	r2, r1
 80048da:	f04f 0500 	mov.w	r5, #0
 80048de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80048e2:	f842 3b1c 	str.w	r3, [r2], #28
 80048e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80048ea:	4680      	mov	r8, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	bf98      	it	ls
 80048f0:	f04f 0b00 	movls.w	fp, #0
 80048f4:	9201      	str	r2, [sp, #4]
 80048f6:	4616      	mov	r6, r2
 80048f8:	46aa      	mov	sl, r5
 80048fa:	46a9      	mov	r9, r5
 80048fc:	9502      	str	r5, [sp, #8]
 80048fe:	68a2      	ldr	r2, [r4, #8]
 8004900:	b152      	cbz	r2, 8004918 <_scanf_float+0x64>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b4e      	cmp	r3, #78	@ 0x4e
 8004908:	d864      	bhi.n	80049d4 <_scanf_float+0x120>
 800490a:	2b40      	cmp	r3, #64	@ 0x40
 800490c:	d83c      	bhi.n	8004988 <_scanf_float+0xd4>
 800490e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004912:	b2c8      	uxtb	r0, r1
 8004914:	280e      	cmp	r0, #14
 8004916:	d93a      	bls.n	800498e <_scanf_float+0xda>
 8004918:	f1b9 0f00 	cmp.w	r9, #0
 800491c:	d003      	beq.n	8004926 <_scanf_float+0x72>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800492a:	f1ba 0f01 	cmp.w	sl, #1
 800492e:	f200 8117 	bhi.w	8004b60 <_scanf_float+0x2ac>
 8004932:	9b01      	ldr	r3, [sp, #4]
 8004934:	429e      	cmp	r6, r3
 8004936:	f200 8108 	bhi.w	8004b4a <_scanf_float+0x296>
 800493a:	2001      	movs	r0, #1
 800493c:	b007      	add	sp, #28
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004946:	2a0d      	cmp	r2, #13
 8004948:	d8e6      	bhi.n	8004918 <_scanf_float+0x64>
 800494a:	a101      	add	r1, pc, #4	@ (adr r1, 8004950 <_scanf_float+0x9c>)
 800494c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004950:	08004a97 	.word	0x08004a97
 8004954:	08004919 	.word	0x08004919
 8004958:	08004919 	.word	0x08004919
 800495c:	08004919 	.word	0x08004919
 8004960:	08004af7 	.word	0x08004af7
 8004964:	08004acf 	.word	0x08004acf
 8004968:	08004919 	.word	0x08004919
 800496c:	08004919 	.word	0x08004919
 8004970:	08004aa5 	.word	0x08004aa5
 8004974:	08004919 	.word	0x08004919
 8004978:	08004919 	.word	0x08004919
 800497c:	08004919 	.word	0x08004919
 8004980:	08004919 	.word	0x08004919
 8004984:	08004a5d 	.word	0x08004a5d
 8004988:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800498c:	e7db      	b.n	8004946 <_scanf_float+0x92>
 800498e:	290e      	cmp	r1, #14
 8004990:	d8c2      	bhi.n	8004918 <_scanf_float+0x64>
 8004992:	a001      	add	r0, pc, #4	@ (adr r0, 8004998 <_scanf_float+0xe4>)
 8004994:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004998:	08004a4d 	.word	0x08004a4d
 800499c:	08004919 	.word	0x08004919
 80049a0:	08004a4d 	.word	0x08004a4d
 80049a4:	08004ae3 	.word	0x08004ae3
 80049a8:	08004919 	.word	0x08004919
 80049ac:	080049f5 	.word	0x080049f5
 80049b0:	08004a33 	.word	0x08004a33
 80049b4:	08004a33 	.word	0x08004a33
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a33 	.word	0x08004a33
 80049c0:	08004a33 	.word	0x08004a33
 80049c4:	08004a33 	.word	0x08004a33
 80049c8:	08004a33 	.word	0x08004a33
 80049cc:	08004a33 	.word	0x08004a33
 80049d0:	08004a33 	.word	0x08004a33
 80049d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80049d6:	d809      	bhi.n	80049ec <_scanf_float+0x138>
 80049d8:	2b60      	cmp	r3, #96	@ 0x60
 80049da:	d8b2      	bhi.n	8004942 <_scanf_float+0x8e>
 80049dc:	2b54      	cmp	r3, #84	@ 0x54
 80049de:	d07b      	beq.n	8004ad8 <_scanf_float+0x224>
 80049e0:	2b59      	cmp	r3, #89	@ 0x59
 80049e2:	d199      	bne.n	8004918 <_scanf_float+0x64>
 80049e4:	2d07      	cmp	r5, #7
 80049e6:	d197      	bne.n	8004918 <_scanf_float+0x64>
 80049e8:	2508      	movs	r5, #8
 80049ea:	e02c      	b.n	8004a46 <_scanf_float+0x192>
 80049ec:	2b74      	cmp	r3, #116	@ 0x74
 80049ee:	d073      	beq.n	8004ad8 <_scanf_float+0x224>
 80049f0:	2b79      	cmp	r3, #121	@ 0x79
 80049f2:	e7f6      	b.n	80049e2 <_scanf_float+0x12e>
 80049f4:	6821      	ldr	r1, [r4, #0]
 80049f6:	05c8      	lsls	r0, r1, #23
 80049f8:	d51b      	bpl.n	8004a32 <_scanf_float+0x17e>
 80049fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80049fe:	6021      	str	r1, [r4, #0]
 8004a00:	f109 0901 	add.w	r9, r9, #1
 8004a04:	f1bb 0f00 	cmp.w	fp, #0
 8004a08:	d003      	beq.n	8004a12 <_scanf_float+0x15e>
 8004a0a:	3201      	adds	r2, #1
 8004a0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a10:	60a2      	str	r2, [r4, #8]
 8004a12:	68a3      	ldr	r3, [r4, #8]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	6123      	str	r3, [r4, #16]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	f340 8087 	ble.w	8004b38 <_scanf_float+0x284>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	e765      	b.n	80048fe <_scanf_float+0x4a>
 8004a32:	eb1a 0105 	adds.w	r1, sl, r5
 8004a36:	f47f af6f 	bne.w	8004918 <_scanf_float+0x64>
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004a40:	6022      	str	r2, [r4, #0]
 8004a42:	460d      	mov	r5, r1
 8004a44:	468a      	mov	sl, r1
 8004a46:	f806 3b01 	strb.w	r3, [r6], #1
 8004a4a:	e7e2      	b.n	8004a12 <_scanf_float+0x15e>
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	0610      	lsls	r0, r2, #24
 8004a50:	f57f af62 	bpl.w	8004918 <_scanf_float+0x64>
 8004a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a58:	6022      	str	r2, [r4, #0]
 8004a5a:	e7f4      	b.n	8004a46 <_scanf_float+0x192>
 8004a5c:	f1ba 0f00 	cmp.w	sl, #0
 8004a60:	d10e      	bne.n	8004a80 <_scanf_float+0x1cc>
 8004a62:	f1b9 0f00 	cmp.w	r9, #0
 8004a66:	d10e      	bne.n	8004a86 <_scanf_float+0x1d2>
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004a6e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004a72:	d108      	bne.n	8004a86 <_scanf_float+0x1d2>
 8004a74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a78:	6022      	str	r2, [r4, #0]
 8004a7a:	f04f 0a01 	mov.w	sl, #1
 8004a7e:	e7e2      	b.n	8004a46 <_scanf_float+0x192>
 8004a80:	f1ba 0f02 	cmp.w	sl, #2
 8004a84:	d055      	beq.n	8004b32 <_scanf_float+0x27e>
 8004a86:	2d01      	cmp	r5, #1
 8004a88:	d002      	beq.n	8004a90 <_scanf_float+0x1dc>
 8004a8a:	2d04      	cmp	r5, #4
 8004a8c:	f47f af44 	bne.w	8004918 <_scanf_float+0x64>
 8004a90:	3501      	adds	r5, #1
 8004a92:	b2ed      	uxtb	r5, r5
 8004a94:	e7d7      	b.n	8004a46 <_scanf_float+0x192>
 8004a96:	f1ba 0f01 	cmp.w	sl, #1
 8004a9a:	f47f af3d 	bne.w	8004918 <_scanf_float+0x64>
 8004a9e:	f04f 0a02 	mov.w	sl, #2
 8004aa2:	e7d0      	b.n	8004a46 <_scanf_float+0x192>
 8004aa4:	b97d      	cbnz	r5, 8004ac6 <_scanf_float+0x212>
 8004aa6:	f1b9 0f00 	cmp.w	r9, #0
 8004aaa:	f47f af38 	bne.w	800491e <_scanf_float+0x6a>
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004ab4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004ab8:	f040 8108 	bne.w	8004ccc <_scanf_float+0x418>
 8004abc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	2501      	movs	r5, #1
 8004ac4:	e7bf      	b.n	8004a46 <_scanf_float+0x192>
 8004ac6:	2d03      	cmp	r5, #3
 8004ac8:	d0e2      	beq.n	8004a90 <_scanf_float+0x1dc>
 8004aca:	2d05      	cmp	r5, #5
 8004acc:	e7de      	b.n	8004a8c <_scanf_float+0x1d8>
 8004ace:	2d02      	cmp	r5, #2
 8004ad0:	f47f af22 	bne.w	8004918 <_scanf_float+0x64>
 8004ad4:	2503      	movs	r5, #3
 8004ad6:	e7b6      	b.n	8004a46 <_scanf_float+0x192>
 8004ad8:	2d06      	cmp	r5, #6
 8004ada:	f47f af1d 	bne.w	8004918 <_scanf_float+0x64>
 8004ade:	2507      	movs	r5, #7
 8004ae0:	e7b1      	b.n	8004a46 <_scanf_float+0x192>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	0591      	lsls	r1, r2, #22
 8004ae6:	f57f af17 	bpl.w	8004918 <_scanf_float+0x64>
 8004aea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004aee:	6022      	str	r2, [r4, #0]
 8004af0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004af4:	e7a7      	b.n	8004a46 <_scanf_float+0x192>
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004afc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b00:	d006      	beq.n	8004b10 <_scanf_float+0x25c>
 8004b02:	0550      	lsls	r0, r2, #21
 8004b04:	f57f af08 	bpl.w	8004918 <_scanf_float+0x64>
 8004b08:	f1b9 0f00 	cmp.w	r9, #0
 8004b0c:	f000 80de 	beq.w	8004ccc <_scanf_float+0x418>
 8004b10:	0591      	lsls	r1, r2, #22
 8004b12:	bf58      	it	pl
 8004b14:	9902      	ldrpl	r1, [sp, #8]
 8004b16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b1a:	bf58      	it	pl
 8004b1c:	eba9 0101 	subpl.w	r1, r9, r1
 8004b20:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004b24:	bf58      	it	pl
 8004b26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b2a:	6022      	str	r2, [r4, #0]
 8004b2c:	f04f 0900 	mov.w	r9, #0
 8004b30:	e789      	b.n	8004a46 <_scanf_float+0x192>
 8004b32:	f04f 0a03 	mov.w	sl, #3
 8004b36:	e786      	b.n	8004a46 <_scanf_float+0x192>
 8004b38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4798      	blx	r3
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f43f aedb 	beq.w	80048fe <_scanf_float+0x4a>
 8004b48:	e6e6      	b.n	8004918 <_scanf_float+0x64>
 8004b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b52:	463a      	mov	r2, r7
 8004b54:	4640      	mov	r0, r8
 8004b56:	4798      	blx	r3
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	e6e8      	b.n	8004932 <_scanf_float+0x7e>
 8004b60:	1e6b      	subs	r3, r5, #1
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d824      	bhi.n	8004bb0 <_scanf_float+0x2fc>
 8004b66:	2d02      	cmp	r5, #2
 8004b68:	d836      	bhi.n	8004bd8 <_scanf_float+0x324>
 8004b6a:	9b01      	ldr	r3, [sp, #4]
 8004b6c:	429e      	cmp	r6, r3
 8004b6e:	f67f aee4 	bls.w	800493a <_scanf_float+0x86>
 8004b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b7a:	463a      	mov	r2, r7
 8004b7c:	4640      	mov	r0, r8
 8004b7e:	4798      	blx	r3
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	6123      	str	r3, [r4, #16]
 8004b86:	e7f0      	b.n	8004b6a <_scanf_float+0x2b6>
 8004b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004b90:	463a      	mov	r2, r7
 8004b92:	4640      	mov	r0, r8
 8004b94:	4798      	blx	r3
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ba0:	fa5f fa8a 	uxtb.w	sl, sl
 8004ba4:	f1ba 0f02 	cmp.w	sl, #2
 8004ba8:	d1ee      	bne.n	8004b88 <_scanf_float+0x2d4>
 8004baa:	3d03      	subs	r5, #3
 8004bac:	b2ed      	uxtb	r5, r5
 8004bae:	1b76      	subs	r6, r6, r5
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	05da      	lsls	r2, r3, #23
 8004bb4:	d530      	bpl.n	8004c18 <_scanf_float+0x364>
 8004bb6:	055b      	lsls	r3, r3, #21
 8004bb8:	d511      	bpl.n	8004bde <_scanf_float+0x32a>
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	429e      	cmp	r6, r3
 8004bbe:	f67f aebc 	bls.w	800493a <_scanf_float+0x86>
 8004bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bca:	463a      	mov	r2, r7
 8004bcc:	4640      	mov	r0, r8
 8004bce:	4798      	blx	r3
 8004bd0:	6923      	ldr	r3, [r4, #16]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	e7f0      	b.n	8004bba <_scanf_float+0x306>
 8004bd8:	46aa      	mov	sl, r5
 8004bda:	46b3      	mov	fp, r6
 8004bdc:	e7de      	b.n	8004b9c <_scanf_float+0x2e8>
 8004bde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	2965      	cmp	r1, #101	@ 0x65
 8004be6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bea:	f106 35ff 	add.w	r5, r6, #4294967295
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	d00c      	beq.n	8004c0c <_scanf_float+0x358>
 8004bf2:	2945      	cmp	r1, #69	@ 0x45
 8004bf4:	d00a      	beq.n	8004c0c <_scanf_float+0x358>
 8004bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bfa:	463a      	mov	r2, r7
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	4798      	blx	r3
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	1eb5      	subs	r5, r6, #2
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c10:	463a      	mov	r2, r7
 8004c12:	4640      	mov	r0, r8
 8004c14:	4798      	blx	r3
 8004c16:	462e      	mov	r6, r5
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	f012 0210 	ands.w	r2, r2, #16
 8004c1e:	d001      	beq.n	8004c24 <_scanf_float+0x370>
 8004c20:	2000      	movs	r0, #0
 8004c22:	e68b      	b.n	800493c <_scanf_float+0x88>
 8004c24:	7032      	strb	r2, [r6, #0]
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c30:	d11c      	bne.n	8004c6c <_scanf_float+0x3b8>
 8004c32:	9b02      	ldr	r3, [sp, #8]
 8004c34:	454b      	cmp	r3, r9
 8004c36:	eba3 0209 	sub.w	r2, r3, r9
 8004c3a:	d123      	bne.n	8004c84 <_scanf_float+0x3d0>
 8004c3c:	9901      	ldr	r1, [sp, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	4640      	mov	r0, r8
 8004c42:	f001 f8ed 	bl	8005e20 <_strtod_r>
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	6821      	ldr	r1, [r4, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f011 0f02 	tst.w	r1, #2
 8004c50:	ec57 6b10 	vmov	r6, r7, d0
 8004c54:	f103 0204 	add.w	r2, r3, #4
 8004c58:	d01f      	beq.n	8004c9a <_scanf_float+0x3e6>
 8004c5a:	9903      	ldr	r1, [sp, #12]
 8004c5c:	600a      	str	r2, [r1, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	e9c3 6700 	strd	r6, r7, [r3]
 8004c64:	68e3      	ldr	r3, [r4, #12]
 8004c66:	3301      	adds	r3, #1
 8004c68:	60e3      	str	r3, [r4, #12]
 8004c6a:	e7d9      	b.n	8004c20 <_scanf_float+0x36c>
 8004c6c:	9b04      	ldr	r3, [sp, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0e4      	beq.n	8004c3c <_scanf_float+0x388>
 8004c72:	9905      	ldr	r1, [sp, #20]
 8004c74:	230a      	movs	r3, #10
 8004c76:	3101      	adds	r1, #1
 8004c78:	4640      	mov	r0, r8
 8004c7a:	f001 f951 	bl	8005f20 <_strtol_r>
 8004c7e:	9b04      	ldr	r3, [sp, #16]
 8004c80:	9e05      	ldr	r6, [sp, #20]
 8004c82:	1ac2      	subs	r2, r0, r3
 8004c84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004c88:	429e      	cmp	r6, r3
 8004c8a:	bf28      	it	cs
 8004c8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004c90:	4910      	ldr	r1, [pc, #64]	@ (8004cd4 <_scanf_float+0x420>)
 8004c92:	4630      	mov	r0, r6
 8004c94:	f000 f8e4 	bl	8004e60 <siprintf>
 8004c98:	e7d0      	b.n	8004c3c <_scanf_float+0x388>
 8004c9a:	f011 0f04 	tst.w	r1, #4
 8004c9e:	9903      	ldr	r1, [sp, #12]
 8004ca0:	600a      	str	r2, [r1, #0]
 8004ca2:	d1dc      	bne.n	8004c5e <_scanf_float+0x3aa>
 8004ca4:	681d      	ldr	r5, [r3, #0]
 8004ca6:	4632      	mov	r2, r6
 8004ca8:	463b      	mov	r3, r7
 8004caa:	4630      	mov	r0, r6
 8004cac:	4639      	mov	r1, r7
 8004cae:	f7fb ff3d 	bl	8000b2c <__aeabi_dcmpun>
 8004cb2:	b128      	cbz	r0, 8004cc0 <_scanf_float+0x40c>
 8004cb4:	4808      	ldr	r0, [pc, #32]	@ (8004cd8 <_scanf_float+0x424>)
 8004cb6:	f000 f9b3 	bl	8005020 <nanf>
 8004cba:	ed85 0a00 	vstr	s0, [r5]
 8004cbe:	e7d1      	b.n	8004c64 <_scanf_float+0x3b0>
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb ff68 	bl	8000b98 <__aeabi_d2f>
 8004cc8:	6028      	str	r0, [r5, #0]
 8004cca:	e7cb      	b.n	8004c64 <_scanf_float+0x3b0>
 8004ccc:	f04f 0900 	mov.w	r9, #0
 8004cd0:	e629      	b.n	8004926 <_scanf_float+0x72>
 8004cd2:	bf00      	nop
 8004cd4:	08007dac 	.word	0x08007dac
 8004cd8:	0800816b 	.word	0x0800816b

08004cdc <std>:
 8004cdc:	2300      	movs	r3, #0
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cea:	6083      	str	r3, [r0, #8]
 8004cec:	8181      	strh	r1, [r0, #12]
 8004cee:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cf0:	81c2      	strh	r2, [r0, #14]
 8004cf2:	6183      	str	r3, [r0, #24]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	305c      	adds	r0, #92	@ 0x5c
 8004cfa:	f000 f914 	bl	8004f26 <memset>
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <std+0x58>)
 8004d00:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <std+0x5c>)
 8004d04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <std+0x60>)
 8004d08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <std+0x64>)
 8004d0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d44 <std+0x68>)
 8004d10:	6224      	str	r4, [r4, #32]
 8004d12:	429c      	cmp	r4, r3
 8004d14:	d006      	beq.n	8004d24 <std+0x48>
 8004d16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d1a:	4294      	cmp	r4, r2
 8004d1c:	d002      	beq.n	8004d24 <std+0x48>
 8004d1e:	33d0      	adds	r3, #208	@ 0xd0
 8004d20:	429c      	cmp	r4, r3
 8004d22:	d105      	bne.n	8004d30 <std+0x54>
 8004d24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2c:	f000 b974 	b.w	8005018 <__retarget_lock_init_recursive>
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	bf00      	nop
 8004d34:	08004ea1 	.word	0x08004ea1
 8004d38:	08004ec3 	.word	0x08004ec3
 8004d3c:	08004efb 	.word	0x08004efb
 8004d40:	08004f1f 	.word	0x08004f1f
 8004d44:	2000031c 	.word	0x2000031c

08004d48 <stdio_exit_handler>:
 8004d48:	4a02      	ldr	r2, [pc, #8]	@ (8004d54 <stdio_exit_handler+0xc>)
 8004d4a:	4903      	ldr	r1, [pc, #12]	@ (8004d58 <stdio_exit_handler+0x10>)
 8004d4c:	4803      	ldr	r0, [pc, #12]	@ (8004d5c <stdio_exit_handler+0x14>)
 8004d4e:	f000 b869 	b.w	8004e24 <_fwalk_sglue>
 8004d52:	bf00      	nop
 8004d54:	2000000c 	.word	0x2000000c
 8004d58:	080065f9 	.word	0x080065f9
 8004d5c:	2000001c 	.word	0x2000001c

08004d60 <cleanup_stdio>:
 8004d60:	6841      	ldr	r1, [r0, #4]
 8004d62:	4b0c      	ldr	r3, [pc, #48]	@ (8004d94 <cleanup_stdio+0x34>)
 8004d64:	4299      	cmp	r1, r3
 8004d66:	b510      	push	{r4, lr}
 8004d68:	4604      	mov	r4, r0
 8004d6a:	d001      	beq.n	8004d70 <cleanup_stdio+0x10>
 8004d6c:	f001 fc44 	bl	80065f8 <_fflush_r>
 8004d70:	68a1      	ldr	r1, [r4, #8]
 8004d72:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <cleanup_stdio+0x38>)
 8004d74:	4299      	cmp	r1, r3
 8004d76:	d002      	beq.n	8004d7e <cleanup_stdio+0x1e>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f001 fc3d 	bl	80065f8 <_fflush_r>
 8004d7e:	68e1      	ldr	r1, [r4, #12]
 8004d80:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <cleanup_stdio+0x3c>)
 8004d82:	4299      	cmp	r1, r3
 8004d84:	d004      	beq.n	8004d90 <cleanup_stdio+0x30>
 8004d86:	4620      	mov	r0, r4
 8004d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8c:	f001 bc34 	b.w	80065f8 <_fflush_r>
 8004d90:	bd10      	pop	{r4, pc}
 8004d92:	bf00      	nop
 8004d94:	2000031c 	.word	0x2000031c
 8004d98:	20000384 	.word	0x20000384
 8004d9c:	200003ec 	.word	0x200003ec

08004da0 <global_stdio_init.part.0>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <global_stdio_init.part.0+0x30>)
 8004da4:	4c0b      	ldr	r4, [pc, #44]	@ (8004dd4 <global_stdio_init.part.0+0x34>)
 8004da6:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd8 <global_stdio_init.part.0+0x38>)
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	4620      	mov	r0, r4
 8004dac:	2200      	movs	r2, #0
 8004dae:	2104      	movs	r1, #4
 8004db0:	f7ff ff94 	bl	8004cdc <std>
 8004db4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004db8:	2201      	movs	r2, #1
 8004dba:	2109      	movs	r1, #9
 8004dbc:	f7ff ff8e 	bl	8004cdc <std>
 8004dc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dca:	2112      	movs	r1, #18
 8004dcc:	f7ff bf86 	b.w	8004cdc <std>
 8004dd0:	20000454 	.word	0x20000454
 8004dd4:	2000031c 	.word	0x2000031c
 8004dd8:	08004d49 	.word	0x08004d49

08004ddc <__sfp_lock_acquire>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	@ (8004de4 <__sfp_lock_acquire+0x8>)
 8004dde:	f000 b91c 	b.w	800501a <__retarget_lock_acquire_recursive>
 8004de2:	bf00      	nop
 8004de4:	2000045d 	.word	0x2000045d

08004de8 <__sfp_lock_release>:
 8004de8:	4801      	ldr	r0, [pc, #4]	@ (8004df0 <__sfp_lock_release+0x8>)
 8004dea:	f000 b917 	b.w	800501c <__retarget_lock_release_recursive>
 8004dee:	bf00      	nop
 8004df0:	2000045d 	.word	0x2000045d

08004df4 <__sinit>:
 8004df4:	b510      	push	{r4, lr}
 8004df6:	4604      	mov	r4, r0
 8004df8:	f7ff fff0 	bl	8004ddc <__sfp_lock_acquire>
 8004dfc:	6a23      	ldr	r3, [r4, #32]
 8004dfe:	b11b      	cbz	r3, 8004e08 <__sinit+0x14>
 8004e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e04:	f7ff bff0 	b.w	8004de8 <__sfp_lock_release>
 8004e08:	4b04      	ldr	r3, [pc, #16]	@ (8004e1c <__sinit+0x28>)
 8004e0a:	6223      	str	r3, [r4, #32]
 8004e0c:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <__sinit+0x2c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f5      	bne.n	8004e00 <__sinit+0xc>
 8004e14:	f7ff ffc4 	bl	8004da0 <global_stdio_init.part.0>
 8004e18:	e7f2      	b.n	8004e00 <__sinit+0xc>
 8004e1a:	bf00      	nop
 8004e1c:	08004d61 	.word	0x08004d61
 8004e20:	20000454 	.word	0x20000454

08004e24 <_fwalk_sglue>:
 8004e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e28:	4607      	mov	r7, r0
 8004e2a:	4688      	mov	r8, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	2600      	movs	r6, #0
 8004e30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e34:	f1b9 0901 	subs.w	r9, r9, #1
 8004e38:	d505      	bpl.n	8004e46 <_fwalk_sglue+0x22>
 8004e3a:	6824      	ldr	r4, [r4, #0]
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	d1f7      	bne.n	8004e30 <_fwalk_sglue+0xc>
 8004e40:	4630      	mov	r0, r6
 8004e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d907      	bls.n	8004e5c <_fwalk_sglue+0x38>
 8004e4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e50:	3301      	adds	r3, #1
 8004e52:	d003      	beq.n	8004e5c <_fwalk_sglue+0x38>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4638      	mov	r0, r7
 8004e58:	47c0      	blx	r8
 8004e5a:	4306      	orrs	r6, r0
 8004e5c:	3568      	adds	r5, #104	@ 0x68
 8004e5e:	e7e9      	b.n	8004e34 <_fwalk_sglue+0x10>

08004e60 <siprintf>:
 8004e60:	b40e      	push	{r1, r2, r3}
 8004e62:	b500      	push	{lr}
 8004e64:	b09c      	sub	sp, #112	@ 0x70
 8004e66:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e68:	9002      	str	r0, [sp, #8]
 8004e6a:	9006      	str	r0, [sp, #24]
 8004e6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e70:	4809      	ldr	r0, [pc, #36]	@ (8004e98 <siprintf+0x38>)
 8004e72:	9107      	str	r1, [sp, #28]
 8004e74:	9104      	str	r1, [sp, #16]
 8004e76:	4909      	ldr	r1, [pc, #36]	@ (8004e9c <siprintf+0x3c>)
 8004e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e7c:	9105      	str	r1, [sp, #20]
 8004e7e:	6800      	ldr	r0, [r0, #0]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	a902      	add	r1, sp, #8
 8004e84:	f001 f8aa 	bl	8005fdc <_svfiprintf_r>
 8004e88:	9b02      	ldr	r3, [sp, #8]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	b01c      	add	sp, #112	@ 0x70
 8004e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e94:	b003      	add	sp, #12
 8004e96:	4770      	bx	lr
 8004e98:	20000018 	.word	0x20000018
 8004e9c:	ffff0208 	.word	0xffff0208

08004ea0 <__sread>:
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea8:	f000 f868 	bl	8004f7c <_read_r>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	bfab      	itete	ge
 8004eb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8004eb4:	181b      	addge	r3, r3, r0
 8004eb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004eba:	bfac      	ite	ge
 8004ebc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ebe:	81a3      	strhlt	r3, [r4, #12]
 8004ec0:	bd10      	pop	{r4, pc}

08004ec2 <__swrite>:
 8004ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	898b      	ldrh	r3, [r1, #12]
 8004eca:	05db      	lsls	r3, r3, #23
 8004ecc:	4605      	mov	r5, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	d505      	bpl.n	8004ee0 <__swrite+0x1e>
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	2302      	movs	r3, #2
 8004eda:	2200      	movs	r2, #0
 8004edc:	f000 f83c 	bl	8004f58 <_lseek_r>
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ee6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eea:	81a3      	strh	r3, [r4, #12]
 8004eec:	4632      	mov	r2, r6
 8004eee:	463b      	mov	r3, r7
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef6:	f000 b853 	b.w	8004fa0 <_write_r>

08004efa <__sseek>:
 8004efa:	b510      	push	{r4, lr}
 8004efc:	460c      	mov	r4, r1
 8004efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f02:	f000 f829 	bl	8004f58 <_lseek_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	bf15      	itete	ne
 8004f0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f16:	81a3      	strheq	r3, [r4, #12]
 8004f18:	bf18      	it	ne
 8004f1a:	81a3      	strhne	r3, [r4, #12]
 8004f1c:	bd10      	pop	{r4, pc}

08004f1e <__sclose>:
 8004f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f22:	f000 b809 	b.w	8004f38 <_close_r>

08004f26 <memset>:
 8004f26:	4402      	add	r2, r0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d100      	bne.n	8004f30 <memset+0xa>
 8004f2e:	4770      	bx	lr
 8004f30:	f803 1b01 	strb.w	r1, [r3], #1
 8004f34:	e7f9      	b.n	8004f2a <memset+0x4>
	...

08004f38 <_close_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d06      	ldr	r5, [pc, #24]	@ (8004f54 <_close_r+0x1c>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fc fedb 	bl	8001cfe <_close>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_close_r+0x1a>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_close_r+0x1a>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000458 	.word	0x20000458

08004f58 <_lseek_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d07      	ldr	r5, [pc, #28]	@ (8004f78 <_lseek_r+0x20>)
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4608      	mov	r0, r1
 8004f60:	4611      	mov	r1, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f7fc fef0 	bl	8001d4c <_lseek>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_lseek_r+0x1e>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_lseek_r+0x1e>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000458 	.word	0x20000458

08004f7c <_read_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	@ (8004f9c <_read_r+0x20>)
 8004f80:	4604      	mov	r4, r0
 8004f82:	4608      	mov	r0, r1
 8004f84:	4611      	mov	r1, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fc fe7e 	bl	8001c8c <_read>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_read_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_read_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	20000458 	.word	0x20000458

08004fa0 <_write_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	@ (8004fc0 <_write_r+0x20>)
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	4611      	mov	r1, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f7fc fe89 	bl	8001cc6 <_write>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_write_r+0x1e>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_write_r+0x1e>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	20000458 	.word	0x20000458

08004fc4 <__errno>:
 8004fc4:	4b01      	ldr	r3, [pc, #4]	@ (8004fcc <__errno+0x8>)
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000018 	.word	0x20000018

08004fd0 <__libc_init_array>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005008 <__libc_init_array+0x38>)
 8004fd4:	4c0d      	ldr	r4, [pc, #52]	@ (800500c <__libc_init_array+0x3c>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	2600      	movs	r6, #0
 8004fdc:	42a6      	cmp	r6, r4
 8004fde:	d109      	bne.n	8004ff4 <__libc_init_array+0x24>
 8004fe0:	4d0b      	ldr	r5, [pc, #44]	@ (8005010 <__libc_init_array+0x40>)
 8004fe2:	4c0c      	ldr	r4, [pc, #48]	@ (8005014 <__libc_init_array+0x44>)
 8004fe4:	f002 feb6 	bl	8007d54 <_init>
 8004fe8:	1b64      	subs	r4, r4, r5
 8004fea:	10a4      	asrs	r4, r4, #2
 8004fec:	2600      	movs	r6, #0
 8004fee:	42a6      	cmp	r6, r4
 8004ff0:	d105      	bne.n	8004ffe <__libc_init_array+0x2e>
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff8:	4798      	blx	r3
 8004ffa:	3601      	adds	r6, #1
 8004ffc:	e7ee      	b.n	8004fdc <__libc_init_array+0xc>
 8004ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005002:	4798      	blx	r3
 8005004:	3601      	adds	r6, #1
 8005006:	e7f2      	b.n	8004fee <__libc_init_array+0x1e>
 8005008:	08008174 	.word	0x08008174
 800500c:	08008174 	.word	0x08008174
 8005010:	08008174 	.word	0x08008174
 8005014:	08008178 	.word	0x08008178

08005018 <__retarget_lock_init_recursive>:
 8005018:	4770      	bx	lr

0800501a <__retarget_lock_acquire_recursive>:
 800501a:	4770      	bx	lr

0800501c <__retarget_lock_release_recursive>:
 800501c:	4770      	bx	lr
	...

08005020 <nanf>:
 8005020:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005028 <nanf+0x8>
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	7fc00000 	.word	0x7fc00000

0800502c <_free_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	2900      	cmp	r1, #0
 8005032:	d041      	beq.n	80050b8 <_free_r+0x8c>
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f0c      	subs	r4, r1, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfb8      	it	lt
 800503e:	18e4      	addlt	r4, r4, r3
 8005040:	f000 f8e0 	bl	8005204 <__malloc_lock>
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <_free_r+0x90>)
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	b933      	cbnz	r3, 8005058 <_free_r+0x2c>
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6014      	str	r4, [r2, #0]
 800504e:	4628      	mov	r0, r5
 8005050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005054:	f000 b8dc 	b.w	8005210 <__malloc_unlock>
 8005058:	42a3      	cmp	r3, r4
 800505a:	d908      	bls.n	800506e <_free_r+0x42>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	1821      	adds	r1, r4, r0
 8005060:	428b      	cmp	r3, r1
 8005062:	bf01      	itttt	eq
 8005064:	6819      	ldreq	r1, [r3, #0]
 8005066:	685b      	ldreq	r3, [r3, #4]
 8005068:	1809      	addeq	r1, r1, r0
 800506a:	6021      	streq	r1, [r4, #0]
 800506c:	e7ed      	b.n	800504a <_free_r+0x1e>
 800506e:	461a      	mov	r2, r3
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	b10b      	cbz	r3, 8005078 <_free_r+0x4c>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d9fa      	bls.n	800506e <_free_r+0x42>
 8005078:	6811      	ldr	r1, [r2, #0]
 800507a:	1850      	adds	r0, r2, r1
 800507c:	42a0      	cmp	r0, r4
 800507e:	d10b      	bne.n	8005098 <_free_r+0x6c>
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	4401      	add	r1, r0
 8005084:	1850      	adds	r0, r2, r1
 8005086:	4283      	cmp	r3, r0
 8005088:	6011      	str	r1, [r2, #0]
 800508a:	d1e0      	bne.n	800504e <_free_r+0x22>
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	6053      	str	r3, [r2, #4]
 8005092:	4408      	add	r0, r1
 8005094:	6010      	str	r0, [r2, #0]
 8005096:	e7da      	b.n	800504e <_free_r+0x22>
 8005098:	d902      	bls.n	80050a0 <_free_r+0x74>
 800509a:	230c      	movs	r3, #12
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	e7d6      	b.n	800504e <_free_r+0x22>
 80050a0:	6820      	ldr	r0, [r4, #0]
 80050a2:	1821      	adds	r1, r4, r0
 80050a4:	428b      	cmp	r3, r1
 80050a6:	bf04      	itt	eq
 80050a8:	6819      	ldreq	r1, [r3, #0]
 80050aa:	685b      	ldreq	r3, [r3, #4]
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	bf04      	itt	eq
 80050b0:	1809      	addeq	r1, r1, r0
 80050b2:	6021      	streq	r1, [r4, #0]
 80050b4:	6054      	str	r4, [r2, #4]
 80050b6:	e7ca      	b.n	800504e <_free_r+0x22>
 80050b8:	bd38      	pop	{r3, r4, r5, pc}
 80050ba:	bf00      	nop
 80050bc:	20000464 	.word	0x20000464

080050c0 <sbrk_aligned>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005100 <sbrk_aligned+0x40>)
 80050c4:	460c      	mov	r4, r1
 80050c6:	6831      	ldr	r1, [r6, #0]
 80050c8:	4605      	mov	r5, r0
 80050ca:	b911      	cbnz	r1, 80050d2 <sbrk_aligned+0x12>
 80050cc:	f001 fae8 	bl	80066a0 <_sbrk_r>
 80050d0:	6030      	str	r0, [r6, #0]
 80050d2:	4621      	mov	r1, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	f001 fae3 	bl	80066a0 <_sbrk_r>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	d103      	bne.n	80050e6 <sbrk_aligned+0x26>
 80050de:	f04f 34ff 	mov.w	r4, #4294967295
 80050e2:	4620      	mov	r0, r4
 80050e4:	bd70      	pop	{r4, r5, r6, pc}
 80050e6:	1cc4      	adds	r4, r0, #3
 80050e8:	f024 0403 	bic.w	r4, r4, #3
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d0f8      	beq.n	80050e2 <sbrk_aligned+0x22>
 80050f0:	1a21      	subs	r1, r4, r0
 80050f2:	4628      	mov	r0, r5
 80050f4:	f001 fad4 	bl	80066a0 <_sbrk_r>
 80050f8:	3001      	adds	r0, #1
 80050fa:	d1f2      	bne.n	80050e2 <sbrk_aligned+0x22>
 80050fc:	e7ef      	b.n	80050de <sbrk_aligned+0x1e>
 80050fe:	bf00      	nop
 8005100:	20000460 	.word	0x20000460

08005104 <_malloc_r>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	1ccd      	adds	r5, r1, #3
 800510a:	f025 0503 	bic.w	r5, r5, #3
 800510e:	3508      	adds	r5, #8
 8005110:	2d0c      	cmp	r5, #12
 8005112:	bf38      	it	cc
 8005114:	250c      	movcc	r5, #12
 8005116:	2d00      	cmp	r5, #0
 8005118:	4606      	mov	r6, r0
 800511a:	db01      	blt.n	8005120 <_malloc_r+0x1c>
 800511c:	42a9      	cmp	r1, r5
 800511e:	d904      	bls.n	800512a <_malloc_r+0x26>
 8005120:	230c      	movs	r3, #12
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	2000      	movs	r0, #0
 8005126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800512a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005200 <_malloc_r+0xfc>
 800512e:	f000 f869 	bl	8005204 <__malloc_lock>
 8005132:	f8d8 3000 	ldr.w	r3, [r8]
 8005136:	461c      	mov	r4, r3
 8005138:	bb44      	cbnz	r4, 800518c <_malloc_r+0x88>
 800513a:	4629      	mov	r1, r5
 800513c:	4630      	mov	r0, r6
 800513e:	f7ff ffbf 	bl	80050c0 <sbrk_aligned>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	4604      	mov	r4, r0
 8005146:	d158      	bne.n	80051fa <_malloc_r+0xf6>
 8005148:	f8d8 4000 	ldr.w	r4, [r8]
 800514c:	4627      	mov	r7, r4
 800514e:	2f00      	cmp	r7, #0
 8005150:	d143      	bne.n	80051da <_malloc_r+0xd6>
 8005152:	2c00      	cmp	r4, #0
 8005154:	d04b      	beq.n	80051ee <_malloc_r+0xea>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	4639      	mov	r1, r7
 800515a:	4630      	mov	r0, r6
 800515c:	eb04 0903 	add.w	r9, r4, r3
 8005160:	f001 fa9e 	bl	80066a0 <_sbrk_r>
 8005164:	4581      	cmp	r9, r0
 8005166:	d142      	bne.n	80051ee <_malloc_r+0xea>
 8005168:	6821      	ldr	r1, [r4, #0]
 800516a:	1a6d      	subs	r5, r5, r1
 800516c:	4629      	mov	r1, r5
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ffa6 	bl	80050c0 <sbrk_aligned>
 8005174:	3001      	adds	r0, #1
 8005176:	d03a      	beq.n	80051ee <_malloc_r+0xea>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	442b      	add	r3, r5
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	f8d8 3000 	ldr.w	r3, [r8]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	bb62      	cbnz	r2, 80051e0 <_malloc_r+0xdc>
 8005186:	f8c8 7000 	str.w	r7, [r8]
 800518a:	e00f      	b.n	80051ac <_malloc_r+0xa8>
 800518c:	6822      	ldr	r2, [r4, #0]
 800518e:	1b52      	subs	r2, r2, r5
 8005190:	d420      	bmi.n	80051d4 <_malloc_r+0xd0>
 8005192:	2a0b      	cmp	r2, #11
 8005194:	d917      	bls.n	80051c6 <_malloc_r+0xc2>
 8005196:	1961      	adds	r1, r4, r5
 8005198:	42a3      	cmp	r3, r4
 800519a:	6025      	str	r5, [r4, #0]
 800519c:	bf18      	it	ne
 800519e:	6059      	strne	r1, [r3, #4]
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	bf08      	it	eq
 80051a4:	f8c8 1000 	streq.w	r1, [r8]
 80051a8:	5162      	str	r2, [r4, r5]
 80051aa:	604b      	str	r3, [r1, #4]
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 f82f 	bl	8005210 <__malloc_unlock>
 80051b2:	f104 000b 	add.w	r0, r4, #11
 80051b6:	1d23      	adds	r3, r4, #4
 80051b8:	f020 0007 	bic.w	r0, r0, #7
 80051bc:	1ac2      	subs	r2, r0, r3
 80051be:	bf1c      	itt	ne
 80051c0:	1a1b      	subne	r3, r3, r0
 80051c2:	50a3      	strne	r3, [r4, r2]
 80051c4:	e7af      	b.n	8005126 <_malloc_r+0x22>
 80051c6:	6862      	ldr	r2, [r4, #4]
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	bf0c      	ite	eq
 80051cc:	f8c8 2000 	streq.w	r2, [r8]
 80051d0:	605a      	strne	r2, [r3, #4]
 80051d2:	e7eb      	b.n	80051ac <_malloc_r+0xa8>
 80051d4:	4623      	mov	r3, r4
 80051d6:	6864      	ldr	r4, [r4, #4]
 80051d8:	e7ae      	b.n	8005138 <_malloc_r+0x34>
 80051da:	463c      	mov	r4, r7
 80051dc:	687f      	ldr	r7, [r7, #4]
 80051de:	e7b6      	b.n	800514e <_malloc_r+0x4a>
 80051e0:	461a      	mov	r2, r3
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d1fb      	bne.n	80051e0 <_malloc_r+0xdc>
 80051e8:	2300      	movs	r3, #0
 80051ea:	6053      	str	r3, [r2, #4]
 80051ec:	e7de      	b.n	80051ac <_malloc_r+0xa8>
 80051ee:	230c      	movs	r3, #12
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 f80c 	bl	8005210 <__malloc_unlock>
 80051f8:	e794      	b.n	8005124 <_malloc_r+0x20>
 80051fa:	6005      	str	r5, [r0, #0]
 80051fc:	e7d6      	b.n	80051ac <_malloc_r+0xa8>
 80051fe:	bf00      	nop
 8005200:	20000464 	.word	0x20000464

08005204 <__malloc_lock>:
 8005204:	4801      	ldr	r0, [pc, #4]	@ (800520c <__malloc_lock+0x8>)
 8005206:	f7ff bf08 	b.w	800501a <__retarget_lock_acquire_recursive>
 800520a:	bf00      	nop
 800520c:	2000045c 	.word	0x2000045c

08005210 <__malloc_unlock>:
 8005210:	4801      	ldr	r0, [pc, #4]	@ (8005218 <__malloc_unlock+0x8>)
 8005212:	f7ff bf03 	b.w	800501c <__retarget_lock_release_recursive>
 8005216:	bf00      	nop
 8005218:	2000045c 	.word	0x2000045c

0800521c <sulp>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	ec45 4b10 	vmov	d0, r4, r5
 8005226:	4616      	mov	r6, r2
 8005228:	f002 f922 	bl	8007470 <__ulp>
 800522c:	ec51 0b10 	vmov	r0, r1, d0
 8005230:	b17e      	cbz	r6, 8005252 <sulp+0x36>
 8005232:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005236:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800523a:	2b00      	cmp	r3, #0
 800523c:	dd09      	ble.n	8005252 <sulp+0x36>
 800523e:	051b      	lsls	r3, r3, #20
 8005240:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005244:	2400      	movs	r4, #0
 8005246:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	f7fb f9d3 	bl	80005f8 <__aeabi_dmul>
 8005252:	ec41 0b10 	vmov	d0, r0, r1
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <_strtod_l>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	b09f      	sub	sp, #124	@ 0x7c
 800525e:	460c      	mov	r4, r1
 8005260:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005262:	2200      	movs	r2, #0
 8005264:	921a      	str	r2, [sp, #104]	@ 0x68
 8005266:	9005      	str	r0, [sp, #20]
 8005268:	f04f 0a00 	mov.w	sl, #0
 800526c:	f04f 0b00 	mov.w	fp, #0
 8005270:	460a      	mov	r2, r1
 8005272:	9219      	str	r2, [sp, #100]	@ 0x64
 8005274:	7811      	ldrb	r1, [r2, #0]
 8005276:	292b      	cmp	r1, #43	@ 0x2b
 8005278:	d04a      	beq.n	8005310 <_strtod_l+0xb8>
 800527a:	d838      	bhi.n	80052ee <_strtod_l+0x96>
 800527c:	290d      	cmp	r1, #13
 800527e:	d832      	bhi.n	80052e6 <_strtod_l+0x8e>
 8005280:	2908      	cmp	r1, #8
 8005282:	d832      	bhi.n	80052ea <_strtod_l+0x92>
 8005284:	2900      	cmp	r1, #0
 8005286:	d03b      	beq.n	8005300 <_strtod_l+0xa8>
 8005288:	2200      	movs	r2, #0
 800528a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800528c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800528e:	782a      	ldrb	r2, [r5, #0]
 8005290:	2a30      	cmp	r2, #48	@ 0x30
 8005292:	f040 80b3 	bne.w	80053fc <_strtod_l+0x1a4>
 8005296:	786a      	ldrb	r2, [r5, #1]
 8005298:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800529c:	2a58      	cmp	r2, #88	@ 0x58
 800529e:	d16e      	bne.n	800537e <_strtod_l+0x126>
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	4a8e      	ldr	r2, [pc, #568]	@ (80054e4 <_strtod_l+0x28c>)
 80052ac:	9805      	ldr	r0, [sp, #20]
 80052ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80052b0:	a919      	add	r1, sp, #100	@ 0x64
 80052b2:	f001 fa85 	bl	80067c0 <__gethex>
 80052b6:	f010 060f 	ands.w	r6, r0, #15
 80052ba:	4604      	mov	r4, r0
 80052bc:	d005      	beq.n	80052ca <_strtod_l+0x72>
 80052be:	2e06      	cmp	r6, #6
 80052c0:	d128      	bne.n	8005314 <_strtod_l+0xbc>
 80052c2:	3501      	adds	r5, #1
 80052c4:	2300      	movs	r3, #0
 80052c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80052c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 858e 	bne.w	8005dee <_strtod_l+0xb96>
 80052d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052d4:	b1cb      	cbz	r3, 800530a <_strtod_l+0xb2>
 80052d6:	4652      	mov	r2, sl
 80052d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80052dc:	ec43 2b10 	vmov	d0, r2, r3
 80052e0:	b01f      	add	sp, #124	@ 0x7c
 80052e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e6:	2920      	cmp	r1, #32
 80052e8:	d1ce      	bne.n	8005288 <_strtod_l+0x30>
 80052ea:	3201      	adds	r2, #1
 80052ec:	e7c1      	b.n	8005272 <_strtod_l+0x1a>
 80052ee:	292d      	cmp	r1, #45	@ 0x2d
 80052f0:	d1ca      	bne.n	8005288 <_strtod_l+0x30>
 80052f2:	2101      	movs	r1, #1
 80052f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80052f6:	1c51      	adds	r1, r2, #1
 80052f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80052fa:	7852      	ldrb	r2, [r2, #1]
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	d1c5      	bne.n	800528c <_strtod_l+0x34>
 8005300:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005302:	9419      	str	r4, [sp, #100]	@ 0x64
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 8570 	bne.w	8005dea <_strtod_l+0xb92>
 800530a:	4652      	mov	r2, sl
 800530c:	465b      	mov	r3, fp
 800530e:	e7e5      	b.n	80052dc <_strtod_l+0x84>
 8005310:	2100      	movs	r1, #0
 8005312:	e7ef      	b.n	80052f4 <_strtod_l+0x9c>
 8005314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005316:	b13a      	cbz	r2, 8005328 <_strtod_l+0xd0>
 8005318:	2135      	movs	r1, #53	@ 0x35
 800531a:	a81c      	add	r0, sp, #112	@ 0x70
 800531c:	f002 f9a2 	bl	8007664 <__copybits>
 8005320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005322:	9805      	ldr	r0, [sp, #20]
 8005324:	f001 fd70 	bl	8006e08 <_Bfree>
 8005328:	3e01      	subs	r6, #1
 800532a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800532c:	2e04      	cmp	r6, #4
 800532e:	d806      	bhi.n	800533e <_strtod_l+0xe6>
 8005330:	e8df f006 	tbb	[pc, r6]
 8005334:	201d0314 	.word	0x201d0314
 8005338:	14          	.byte	0x14
 8005339:	00          	.byte	0x00
 800533a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800533e:	05e1      	lsls	r1, r4, #23
 8005340:	bf48      	it	mi
 8005342:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800534a:	0d1b      	lsrs	r3, r3, #20
 800534c:	051b      	lsls	r3, r3, #20
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1bb      	bne.n	80052ca <_strtod_l+0x72>
 8005352:	f7ff fe37 	bl	8004fc4 <__errno>
 8005356:	2322      	movs	r3, #34	@ 0x22
 8005358:	6003      	str	r3, [r0, #0]
 800535a:	e7b6      	b.n	80052ca <_strtod_l+0x72>
 800535c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005360:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005368:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800536c:	e7e7      	b.n	800533e <_strtod_l+0xe6>
 800536e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80054ec <_strtod_l+0x294>
 8005372:	e7e4      	b.n	800533e <_strtod_l+0xe6>
 8005374:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005378:	f04f 3aff 	mov.w	sl, #4294967295
 800537c:	e7df      	b.n	800533e <_strtod_l+0xe6>
 800537e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	9219      	str	r2, [sp, #100]	@ 0x64
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	2b30      	cmp	r3, #48	@ 0x30
 8005388:	d0f9      	beq.n	800537e <_strtod_l+0x126>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d09d      	beq.n	80052ca <_strtod_l+0x72>
 800538e:	2301      	movs	r3, #1
 8005390:	9309      	str	r3, [sp, #36]	@ 0x24
 8005392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005394:	930c      	str	r3, [sp, #48]	@ 0x30
 8005396:	2300      	movs	r3, #0
 8005398:	9308      	str	r3, [sp, #32]
 800539a:	930a      	str	r3, [sp, #40]	@ 0x28
 800539c:	461f      	mov	r7, r3
 800539e:	220a      	movs	r2, #10
 80053a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80053a2:	7805      	ldrb	r5, [r0, #0]
 80053a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80053a8:	b2d9      	uxtb	r1, r3
 80053aa:	2909      	cmp	r1, #9
 80053ac:	d928      	bls.n	8005400 <_strtod_l+0x1a8>
 80053ae:	494e      	ldr	r1, [pc, #312]	@ (80054e8 <_strtod_l+0x290>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	f001 f963 	bl	800667c <strncmp>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d032      	beq.n	8005420 <_strtod_l+0x1c8>
 80053ba:	2000      	movs	r0, #0
 80053bc:	462a      	mov	r2, r5
 80053be:	4681      	mov	r9, r0
 80053c0:	463d      	mov	r5, r7
 80053c2:	4603      	mov	r3, r0
 80053c4:	2a65      	cmp	r2, #101	@ 0x65
 80053c6:	d001      	beq.n	80053cc <_strtod_l+0x174>
 80053c8:	2a45      	cmp	r2, #69	@ 0x45
 80053ca:	d114      	bne.n	80053f6 <_strtod_l+0x19e>
 80053cc:	b91d      	cbnz	r5, 80053d6 <_strtod_l+0x17e>
 80053ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053d0:	4302      	orrs	r2, r0
 80053d2:	d095      	beq.n	8005300 <_strtod_l+0xa8>
 80053d4:	2500      	movs	r5, #0
 80053d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80053d8:	1c62      	adds	r2, r4, #1
 80053da:	9219      	str	r2, [sp, #100]	@ 0x64
 80053dc:	7862      	ldrb	r2, [r4, #1]
 80053de:	2a2b      	cmp	r2, #43	@ 0x2b
 80053e0:	d077      	beq.n	80054d2 <_strtod_l+0x27a>
 80053e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80053e4:	d07b      	beq.n	80054de <_strtod_l+0x286>
 80053e6:	f04f 0c00 	mov.w	ip, #0
 80053ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80053ee:	2909      	cmp	r1, #9
 80053f0:	f240 8082 	bls.w	80054f8 <_strtod_l+0x2a0>
 80053f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	e0a2      	b.n	8005542 <_strtod_l+0x2ea>
 80053fc:	2300      	movs	r3, #0
 80053fe:	e7c7      	b.n	8005390 <_strtod_l+0x138>
 8005400:	2f08      	cmp	r7, #8
 8005402:	bfd5      	itete	le
 8005404:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005406:	9908      	ldrgt	r1, [sp, #32]
 8005408:	fb02 3301 	mlale	r3, r2, r1, r3
 800540c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005410:	f100 0001 	add.w	r0, r0, #1
 8005414:	bfd4      	ite	le
 8005416:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005418:	9308      	strgt	r3, [sp, #32]
 800541a:	3701      	adds	r7, #1
 800541c:	9019      	str	r0, [sp, #100]	@ 0x64
 800541e:	e7bf      	b.n	80053a0 <_strtod_l+0x148>
 8005420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	9219      	str	r2, [sp, #100]	@ 0x64
 8005426:	785a      	ldrb	r2, [r3, #1]
 8005428:	b37f      	cbz	r7, 800548a <_strtod_l+0x232>
 800542a:	4681      	mov	r9, r0
 800542c:	463d      	mov	r5, r7
 800542e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005432:	2b09      	cmp	r3, #9
 8005434:	d912      	bls.n	800545c <_strtod_l+0x204>
 8005436:	2301      	movs	r3, #1
 8005438:	e7c4      	b.n	80053c4 <_strtod_l+0x16c>
 800543a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005440:	785a      	ldrb	r2, [r3, #1]
 8005442:	3001      	adds	r0, #1
 8005444:	2a30      	cmp	r2, #48	@ 0x30
 8005446:	d0f8      	beq.n	800543a <_strtod_l+0x1e2>
 8005448:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800544c:	2b08      	cmp	r3, #8
 800544e:	f200 84d3 	bhi.w	8005df8 <_strtod_l+0xba0>
 8005452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005454:	930c      	str	r3, [sp, #48]	@ 0x30
 8005456:	4681      	mov	r9, r0
 8005458:	2000      	movs	r0, #0
 800545a:	4605      	mov	r5, r0
 800545c:	3a30      	subs	r2, #48	@ 0x30
 800545e:	f100 0301 	add.w	r3, r0, #1
 8005462:	d02a      	beq.n	80054ba <_strtod_l+0x262>
 8005464:	4499      	add	r9, r3
 8005466:	eb00 0c05 	add.w	ip, r0, r5
 800546a:	462b      	mov	r3, r5
 800546c:	210a      	movs	r1, #10
 800546e:	4563      	cmp	r3, ip
 8005470:	d10d      	bne.n	800548e <_strtod_l+0x236>
 8005472:	1c69      	adds	r1, r5, #1
 8005474:	4401      	add	r1, r0
 8005476:	4428      	add	r0, r5
 8005478:	2808      	cmp	r0, #8
 800547a:	dc16      	bgt.n	80054aa <_strtod_l+0x252>
 800547c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800547e:	230a      	movs	r3, #10
 8005480:	fb03 2300 	mla	r3, r3, r0, r2
 8005484:	930a      	str	r3, [sp, #40]	@ 0x28
 8005486:	2300      	movs	r3, #0
 8005488:	e018      	b.n	80054bc <_strtod_l+0x264>
 800548a:	4638      	mov	r0, r7
 800548c:	e7da      	b.n	8005444 <_strtod_l+0x1ec>
 800548e:	2b08      	cmp	r3, #8
 8005490:	f103 0301 	add.w	r3, r3, #1
 8005494:	dc03      	bgt.n	800549e <_strtod_l+0x246>
 8005496:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005498:	434e      	muls	r6, r1
 800549a:	960a      	str	r6, [sp, #40]	@ 0x28
 800549c:	e7e7      	b.n	800546e <_strtod_l+0x216>
 800549e:	2b10      	cmp	r3, #16
 80054a0:	bfde      	ittt	le
 80054a2:	9e08      	ldrle	r6, [sp, #32]
 80054a4:	434e      	mulle	r6, r1
 80054a6:	9608      	strle	r6, [sp, #32]
 80054a8:	e7e1      	b.n	800546e <_strtod_l+0x216>
 80054aa:	280f      	cmp	r0, #15
 80054ac:	dceb      	bgt.n	8005486 <_strtod_l+0x22e>
 80054ae:	9808      	ldr	r0, [sp, #32]
 80054b0:	230a      	movs	r3, #10
 80054b2:	fb03 2300 	mla	r3, r3, r0, r2
 80054b6:	9308      	str	r3, [sp, #32]
 80054b8:	e7e5      	b.n	8005486 <_strtod_l+0x22e>
 80054ba:	4629      	mov	r1, r5
 80054bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054be:	1c50      	adds	r0, r2, #1
 80054c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80054c2:	7852      	ldrb	r2, [r2, #1]
 80054c4:	4618      	mov	r0, r3
 80054c6:	460d      	mov	r5, r1
 80054c8:	e7b1      	b.n	800542e <_strtod_l+0x1d6>
 80054ca:	f04f 0900 	mov.w	r9, #0
 80054ce:	2301      	movs	r3, #1
 80054d0:	e77d      	b.n	80053ce <_strtod_l+0x176>
 80054d2:	f04f 0c00 	mov.w	ip, #0
 80054d6:	1ca2      	adds	r2, r4, #2
 80054d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80054da:	78a2      	ldrb	r2, [r4, #2]
 80054dc:	e785      	b.n	80053ea <_strtod_l+0x192>
 80054de:	f04f 0c01 	mov.w	ip, #1
 80054e2:	e7f8      	b.n	80054d6 <_strtod_l+0x27e>
 80054e4:	08007dd4 	.word	0x08007dd4
 80054e8:	08007db1 	.word	0x08007db1
 80054ec:	7ff00000 	.word	0x7ff00000
 80054f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80054f2:	1c51      	adds	r1, r2, #1
 80054f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80054f6:	7852      	ldrb	r2, [r2, #1]
 80054f8:	2a30      	cmp	r2, #48	@ 0x30
 80054fa:	d0f9      	beq.n	80054f0 <_strtod_l+0x298>
 80054fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005500:	2908      	cmp	r1, #8
 8005502:	f63f af78 	bhi.w	80053f6 <_strtod_l+0x19e>
 8005506:	3a30      	subs	r2, #48	@ 0x30
 8005508:	920e      	str	r2, [sp, #56]	@ 0x38
 800550a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800550c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800550e:	f04f 080a 	mov.w	r8, #10
 8005512:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005514:	1c56      	adds	r6, r2, #1
 8005516:	9619      	str	r6, [sp, #100]	@ 0x64
 8005518:	7852      	ldrb	r2, [r2, #1]
 800551a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800551e:	f1be 0f09 	cmp.w	lr, #9
 8005522:	d939      	bls.n	8005598 <_strtod_l+0x340>
 8005524:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005526:	1a76      	subs	r6, r6, r1
 8005528:	2e08      	cmp	r6, #8
 800552a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800552e:	dc03      	bgt.n	8005538 <_strtod_l+0x2e0>
 8005530:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005532:	4588      	cmp	r8, r1
 8005534:	bfa8      	it	ge
 8005536:	4688      	movge	r8, r1
 8005538:	f1bc 0f00 	cmp.w	ip, #0
 800553c:	d001      	beq.n	8005542 <_strtod_l+0x2ea>
 800553e:	f1c8 0800 	rsb	r8, r8, #0
 8005542:	2d00      	cmp	r5, #0
 8005544:	d14e      	bne.n	80055e4 <_strtod_l+0x38c>
 8005546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005548:	4308      	orrs	r0, r1
 800554a:	f47f aebe 	bne.w	80052ca <_strtod_l+0x72>
 800554e:	2b00      	cmp	r3, #0
 8005550:	f47f aed6 	bne.w	8005300 <_strtod_l+0xa8>
 8005554:	2a69      	cmp	r2, #105	@ 0x69
 8005556:	d028      	beq.n	80055aa <_strtod_l+0x352>
 8005558:	dc25      	bgt.n	80055a6 <_strtod_l+0x34e>
 800555a:	2a49      	cmp	r2, #73	@ 0x49
 800555c:	d025      	beq.n	80055aa <_strtod_l+0x352>
 800555e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005560:	f47f aece 	bne.w	8005300 <_strtod_l+0xa8>
 8005564:	499b      	ldr	r1, [pc, #620]	@ (80057d4 <_strtod_l+0x57c>)
 8005566:	a819      	add	r0, sp, #100	@ 0x64
 8005568:	f001 fb4c 	bl	8006c04 <__match>
 800556c:	2800      	cmp	r0, #0
 800556e:	f43f aec7 	beq.w	8005300 <_strtod_l+0xa8>
 8005572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b28      	cmp	r3, #40	@ 0x28
 8005578:	d12e      	bne.n	80055d8 <_strtod_l+0x380>
 800557a:	4997      	ldr	r1, [pc, #604]	@ (80057d8 <_strtod_l+0x580>)
 800557c:	aa1c      	add	r2, sp, #112	@ 0x70
 800557e:	a819      	add	r0, sp, #100	@ 0x64
 8005580:	f001 fb54 	bl	8006c2c <__hexnan>
 8005584:	2805      	cmp	r0, #5
 8005586:	d127      	bne.n	80055d8 <_strtod_l+0x380>
 8005588:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800558a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800558e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005592:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005596:	e698      	b.n	80052ca <_strtod_l+0x72>
 8005598:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800559a:	fb08 2101 	mla	r1, r8, r1, r2
 800559e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80055a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80055a4:	e7b5      	b.n	8005512 <_strtod_l+0x2ba>
 80055a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80055a8:	e7da      	b.n	8005560 <_strtod_l+0x308>
 80055aa:	498c      	ldr	r1, [pc, #560]	@ (80057dc <_strtod_l+0x584>)
 80055ac:	a819      	add	r0, sp, #100	@ 0x64
 80055ae:	f001 fb29 	bl	8006c04 <__match>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f43f aea4 	beq.w	8005300 <_strtod_l+0xa8>
 80055b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055ba:	4989      	ldr	r1, [pc, #548]	@ (80057e0 <_strtod_l+0x588>)
 80055bc:	3b01      	subs	r3, #1
 80055be:	a819      	add	r0, sp, #100	@ 0x64
 80055c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80055c2:	f001 fb1f 	bl	8006c04 <__match>
 80055c6:	b910      	cbnz	r0, 80055ce <_strtod_l+0x376>
 80055c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055ca:	3301      	adds	r3, #1
 80055cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80055ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80057f0 <_strtod_l+0x598>
 80055d2:	f04f 0a00 	mov.w	sl, #0
 80055d6:	e678      	b.n	80052ca <_strtod_l+0x72>
 80055d8:	4882      	ldr	r0, [pc, #520]	@ (80057e4 <_strtod_l+0x58c>)
 80055da:	f001 f881 	bl	80066e0 <nan>
 80055de:	ec5b ab10 	vmov	sl, fp, d0
 80055e2:	e672      	b.n	80052ca <_strtod_l+0x72>
 80055e4:	eba8 0309 	sub.w	r3, r8, r9
 80055e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80055ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ec:	2f00      	cmp	r7, #0
 80055ee:	bf08      	it	eq
 80055f0:	462f      	moveq	r7, r5
 80055f2:	2d10      	cmp	r5, #16
 80055f4:	462c      	mov	r4, r5
 80055f6:	bfa8      	it	ge
 80055f8:	2410      	movge	r4, #16
 80055fa:	f7fa ff83 	bl	8000504 <__aeabi_ui2d>
 80055fe:	2d09      	cmp	r5, #9
 8005600:	4682      	mov	sl, r0
 8005602:	468b      	mov	fp, r1
 8005604:	dc13      	bgt.n	800562e <_strtod_l+0x3d6>
 8005606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	f43f ae5e 	beq.w	80052ca <_strtod_l+0x72>
 800560e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005610:	dd78      	ble.n	8005704 <_strtod_l+0x4ac>
 8005612:	2b16      	cmp	r3, #22
 8005614:	dc5f      	bgt.n	80056d6 <_strtod_l+0x47e>
 8005616:	4974      	ldr	r1, [pc, #464]	@ (80057e8 <_strtod_l+0x590>)
 8005618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800561c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005620:	4652      	mov	r2, sl
 8005622:	465b      	mov	r3, fp
 8005624:	f7fa ffe8 	bl	80005f8 <__aeabi_dmul>
 8005628:	4682      	mov	sl, r0
 800562a:	468b      	mov	fp, r1
 800562c:	e64d      	b.n	80052ca <_strtod_l+0x72>
 800562e:	4b6e      	ldr	r3, [pc, #440]	@ (80057e8 <_strtod_l+0x590>)
 8005630:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005634:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005638:	f7fa ffde 	bl	80005f8 <__aeabi_dmul>
 800563c:	4682      	mov	sl, r0
 800563e:	9808      	ldr	r0, [sp, #32]
 8005640:	468b      	mov	fp, r1
 8005642:	f7fa ff5f 	bl	8000504 <__aeabi_ui2d>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4650      	mov	r0, sl
 800564c:	4659      	mov	r1, fp
 800564e:	f7fa fe1d 	bl	800028c <__adddf3>
 8005652:	2d0f      	cmp	r5, #15
 8005654:	4682      	mov	sl, r0
 8005656:	468b      	mov	fp, r1
 8005658:	ddd5      	ble.n	8005606 <_strtod_l+0x3ae>
 800565a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565c:	1b2c      	subs	r4, r5, r4
 800565e:	441c      	add	r4, r3
 8005660:	2c00      	cmp	r4, #0
 8005662:	f340 8096 	ble.w	8005792 <_strtod_l+0x53a>
 8005666:	f014 030f 	ands.w	r3, r4, #15
 800566a:	d00a      	beq.n	8005682 <_strtod_l+0x42a>
 800566c:	495e      	ldr	r1, [pc, #376]	@ (80057e8 <_strtod_l+0x590>)
 800566e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005672:	4652      	mov	r2, sl
 8005674:	465b      	mov	r3, fp
 8005676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800567a:	f7fa ffbd 	bl	80005f8 <__aeabi_dmul>
 800567e:	4682      	mov	sl, r0
 8005680:	468b      	mov	fp, r1
 8005682:	f034 040f 	bics.w	r4, r4, #15
 8005686:	d073      	beq.n	8005770 <_strtod_l+0x518>
 8005688:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800568c:	dd48      	ble.n	8005720 <_strtod_l+0x4c8>
 800568e:	2400      	movs	r4, #0
 8005690:	46a0      	mov	r8, r4
 8005692:	940a      	str	r4, [sp, #40]	@ 0x28
 8005694:	46a1      	mov	r9, r4
 8005696:	9a05      	ldr	r2, [sp, #20]
 8005698:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80057f0 <_strtod_l+0x598>
 800569c:	2322      	movs	r3, #34	@ 0x22
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	f04f 0a00 	mov.w	sl, #0
 80056a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f43f ae0f 	beq.w	80052ca <_strtod_l+0x72>
 80056ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80056ae:	9805      	ldr	r0, [sp, #20]
 80056b0:	f001 fbaa 	bl	8006e08 <_Bfree>
 80056b4:	9805      	ldr	r0, [sp, #20]
 80056b6:	4649      	mov	r1, r9
 80056b8:	f001 fba6 	bl	8006e08 <_Bfree>
 80056bc:	9805      	ldr	r0, [sp, #20]
 80056be:	4641      	mov	r1, r8
 80056c0:	f001 fba2 	bl	8006e08 <_Bfree>
 80056c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056c6:	9805      	ldr	r0, [sp, #20]
 80056c8:	f001 fb9e 	bl	8006e08 <_Bfree>
 80056cc:	9805      	ldr	r0, [sp, #20]
 80056ce:	4621      	mov	r1, r4
 80056d0:	f001 fb9a 	bl	8006e08 <_Bfree>
 80056d4:	e5f9      	b.n	80052ca <_strtod_l+0x72>
 80056d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80056dc:	4293      	cmp	r3, r2
 80056de:	dbbc      	blt.n	800565a <_strtod_l+0x402>
 80056e0:	4c41      	ldr	r4, [pc, #260]	@ (80057e8 <_strtod_l+0x590>)
 80056e2:	f1c5 050f 	rsb	r5, r5, #15
 80056e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80056ea:	4652      	mov	r2, sl
 80056ec:	465b      	mov	r3, fp
 80056ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056f2:	f7fa ff81 	bl	80005f8 <__aeabi_dmul>
 80056f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f8:	1b5d      	subs	r5, r3, r5
 80056fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80056fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005702:	e78f      	b.n	8005624 <_strtod_l+0x3cc>
 8005704:	3316      	adds	r3, #22
 8005706:	dba8      	blt.n	800565a <_strtod_l+0x402>
 8005708:	4b37      	ldr	r3, [pc, #220]	@ (80057e8 <_strtod_l+0x590>)
 800570a:	eba9 0808 	sub.w	r8, r9, r8
 800570e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005712:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005716:	4650      	mov	r0, sl
 8005718:	4659      	mov	r1, fp
 800571a:	f7fb f897 	bl	800084c <__aeabi_ddiv>
 800571e:	e783      	b.n	8005628 <_strtod_l+0x3d0>
 8005720:	4b32      	ldr	r3, [pc, #200]	@ (80057ec <_strtod_l+0x594>)
 8005722:	9308      	str	r3, [sp, #32]
 8005724:	2300      	movs	r3, #0
 8005726:	1124      	asrs	r4, r4, #4
 8005728:	4650      	mov	r0, sl
 800572a:	4659      	mov	r1, fp
 800572c:	461e      	mov	r6, r3
 800572e:	2c01      	cmp	r4, #1
 8005730:	dc21      	bgt.n	8005776 <_strtod_l+0x51e>
 8005732:	b10b      	cbz	r3, 8005738 <_strtod_l+0x4e0>
 8005734:	4682      	mov	sl, r0
 8005736:	468b      	mov	fp, r1
 8005738:	492c      	ldr	r1, [pc, #176]	@ (80057ec <_strtod_l+0x594>)
 800573a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800573e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005742:	4652      	mov	r2, sl
 8005744:	465b      	mov	r3, fp
 8005746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800574a:	f7fa ff55 	bl	80005f8 <__aeabi_dmul>
 800574e:	4b28      	ldr	r3, [pc, #160]	@ (80057f0 <_strtod_l+0x598>)
 8005750:	460a      	mov	r2, r1
 8005752:	400b      	ands	r3, r1
 8005754:	4927      	ldr	r1, [pc, #156]	@ (80057f4 <_strtod_l+0x59c>)
 8005756:	428b      	cmp	r3, r1
 8005758:	4682      	mov	sl, r0
 800575a:	d898      	bhi.n	800568e <_strtod_l+0x436>
 800575c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005760:	428b      	cmp	r3, r1
 8005762:	bf86      	itte	hi
 8005764:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80057f8 <_strtod_l+0x5a0>
 8005768:	f04f 3aff 	movhi.w	sl, #4294967295
 800576c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005770:	2300      	movs	r3, #0
 8005772:	9308      	str	r3, [sp, #32]
 8005774:	e07a      	b.n	800586c <_strtod_l+0x614>
 8005776:	07e2      	lsls	r2, r4, #31
 8005778:	d505      	bpl.n	8005786 <_strtod_l+0x52e>
 800577a:	9b08      	ldr	r3, [sp, #32]
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa ff3a 	bl	80005f8 <__aeabi_dmul>
 8005784:	2301      	movs	r3, #1
 8005786:	9a08      	ldr	r2, [sp, #32]
 8005788:	3208      	adds	r2, #8
 800578a:	3601      	adds	r6, #1
 800578c:	1064      	asrs	r4, r4, #1
 800578e:	9208      	str	r2, [sp, #32]
 8005790:	e7cd      	b.n	800572e <_strtod_l+0x4d6>
 8005792:	d0ed      	beq.n	8005770 <_strtod_l+0x518>
 8005794:	4264      	negs	r4, r4
 8005796:	f014 020f 	ands.w	r2, r4, #15
 800579a:	d00a      	beq.n	80057b2 <_strtod_l+0x55a>
 800579c:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <_strtod_l+0x590>)
 800579e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057a2:	4650      	mov	r0, sl
 80057a4:	4659      	mov	r1, fp
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f7fb f84f 	bl	800084c <__aeabi_ddiv>
 80057ae:	4682      	mov	sl, r0
 80057b0:	468b      	mov	fp, r1
 80057b2:	1124      	asrs	r4, r4, #4
 80057b4:	d0dc      	beq.n	8005770 <_strtod_l+0x518>
 80057b6:	2c1f      	cmp	r4, #31
 80057b8:	dd20      	ble.n	80057fc <_strtod_l+0x5a4>
 80057ba:	2400      	movs	r4, #0
 80057bc:	46a0      	mov	r8, r4
 80057be:	940a      	str	r4, [sp, #40]	@ 0x28
 80057c0:	46a1      	mov	r9, r4
 80057c2:	9a05      	ldr	r2, [sp, #20]
 80057c4:	2322      	movs	r3, #34	@ 0x22
 80057c6:	f04f 0a00 	mov.w	sl, #0
 80057ca:	f04f 0b00 	mov.w	fp, #0
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e768      	b.n	80056a4 <_strtod_l+0x44c>
 80057d2:	bf00      	nop
 80057d4:	08007dbc 	.word	0x08007dbc
 80057d8:	08007dc0 	.word	0x08007dc0
 80057dc:	08007db3 	.word	0x08007db3
 80057e0:	08007db6 	.word	0x08007db6
 80057e4:	0800816b 	.word	0x0800816b
 80057e8:	08008068 	.word	0x08008068
 80057ec:	08008040 	.word	0x08008040
 80057f0:	7ff00000 	.word	0x7ff00000
 80057f4:	7ca00000 	.word	0x7ca00000
 80057f8:	7fefffff 	.word	0x7fefffff
 80057fc:	f014 0310 	ands.w	r3, r4, #16
 8005800:	bf18      	it	ne
 8005802:	236a      	movne	r3, #106	@ 0x6a
 8005804:	4ea9      	ldr	r6, [pc, #676]	@ (8005aac <_strtod_l+0x854>)
 8005806:	9308      	str	r3, [sp, #32]
 8005808:	4650      	mov	r0, sl
 800580a:	4659      	mov	r1, fp
 800580c:	2300      	movs	r3, #0
 800580e:	07e2      	lsls	r2, r4, #31
 8005810:	d504      	bpl.n	800581c <_strtod_l+0x5c4>
 8005812:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005816:	f7fa feef 	bl	80005f8 <__aeabi_dmul>
 800581a:	2301      	movs	r3, #1
 800581c:	1064      	asrs	r4, r4, #1
 800581e:	f106 0608 	add.w	r6, r6, #8
 8005822:	d1f4      	bne.n	800580e <_strtod_l+0x5b6>
 8005824:	b10b      	cbz	r3, 800582a <_strtod_l+0x5d2>
 8005826:	4682      	mov	sl, r0
 8005828:	468b      	mov	fp, r1
 800582a:	9b08      	ldr	r3, [sp, #32]
 800582c:	b1b3      	cbz	r3, 800585c <_strtod_l+0x604>
 800582e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005832:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005836:	2b00      	cmp	r3, #0
 8005838:	4659      	mov	r1, fp
 800583a:	dd0f      	ble.n	800585c <_strtod_l+0x604>
 800583c:	2b1f      	cmp	r3, #31
 800583e:	dd55      	ble.n	80058ec <_strtod_l+0x694>
 8005840:	2b34      	cmp	r3, #52	@ 0x34
 8005842:	bfde      	ittt	le
 8005844:	f04f 33ff 	movle.w	r3, #4294967295
 8005848:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800584c:	4093      	lslle	r3, r2
 800584e:	f04f 0a00 	mov.w	sl, #0
 8005852:	bfcc      	ite	gt
 8005854:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005858:	ea03 0b01 	andle.w	fp, r3, r1
 800585c:	2200      	movs	r2, #0
 800585e:	2300      	movs	r3, #0
 8005860:	4650      	mov	r0, sl
 8005862:	4659      	mov	r1, fp
 8005864:	f7fb f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8005868:	2800      	cmp	r0, #0
 800586a:	d1a6      	bne.n	80057ba <_strtod_l+0x562>
 800586c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005872:	9805      	ldr	r0, [sp, #20]
 8005874:	462b      	mov	r3, r5
 8005876:	463a      	mov	r2, r7
 8005878:	f001 fb2e 	bl	8006ed8 <__s2b>
 800587c:	900a      	str	r0, [sp, #40]	@ 0x28
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f af05 	beq.w	800568e <_strtod_l+0x436>
 8005884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005886:	2a00      	cmp	r2, #0
 8005888:	eba9 0308 	sub.w	r3, r9, r8
 800588c:	bfa8      	it	ge
 800588e:	2300      	movge	r3, #0
 8005890:	9312      	str	r3, [sp, #72]	@ 0x48
 8005892:	2400      	movs	r4, #0
 8005894:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005898:	9316      	str	r3, [sp, #88]	@ 0x58
 800589a:	46a0      	mov	r8, r4
 800589c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800589e:	9805      	ldr	r0, [sp, #20]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	f001 fa71 	bl	8006d88 <_Balloc>
 80058a6:	4681      	mov	r9, r0
 80058a8:	2800      	cmp	r0, #0
 80058aa:	f43f aef4 	beq.w	8005696 <_strtod_l+0x43e>
 80058ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	3202      	adds	r2, #2
 80058b4:	f103 010c 	add.w	r1, r3, #12
 80058b8:	0092      	lsls	r2, r2, #2
 80058ba:	300c      	adds	r0, #12
 80058bc:	f000 ff00 	bl	80066c0 <memcpy>
 80058c0:	ec4b ab10 	vmov	d0, sl, fp
 80058c4:	9805      	ldr	r0, [sp, #20]
 80058c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80058c8:	a91b      	add	r1, sp, #108	@ 0x6c
 80058ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80058ce:	f001 fe3f 	bl	8007550 <__d2b>
 80058d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f43f aede 	beq.w	8005696 <_strtod_l+0x43e>
 80058da:	9805      	ldr	r0, [sp, #20]
 80058dc:	2101      	movs	r1, #1
 80058de:	f001 fb91 	bl	8007004 <__i2b>
 80058e2:	4680      	mov	r8, r0
 80058e4:	b948      	cbnz	r0, 80058fa <_strtod_l+0x6a2>
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	e6d4      	b.n	8005696 <_strtod_l+0x43e>
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	ea03 0a0a 	and.w	sl, r3, sl
 80058f8:	e7b0      	b.n	800585c <_strtod_l+0x604>
 80058fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80058fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80058fe:	2d00      	cmp	r5, #0
 8005900:	bfab      	itete	ge
 8005902:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005904:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005906:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005908:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800590a:	bfac      	ite	ge
 800590c:	18ef      	addge	r7, r5, r3
 800590e:	1b5e      	sublt	r6, r3, r5
 8005910:	9b08      	ldr	r3, [sp, #32]
 8005912:	1aed      	subs	r5, r5, r3
 8005914:	4415      	add	r5, r2
 8005916:	4b66      	ldr	r3, [pc, #408]	@ (8005ab0 <_strtod_l+0x858>)
 8005918:	3d01      	subs	r5, #1
 800591a:	429d      	cmp	r5, r3
 800591c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005920:	da50      	bge.n	80059c4 <_strtod_l+0x76c>
 8005922:	1b5b      	subs	r3, r3, r5
 8005924:	2b1f      	cmp	r3, #31
 8005926:	eba2 0203 	sub.w	r2, r2, r3
 800592a:	f04f 0101 	mov.w	r1, #1
 800592e:	dc3d      	bgt.n	80059ac <_strtod_l+0x754>
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005936:	2300      	movs	r3, #0
 8005938:	9310      	str	r3, [sp, #64]	@ 0x40
 800593a:	18bd      	adds	r5, r7, r2
 800593c:	9b08      	ldr	r3, [sp, #32]
 800593e:	42af      	cmp	r7, r5
 8005940:	4416      	add	r6, r2
 8005942:	441e      	add	r6, r3
 8005944:	463b      	mov	r3, r7
 8005946:	bfa8      	it	ge
 8005948:	462b      	movge	r3, r5
 800594a:	42b3      	cmp	r3, r6
 800594c:	bfa8      	it	ge
 800594e:	4633      	movge	r3, r6
 8005950:	2b00      	cmp	r3, #0
 8005952:	bfc2      	ittt	gt
 8005954:	1aed      	subgt	r5, r5, r3
 8005956:	1af6      	subgt	r6, r6, r3
 8005958:	1aff      	subgt	r7, r7, r3
 800595a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800595c:	2b00      	cmp	r3, #0
 800595e:	dd16      	ble.n	800598e <_strtod_l+0x736>
 8005960:	4641      	mov	r1, r8
 8005962:	9805      	ldr	r0, [sp, #20]
 8005964:	461a      	mov	r2, r3
 8005966:	f001 fc0d 	bl	8007184 <__pow5mult>
 800596a:	4680      	mov	r8, r0
 800596c:	2800      	cmp	r0, #0
 800596e:	d0ba      	beq.n	80058e6 <_strtod_l+0x68e>
 8005970:	4601      	mov	r1, r0
 8005972:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005974:	9805      	ldr	r0, [sp, #20]
 8005976:	f001 fb5b 	bl	8007030 <__multiply>
 800597a:	900e      	str	r0, [sp, #56]	@ 0x38
 800597c:	2800      	cmp	r0, #0
 800597e:	f43f ae8a 	beq.w	8005696 <_strtod_l+0x43e>
 8005982:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005984:	9805      	ldr	r0, [sp, #20]
 8005986:	f001 fa3f 	bl	8006e08 <_Bfree>
 800598a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800598c:	931a      	str	r3, [sp, #104]	@ 0x68
 800598e:	2d00      	cmp	r5, #0
 8005990:	dc1d      	bgt.n	80059ce <_strtod_l+0x776>
 8005992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	dd23      	ble.n	80059e0 <_strtod_l+0x788>
 8005998:	4649      	mov	r1, r9
 800599a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800599c:	9805      	ldr	r0, [sp, #20]
 800599e:	f001 fbf1 	bl	8007184 <__pow5mult>
 80059a2:	4681      	mov	r9, r0
 80059a4:	b9e0      	cbnz	r0, 80059e0 <_strtod_l+0x788>
 80059a6:	f04f 0900 	mov.w	r9, #0
 80059aa:	e674      	b.n	8005696 <_strtod_l+0x43e>
 80059ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80059b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80059b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80059b8:	35e2      	adds	r5, #226	@ 0xe2
 80059ba:	fa01 f305 	lsl.w	r3, r1, r5
 80059be:	9310      	str	r3, [sp, #64]	@ 0x40
 80059c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80059c2:	e7ba      	b.n	800593a <_strtod_l+0x6e2>
 80059c4:	2300      	movs	r3, #0
 80059c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80059c8:	2301      	movs	r3, #1
 80059ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059cc:	e7b5      	b.n	800593a <_strtod_l+0x6e2>
 80059ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80059d0:	9805      	ldr	r0, [sp, #20]
 80059d2:	462a      	mov	r2, r5
 80059d4:	f001 fc30 	bl	8007238 <__lshift>
 80059d8:	901a      	str	r0, [sp, #104]	@ 0x68
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1d9      	bne.n	8005992 <_strtod_l+0x73a>
 80059de:	e65a      	b.n	8005696 <_strtod_l+0x43e>
 80059e0:	2e00      	cmp	r6, #0
 80059e2:	dd07      	ble.n	80059f4 <_strtod_l+0x79c>
 80059e4:	4649      	mov	r1, r9
 80059e6:	9805      	ldr	r0, [sp, #20]
 80059e8:	4632      	mov	r2, r6
 80059ea:	f001 fc25 	bl	8007238 <__lshift>
 80059ee:	4681      	mov	r9, r0
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d0d8      	beq.n	80059a6 <_strtod_l+0x74e>
 80059f4:	2f00      	cmp	r7, #0
 80059f6:	dd08      	ble.n	8005a0a <_strtod_l+0x7b2>
 80059f8:	4641      	mov	r1, r8
 80059fa:	9805      	ldr	r0, [sp, #20]
 80059fc:	463a      	mov	r2, r7
 80059fe:	f001 fc1b 	bl	8007238 <__lshift>
 8005a02:	4680      	mov	r8, r0
 8005a04:	2800      	cmp	r0, #0
 8005a06:	f43f ae46 	beq.w	8005696 <_strtod_l+0x43e>
 8005a0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a0c:	9805      	ldr	r0, [sp, #20]
 8005a0e:	464a      	mov	r2, r9
 8005a10:	f001 fc9a 	bl	8007348 <__mdiff>
 8005a14:	4604      	mov	r4, r0
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f43f ae3d 	beq.w	8005696 <_strtod_l+0x43e>
 8005a1c:	68c3      	ldr	r3, [r0, #12]
 8005a1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a20:	2300      	movs	r3, #0
 8005a22:	60c3      	str	r3, [r0, #12]
 8005a24:	4641      	mov	r1, r8
 8005a26:	f001 fc73 	bl	8007310 <__mcmp>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	da46      	bge.n	8005abc <_strtod_l+0x864>
 8005a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a30:	ea53 030a 	orrs.w	r3, r3, sl
 8005a34:	d16c      	bne.n	8005b10 <_strtod_l+0x8b8>
 8005a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d168      	bne.n	8005b10 <_strtod_l+0x8b8>
 8005a3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a42:	0d1b      	lsrs	r3, r3, #20
 8005a44:	051b      	lsls	r3, r3, #20
 8005a46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a4a:	d961      	bls.n	8005b10 <_strtod_l+0x8b8>
 8005a4c:	6963      	ldr	r3, [r4, #20]
 8005a4e:	b913      	cbnz	r3, 8005a56 <_strtod_l+0x7fe>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	dd5c      	ble.n	8005b10 <_strtod_l+0x8b8>
 8005a56:	4621      	mov	r1, r4
 8005a58:	2201      	movs	r2, #1
 8005a5a:	9805      	ldr	r0, [sp, #20]
 8005a5c:	f001 fbec 	bl	8007238 <__lshift>
 8005a60:	4641      	mov	r1, r8
 8005a62:	4604      	mov	r4, r0
 8005a64:	f001 fc54 	bl	8007310 <__mcmp>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	dd51      	ble.n	8005b10 <_strtod_l+0x8b8>
 8005a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a70:	9a08      	ldr	r2, [sp, #32]
 8005a72:	0d1b      	lsrs	r3, r3, #20
 8005a74:	051b      	lsls	r3, r3, #20
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	d06b      	beq.n	8005b52 <_strtod_l+0x8fa>
 8005a7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a7e:	d868      	bhi.n	8005b52 <_strtod_l+0x8fa>
 8005a80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005a84:	f67f ae9d 	bls.w	80057c2 <_strtod_l+0x56a>
 8005a88:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <_strtod_l+0x85c>)
 8005a8a:	4650      	mov	r0, sl
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f7fa fdb2 	bl	80005f8 <__aeabi_dmul>
 8005a94:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <_strtod_l+0x860>)
 8005a96:	400b      	ands	r3, r1
 8005a98:	4682      	mov	sl, r0
 8005a9a:	468b      	mov	fp, r1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f ae05 	bne.w	80056ac <_strtod_l+0x454>
 8005aa2:	9a05      	ldr	r2, [sp, #20]
 8005aa4:	2322      	movs	r3, #34	@ 0x22
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e600      	b.n	80056ac <_strtod_l+0x454>
 8005aaa:	bf00      	nop
 8005aac:	08007de8 	.word	0x08007de8
 8005ab0:	fffffc02 	.word	0xfffffc02
 8005ab4:	39500000 	.word	0x39500000
 8005ab8:	7ff00000 	.word	0x7ff00000
 8005abc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005ac0:	d165      	bne.n	8005b8e <_strtod_l+0x936>
 8005ac2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ac8:	b35a      	cbz	r2, 8005b22 <_strtod_l+0x8ca>
 8005aca:	4a9f      	ldr	r2, [pc, #636]	@ (8005d48 <_strtod_l+0xaf0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d12b      	bne.n	8005b28 <_strtod_l+0x8d0>
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	4651      	mov	r1, sl
 8005ad4:	b303      	cbz	r3, 8005b18 <_strtod_l+0x8c0>
 8005ad6:	4b9d      	ldr	r3, [pc, #628]	@ (8005d4c <_strtod_l+0xaf4>)
 8005ad8:	465a      	mov	r2, fp
 8005ada:	4013      	ands	r3, r2
 8005adc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	d81b      	bhi.n	8005b1e <_strtod_l+0x8c6>
 8005ae6:	0d1b      	lsrs	r3, r3, #20
 8005ae8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	4299      	cmp	r1, r3
 8005af2:	d119      	bne.n	8005b28 <_strtod_l+0x8d0>
 8005af4:	4b96      	ldr	r3, [pc, #600]	@ (8005d50 <_strtod_l+0xaf8>)
 8005af6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d102      	bne.n	8005b02 <_strtod_l+0x8aa>
 8005afc:	3101      	adds	r1, #1
 8005afe:	f43f adca 	beq.w	8005696 <_strtod_l+0x43e>
 8005b02:	4b92      	ldr	r3, [pc, #584]	@ (8005d4c <_strtod_l+0xaf4>)
 8005b04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b06:	401a      	ands	r2, r3
 8005b08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005b0c:	f04f 0a00 	mov.w	sl, #0
 8005b10:	9b08      	ldr	r3, [sp, #32]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1b8      	bne.n	8005a88 <_strtod_l+0x830>
 8005b16:	e5c9      	b.n	80056ac <_strtod_l+0x454>
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	e7e8      	b.n	8005af0 <_strtod_l+0x898>
 8005b1e:	4613      	mov	r3, r2
 8005b20:	e7e6      	b.n	8005af0 <_strtod_l+0x898>
 8005b22:	ea53 030a 	orrs.w	r3, r3, sl
 8005b26:	d0a1      	beq.n	8005a6c <_strtod_l+0x814>
 8005b28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005b2a:	b1db      	cbz	r3, 8005b64 <_strtod_l+0x90c>
 8005b2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b2e:	4213      	tst	r3, r2
 8005b30:	d0ee      	beq.n	8005b10 <_strtod_l+0x8b8>
 8005b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b34:	9a08      	ldr	r2, [sp, #32]
 8005b36:	4650      	mov	r0, sl
 8005b38:	4659      	mov	r1, fp
 8005b3a:	b1bb      	cbz	r3, 8005b6c <_strtod_l+0x914>
 8005b3c:	f7ff fb6e 	bl	800521c <sulp>
 8005b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b44:	ec53 2b10 	vmov	r2, r3, d0
 8005b48:	f7fa fba0 	bl	800028c <__adddf3>
 8005b4c:	4682      	mov	sl, r0
 8005b4e:	468b      	mov	fp, r1
 8005b50:	e7de      	b.n	8005b10 <_strtod_l+0x8b8>
 8005b52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005b56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005b5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005b5e:	f04f 3aff 	mov.w	sl, #4294967295
 8005b62:	e7d5      	b.n	8005b10 <_strtod_l+0x8b8>
 8005b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b66:	ea13 0f0a 	tst.w	r3, sl
 8005b6a:	e7e1      	b.n	8005b30 <_strtod_l+0x8d8>
 8005b6c:	f7ff fb56 	bl	800521c <sulp>
 8005b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b74:	ec53 2b10 	vmov	r2, r3, d0
 8005b78:	f7fa fb86 	bl	8000288 <__aeabi_dsub>
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4682      	mov	sl, r0
 8005b82:	468b      	mov	fp, r1
 8005b84:	f7fa ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d0c1      	beq.n	8005b10 <_strtod_l+0x8b8>
 8005b8c:	e619      	b.n	80057c2 <_strtod_l+0x56a>
 8005b8e:	4641      	mov	r1, r8
 8005b90:	4620      	mov	r0, r4
 8005b92:	f001 fd35 	bl	8007600 <__ratio>
 8005b96:	ec57 6b10 	vmov	r6, r7, d0
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4639      	mov	r1, r7
 8005ba4:	f7fa ffa4 	bl	8000af0 <__aeabi_dcmple>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d06f      	beq.n	8005c8c <_strtod_l+0xa34>
 8005bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d17a      	bne.n	8005ca8 <_strtod_l+0xa50>
 8005bb2:	f1ba 0f00 	cmp.w	sl, #0
 8005bb6:	d158      	bne.n	8005c6a <_strtod_l+0xa12>
 8005bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d15a      	bne.n	8005c78 <_strtod_l+0xa20>
 8005bc2:	4b64      	ldr	r3, [pc, #400]	@ (8005d54 <_strtod_l+0xafc>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	f7fa ff87 	bl	8000adc <__aeabi_dcmplt>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d159      	bne.n	8005c86 <_strtod_l+0xa2e>
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	4b60      	ldr	r3, [pc, #384]	@ (8005d58 <_strtod_l+0xb00>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f7fa fd0d 	bl	80005f8 <__aeabi_dmul>
 8005bde:	4606      	mov	r6, r0
 8005be0:	460f      	mov	r7, r1
 8005be2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005be6:	9606      	str	r6, [sp, #24]
 8005be8:	9307      	str	r3, [sp, #28]
 8005bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bee:	4d57      	ldr	r5, [pc, #348]	@ (8005d4c <_strtod_l+0xaf4>)
 8005bf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bf6:	401d      	ands	r5, r3
 8005bf8:	4b58      	ldr	r3, [pc, #352]	@ (8005d5c <_strtod_l+0xb04>)
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	f040 80b2 	bne.w	8005d64 <_strtod_l+0xb0c>
 8005c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005c06:	ec4b ab10 	vmov	d0, sl, fp
 8005c0a:	f001 fc31 	bl	8007470 <__ulp>
 8005c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c12:	ec51 0b10 	vmov	r0, r1, d0
 8005c16:	f7fa fcef 	bl	80005f8 <__aeabi_dmul>
 8005c1a:	4652      	mov	r2, sl
 8005c1c:	465b      	mov	r3, fp
 8005c1e:	f7fa fb35 	bl	800028c <__adddf3>
 8005c22:	460b      	mov	r3, r1
 8005c24:	4949      	ldr	r1, [pc, #292]	@ (8005d4c <_strtod_l+0xaf4>)
 8005c26:	4a4e      	ldr	r2, [pc, #312]	@ (8005d60 <_strtod_l+0xb08>)
 8005c28:	4019      	ands	r1, r3
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	4682      	mov	sl, r0
 8005c2e:	d942      	bls.n	8005cb6 <_strtod_l+0xa5e>
 8005c30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005c32:	4b47      	ldr	r3, [pc, #284]	@ (8005d50 <_strtod_l+0xaf8>)
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d103      	bne.n	8005c40 <_strtod_l+0x9e8>
 8005c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	f43f ad2b 	beq.w	8005696 <_strtod_l+0x43e>
 8005c40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005d50 <_strtod_l+0xaf8>
 8005c44:	f04f 3aff 	mov.w	sl, #4294967295
 8005c48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c4a:	9805      	ldr	r0, [sp, #20]
 8005c4c:	f001 f8dc 	bl	8006e08 <_Bfree>
 8005c50:	9805      	ldr	r0, [sp, #20]
 8005c52:	4649      	mov	r1, r9
 8005c54:	f001 f8d8 	bl	8006e08 <_Bfree>
 8005c58:	9805      	ldr	r0, [sp, #20]
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	f001 f8d4 	bl	8006e08 <_Bfree>
 8005c60:	9805      	ldr	r0, [sp, #20]
 8005c62:	4621      	mov	r1, r4
 8005c64:	f001 f8d0 	bl	8006e08 <_Bfree>
 8005c68:	e618      	b.n	800589c <_strtod_l+0x644>
 8005c6a:	f1ba 0f01 	cmp.w	sl, #1
 8005c6e:	d103      	bne.n	8005c78 <_strtod_l+0xa20>
 8005c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f43f ada5 	beq.w	80057c2 <_strtod_l+0x56a>
 8005c78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005d28 <_strtod_l+0xad0>
 8005c7c:	4f35      	ldr	r7, [pc, #212]	@ (8005d54 <_strtod_l+0xafc>)
 8005c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005c82:	2600      	movs	r6, #0
 8005c84:	e7b1      	b.n	8005bea <_strtod_l+0x992>
 8005c86:	4f34      	ldr	r7, [pc, #208]	@ (8005d58 <_strtod_l+0xb00>)
 8005c88:	2600      	movs	r6, #0
 8005c8a:	e7aa      	b.n	8005be2 <_strtod_l+0x98a>
 8005c8c:	4b32      	ldr	r3, [pc, #200]	@ (8005d58 <_strtod_l+0xb00>)
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	2200      	movs	r2, #0
 8005c94:	f7fa fcb0 	bl	80005f8 <__aeabi_dmul>
 8005c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	460f      	mov	r7, r1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d09f      	beq.n	8005be2 <_strtod_l+0x98a>
 8005ca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005ca6:	e7a0      	b.n	8005bea <_strtod_l+0x992>
 8005ca8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005d30 <_strtod_l+0xad8>
 8005cac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005cb0:	ec57 6b17 	vmov	r6, r7, d7
 8005cb4:	e799      	b.n	8005bea <_strtod_l+0x992>
 8005cb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005cba:	9b08      	ldr	r3, [sp, #32]
 8005cbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1c1      	bne.n	8005c48 <_strtod_l+0x9f0>
 8005cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005cc8:	0d1b      	lsrs	r3, r3, #20
 8005cca:	051b      	lsls	r3, r3, #20
 8005ccc:	429d      	cmp	r5, r3
 8005cce:	d1bb      	bne.n	8005c48 <_strtod_l+0x9f0>
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	f7fa ffc8 	bl	8000c68 <__aeabi_d2lz>
 8005cd8:	f7fa fc60 	bl	800059c <__aeabi_l2d>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa fad0 	bl	8000288 <__aeabi_dsub>
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4602      	mov	r2, r0
 8005cec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cf6:	ea46 060a 	orr.w	r6, r6, sl
 8005cfa:	431e      	orrs	r6, r3
 8005cfc:	d06f      	beq.n	8005dde <_strtod_l+0xb86>
 8005cfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d38 <_strtod_l+0xae0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa feea 	bl	8000adc <__aeabi_dcmplt>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f47f accf 	bne.w	80056ac <_strtod_l+0x454>
 8005d0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005d40 <_strtod_l+0xae8>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d18:	f7fa fefe 	bl	8000b18 <__aeabi_dcmpgt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d093      	beq.n	8005c48 <_strtod_l+0x9f0>
 8005d20:	e4c4      	b.n	80056ac <_strtod_l+0x454>
 8005d22:	bf00      	nop
 8005d24:	f3af 8000 	nop.w
 8005d28:	00000000 	.word	0x00000000
 8005d2c:	bff00000 	.word	0xbff00000
 8005d30:	00000000 	.word	0x00000000
 8005d34:	3ff00000 	.word	0x3ff00000
 8005d38:	94a03595 	.word	0x94a03595
 8005d3c:	3fdfffff 	.word	0x3fdfffff
 8005d40:	35afe535 	.word	0x35afe535
 8005d44:	3fe00000 	.word	0x3fe00000
 8005d48:	000fffff 	.word	0x000fffff
 8005d4c:	7ff00000 	.word	0x7ff00000
 8005d50:	7fefffff 	.word	0x7fefffff
 8005d54:	3ff00000 	.word	0x3ff00000
 8005d58:	3fe00000 	.word	0x3fe00000
 8005d5c:	7fe00000 	.word	0x7fe00000
 8005d60:	7c9fffff 	.word	0x7c9fffff
 8005d64:	9b08      	ldr	r3, [sp, #32]
 8005d66:	b323      	cbz	r3, 8005db2 <_strtod_l+0xb5a>
 8005d68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005d6c:	d821      	bhi.n	8005db2 <_strtod_l+0xb5a>
 8005d6e:	a328      	add	r3, pc, #160	@ (adr r3, 8005e10 <_strtod_l+0xbb8>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	4630      	mov	r0, r6
 8005d76:	4639      	mov	r1, r7
 8005d78:	f7fa feba 	bl	8000af0 <__aeabi_dcmple>
 8005d7c:	b1a0      	cbz	r0, 8005da8 <_strtod_l+0xb50>
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4630      	mov	r0, r6
 8005d82:	f7fa fee9 	bl	8000b58 <__aeabi_d2uiz>
 8005d86:	2801      	cmp	r0, #1
 8005d88:	bf38      	it	cc
 8005d8a:	2001      	movcc	r0, #1
 8005d8c:	f7fa fbba 	bl	8000504 <__aeabi_ui2d>
 8005d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d92:	4606      	mov	r6, r0
 8005d94:	460f      	mov	r7, r1
 8005d96:	b9fb      	cbnz	r3, 8005dd8 <_strtod_l+0xb80>
 8005d98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8005d9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005da0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005da4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005da8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005daa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005dae:	1b5b      	subs	r3, r3, r5
 8005db0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005db2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005db6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005dba:	f001 fb59 	bl	8007470 <__ulp>
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	ec53 2b10 	vmov	r2, r3, d0
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	f7fa fc17 	bl	80005f8 <__aeabi_dmul>
 8005dca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005dce:	f7fa fa5d 	bl	800028c <__adddf3>
 8005dd2:	4682      	mov	sl, r0
 8005dd4:	468b      	mov	fp, r1
 8005dd6:	e770      	b.n	8005cba <_strtod_l+0xa62>
 8005dd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005ddc:	e7e0      	b.n	8005da0 <_strtod_l+0xb48>
 8005dde:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e18 <_strtod_l+0xbc0>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fe7a 	bl	8000adc <__aeabi_dcmplt>
 8005de8:	e798      	b.n	8005d1c <_strtod_l+0xac4>
 8005dea:	2300      	movs	r3, #0
 8005dec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	f7ff ba6d 	b.w	80052d2 <_strtod_l+0x7a>
 8005df8:	2a65      	cmp	r2, #101	@ 0x65
 8005dfa:	f43f ab66 	beq.w	80054ca <_strtod_l+0x272>
 8005dfe:	2a45      	cmp	r2, #69	@ 0x45
 8005e00:	f43f ab63 	beq.w	80054ca <_strtod_l+0x272>
 8005e04:	2301      	movs	r3, #1
 8005e06:	f7ff bb9e 	b.w	8005546 <_strtod_l+0x2ee>
 8005e0a:	bf00      	nop
 8005e0c:	f3af 8000 	nop.w
 8005e10:	ffc00000 	.word	0xffc00000
 8005e14:	41dfffff 	.word	0x41dfffff
 8005e18:	94a03595 	.word	0x94a03595
 8005e1c:	3fcfffff 	.word	0x3fcfffff

08005e20 <_strtod_r>:
 8005e20:	4b01      	ldr	r3, [pc, #4]	@ (8005e28 <_strtod_r+0x8>)
 8005e22:	f7ff ba19 	b.w	8005258 <_strtod_l>
 8005e26:	bf00      	nop
 8005e28:	20000068 	.word	0x20000068

08005e2c <_strtol_l.constprop.0>:
 8005e2c:	2b24      	cmp	r3, #36	@ 0x24
 8005e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e32:	4686      	mov	lr, r0
 8005e34:	4690      	mov	r8, r2
 8005e36:	d801      	bhi.n	8005e3c <_strtol_l.constprop.0+0x10>
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d106      	bne.n	8005e4a <_strtol_l.constprop.0+0x1e>
 8005e3c:	f7ff f8c2 	bl	8004fc4 <__errno>
 8005e40:	2316      	movs	r3, #22
 8005e42:	6003      	str	r3, [r0, #0]
 8005e44:	2000      	movs	r0, #0
 8005e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4a:	4834      	ldr	r0, [pc, #208]	@ (8005f1c <_strtol_l.constprop.0+0xf0>)
 8005e4c:	460d      	mov	r5, r1
 8005e4e:	462a      	mov	r2, r5
 8005e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e54:	5d06      	ldrb	r6, [r0, r4]
 8005e56:	f016 0608 	ands.w	r6, r6, #8
 8005e5a:	d1f8      	bne.n	8005e4e <_strtol_l.constprop.0+0x22>
 8005e5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005e5e:	d12d      	bne.n	8005ebc <_strtol_l.constprop.0+0x90>
 8005e60:	782c      	ldrb	r4, [r5, #0]
 8005e62:	2601      	movs	r6, #1
 8005e64:	1c95      	adds	r5, r2, #2
 8005e66:	f033 0210 	bics.w	r2, r3, #16
 8005e6a:	d109      	bne.n	8005e80 <_strtol_l.constprop.0+0x54>
 8005e6c:	2c30      	cmp	r4, #48	@ 0x30
 8005e6e:	d12a      	bne.n	8005ec6 <_strtol_l.constprop.0+0x9a>
 8005e70:	782a      	ldrb	r2, [r5, #0]
 8005e72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005e76:	2a58      	cmp	r2, #88	@ 0x58
 8005e78:	d125      	bne.n	8005ec6 <_strtol_l.constprop.0+0x9a>
 8005e7a:	786c      	ldrb	r4, [r5, #1]
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	3502      	adds	r5, #2
 8005e80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005e84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e88:	2200      	movs	r2, #0
 8005e8a:	fbbc f9f3 	udiv	r9, ip, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	fb03 ca19 	mls	sl, r3, r9, ip
 8005e94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005e98:	2f09      	cmp	r7, #9
 8005e9a:	d81b      	bhi.n	8005ed4 <_strtol_l.constprop.0+0xa8>
 8005e9c:	463c      	mov	r4, r7
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	dd27      	ble.n	8005ef2 <_strtol_l.constprop.0+0xc6>
 8005ea2:	1c57      	adds	r7, r2, #1
 8005ea4:	d007      	beq.n	8005eb6 <_strtol_l.constprop.0+0x8a>
 8005ea6:	4581      	cmp	r9, r0
 8005ea8:	d320      	bcc.n	8005eec <_strtol_l.constprop.0+0xc0>
 8005eaa:	d101      	bne.n	8005eb0 <_strtol_l.constprop.0+0x84>
 8005eac:	45a2      	cmp	sl, r4
 8005eae:	db1d      	blt.n	8005eec <_strtol_l.constprop.0+0xc0>
 8005eb0:	fb00 4003 	mla	r0, r0, r3, r4
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eba:	e7eb      	b.n	8005e94 <_strtol_l.constprop.0+0x68>
 8005ebc:	2c2b      	cmp	r4, #43	@ 0x2b
 8005ebe:	bf04      	itt	eq
 8005ec0:	782c      	ldrbeq	r4, [r5, #0]
 8005ec2:	1c95      	addeq	r5, r2, #2
 8005ec4:	e7cf      	b.n	8005e66 <_strtol_l.constprop.0+0x3a>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1da      	bne.n	8005e80 <_strtol_l.constprop.0+0x54>
 8005eca:	2c30      	cmp	r4, #48	@ 0x30
 8005ecc:	bf0c      	ite	eq
 8005ece:	2308      	moveq	r3, #8
 8005ed0:	230a      	movne	r3, #10
 8005ed2:	e7d5      	b.n	8005e80 <_strtol_l.constprop.0+0x54>
 8005ed4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ed8:	2f19      	cmp	r7, #25
 8005eda:	d801      	bhi.n	8005ee0 <_strtol_l.constprop.0+0xb4>
 8005edc:	3c37      	subs	r4, #55	@ 0x37
 8005ede:	e7de      	b.n	8005e9e <_strtol_l.constprop.0+0x72>
 8005ee0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005ee4:	2f19      	cmp	r7, #25
 8005ee6:	d804      	bhi.n	8005ef2 <_strtol_l.constprop.0+0xc6>
 8005ee8:	3c57      	subs	r4, #87	@ 0x57
 8005eea:	e7d8      	b.n	8005e9e <_strtol_l.constprop.0+0x72>
 8005eec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef0:	e7e1      	b.n	8005eb6 <_strtol_l.constprop.0+0x8a>
 8005ef2:	1c53      	adds	r3, r2, #1
 8005ef4:	d108      	bne.n	8005f08 <_strtol_l.constprop.0+0xdc>
 8005ef6:	2322      	movs	r3, #34	@ 0x22
 8005ef8:	f8ce 3000 	str.w	r3, [lr]
 8005efc:	4660      	mov	r0, ip
 8005efe:	f1b8 0f00 	cmp.w	r8, #0
 8005f02:	d0a0      	beq.n	8005e46 <_strtol_l.constprop.0+0x1a>
 8005f04:	1e69      	subs	r1, r5, #1
 8005f06:	e006      	b.n	8005f16 <_strtol_l.constprop.0+0xea>
 8005f08:	b106      	cbz	r6, 8005f0c <_strtol_l.constprop.0+0xe0>
 8005f0a:	4240      	negs	r0, r0
 8005f0c:	f1b8 0f00 	cmp.w	r8, #0
 8005f10:	d099      	beq.n	8005e46 <_strtol_l.constprop.0+0x1a>
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	d1f6      	bne.n	8005f04 <_strtol_l.constprop.0+0xd8>
 8005f16:	f8c8 1000 	str.w	r1, [r8]
 8005f1a:	e794      	b.n	8005e46 <_strtol_l.constprop.0+0x1a>
 8005f1c:	08007e11 	.word	0x08007e11

08005f20 <_strtol_r>:
 8005f20:	f7ff bf84 	b.w	8005e2c <_strtol_l.constprop.0>

08005f24 <__ssputs_r>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	688e      	ldr	r6, [r1, #8]
 8005f2a:	461f      	mov	r7, r3
 8005f2c:	42be      	cmp	r6, r7
 8005f2e:	680b      	ldr	r3, [r1, #0]
 8005f30:	4682      	mov	sl, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	4690      	mov	r8, r2
 8005f36:	d82d      	bhi.n	8005f94 <__ssputs_r+0x70>
 8005f38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f40:	d026      	beq.n	8005f90 <__ssputs_r+0x6c>
 8005f42:	6965      	ldr	r5, [r4, #20]
 8005f44:	6909      	ldr	r1, [r1, #16]
 8005f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f4a:	eba3 0901 	sub.w	r9, r3, r1
 8005f4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f52:	1c7b      	adds	r3, r7, #1
 8005f54:	444b      	add	r3, r9
 8005f56:	106d      	asrs	r5, r5, #1
 8005f58:	429d      	cmp	r5, r3
 8005f5a:	bf38      	it	cc
 8005f5c:	461d      	movcc	r5, r3
 8005f5e:	0553      	lsls	r3, r2, #21
 8005f60:	d527      	bpl.n	8005fb2 <__ssputs_r+0x8e>
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7ff f8ce 	bl	8005104 <_malloc_r>
 8005f68:	4606      	mov	r6, r0
 8005f6a:	b360      	cbz	r0, 8005fc6 <__ssputs_r+0xa2>
 8005f6c:	6921      	ldr	r1, [r4, #16]
 8005f6e:	464a      	mov	r2, r9
 8005f70:	f000 fba6 	bl	80066c0 <memcpy>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	6126      	str	r6, [r4, #16]
 8005f82:	6165      	str	r5, [r4, #20]
 8005f84:	444e      	add	r6, r9
 8005f86:	eba5 0509 	sub.w	r5, r5, r9
 8005f8a:	6026      	str	r6, [r4, #0]
 8005f8c:	60a5      	str	r5, [r4, #8]
 8005f8e:	463e      	mov	r6, r7
 8005f90:	42be      	cmp	r6, r7
 8005f92:	d900      	bls.n	8005f96 <__ssputs_r+0x72>
 8005f94:	463e      	mov	r6, r7
 8005f96:	6820      	ldr	r0, [r4, #0]
 8005f98:	4632      	mov	r2, r6
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	f000 fb54 	bl	8006648 <memmove>
 8005fa0:	68a3      	ldr	r3, [r4, #8]
 8005fa2:	1b9b      	subs	r3, r3, r6
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	4433      	add	r3, r6
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	2000      	movs	r0, #0
 8005fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	f001 fb9a 	bl	80076ec <_realloc_r>
 8005fb8:	4606      	mov	r6, r0
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d1e0      	bne.n	8005f80 <__ssputs_r+0x5c>
 8005fbe:	6921      	ldr	r1, [r4, #16]
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	f7ff f833 	bl	800502c <_free_r>
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	f8ca 3000 	str.w	r3, [sl]
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	e7e9      	b.n	8005fae <__ssputs_r+0x8a>
	...

08005fdc <_svfiprintf_r>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	4698      	mov	r8, r3
 8005fe2:	898b      	ldrh	r3, [r1, #12]
 8005fe4:	061b      	lsls	r3, r3, #24
 8005fe6:	b09d      	sub	sp, #116	@ 0x74
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	4614      	mov	r4, r2
 8005fee:	d510      	bpl.n	8006012 <_svfiprintf_r+0x36>
 8005ff0:	690b      	ldr	r3, [r1, #16]
 8005ff2:	b973      	cbnz	r3, 8006012 <_svfiprintf_r+0x36>
 8005ff4:	2140      	movs	r1, #64	@ 0x40
 8005ff6:	f7ff f885 	bl	8005104 <_malloc_r>
 8005ffa:	6028      	str	r0, [r5, #0]
 8005ffc:	6128      	str	r0, [r5, #16]
 8005ffe:	b930      	cbnz	r0, 800600e <_svfiprintf_r+0x32>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	b01d      	add	sp, #116	@ 0x74
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	2340      	movs	r3, #64	@ 0x40
 8006010:	616b      	str	r3, [r5, #20]
 8006012:	2300      	movs	r3, #0
 8006014:	9309      	str	r3, [sp, #36]	@ 0x24
 8006016:	2320      	movs	r3, #32
 8006018:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800601c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006020:	2330      	movs	r3, #48	@ 0x30
 8006022:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061c0 <_svfiprintf_r+0x1e4>
 8006026:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800602a:	f04f 0901 	mov.w	r9, #1
 800602e:	4623      	mov	r3, r4
 8006030:	469a      	mov	sl, r3
 8006032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006036:	b10a      	cbz	r2, 800603c <_svfiprintf_r+0x60>
 8006038:	2a25      	cmp	r2, #37	@ 0x25
 800603a:	d1f9      	bne.n	8006030 <_svfiprintf_r+0x54>
 800603c:	ebba 0b04 	subs.w	fp, sl, r4
 8006040:	d00b      	beq.n	800605a <_svfiprintf_r+0x7e>
 8006042:	465b      	mov	r3, fp
 8006044:	4622      	mov	r2, r4
 8006046:	4629      	mov	r1, r5
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff ff6b 	bl	8005f24 <__ssputs_r>
 800604e:	3001      	adds	r0, #1
 8006050:	f000 80a7 	beq.w	80061a2 <_svfiprintf_r+0x1c6>
 8006054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006056:	445a      	add	r2, fp
 8006058:	9209      	str	r2, [sp, #36]	@ 0x24
 800605a:	f89a 3000 	ldrb.w	r3, [sl]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 809f 	beq.w	80061a2 <_svfiprintf_r+0x1c6>
 8006064:	2300      	movs	r3, #0
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606e:	f10a 0a01 	add.w	sl, sl, #1
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800607a:	931a      	str	r3, [sp, #104]	@ 0x68
 800607c:	4654      	mov	r4, sl
 800607e:	2205      	movs	r2, #5
 8006080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006084:	484e      	ldr	r0, [pc, #312]	@ (80061c0 <_svfiprintf_r+0x1e4>)
 8006086:	f7fa f8ab 	bl	80001e0 <memchr>
 800608a:	9a04      	ldr	r2, [sp, #16]
 800608c:	b9d8      	cbnz	r0, 80060c6 <_svfiprintf_r+0xea>
 800608e:	06d0      	lsls	r0, r2, #27
 8006090:	bf44      	itt	mi
 8006092:	2320      	movmi	r3, #32
 8006094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006098:	0711      	lsls	r1, r2, #28
 800609a:	bf44      	itt	mi
 800609c:	232b      	movmi	r3, #43	@ 0x2b
 800609e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060a2:	f89a 3000 	ldrb.w	r3, [sl]
 80060a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80060a8:	d015      	beq.n	80060d6 <_svfiprintf_r+0xfa>
 80060aa:	9a07      	ldr	r2, [sp, #28]
 80060ac:	4654      	mov	r4, sl
 80060ae:	2000      	movs	r0, #0
 80060b0:	f04f 0c0a 	mov.w	ip, #10
 80060b4:	4621      	mov	r1, r4
 80060b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ba:	3b30      	subs	r3, #48	@ 0x30
 80060bc:	2b09      	cmp	r3, #9
 80060be:	d94b      	bls.n	8006158 <_svfiprintf_r+0x17c>
 80060c0:	b1b0      	cbz	r0, 80060f0 <_svfiprintf_r+0x114>
 80060c2:	9207      	str	r2, [sp, #28]
 80060c4:	e014      	b.n	80060f0 <_svfiprintf_r+0x114>
 80060c6:	eba0 0308 	sub.w	r3, r0, r8
 80060ca:	fa09 f303 	lsl.w	r3, r9, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	9304      	str	r3, [sp, #16]
 80060d2:	46a2      	mov	sl, r4
 80060d4:	e7d2      	b.n	800607c <_svfiprintf_r+0xa0>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	1d19      	adds	r1, r3, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	9103      	str	r1, [sp, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfbb      	ittet	lt
 80060e2:	425b      	neglt	r3, r3
 80060e4:	f042 0202 	orrlt.w	r2, r2, #2
 80060e8:	9307      	strge	r3, [sp, #28]
 80060ea:	9307      	strlt	r3, [sp, #28]
 80060ec:	bfb8      	it	lt
 80060ee:	9204      	strlt	r2, [sp, #16]
 80060f0:	7823      	ldrb	r3, [r4, #0]
 80060f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80060f4:	d10a      	bne.n	800610c <_svfiprintf_r+0x130>
 80060f6:	7863      	ldrb	r3, [r4, #1]
 80060f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060fa:	d132      	bne.n	8006162 <_svfiprintf_r+0x186>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	1d1a      	adds	r2, r3, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	9203      	str	r2, [sp, #12]
 8006104:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006108:	3402      	adds	r4, #2
 800610a:	9305      	str	r3, [sp, #20]
 800610c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061d0 <_svfiprintf_r+0x1f4>
 8006110:	7821      	ldrb	r1, [r4, #0]
 8006112:	2203      	movs	r2, #3
 8006114:	4650      	mov	r0, sl
 8006116:	f7fa f863 	bl	80001e0 <memchr>
 800611a:	b138      	cbz	r0, 800612c <_svfiprintf_r+0x150>
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	eba0 000a 	sub.w	r0, r0, sl
 8006122:	2240      	movs	r2, #64	@ 0x40
 8006124:	4082      	lsls	r2, r0
 8006126:	4313      	orrs	r3, r2
 8006128:	3401      	adds	r4, #1
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006130:	4824      	ldr	r0, [pc, #144]	@ (80061c4 <_svfiprintf_r+0x1e8>)
 8006132:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006136:	2206      	movs	r2, #6
 8006138:	f7fa f852 	bl	80001e0 <memchr>
 800613c:	2800      	cmp	r0, #0
 800613e:	d036      	beq.n	80061ae <_svfiprintf_r+0x1d2>
 8006140:	4b21      	ldr	r3, [pc, #132]	@ (80061c8 <_svfiprintf_r+0x1ec>)
 8006142:	bb1b      	cbnz	r3, 800618c <_svfiprintf_r+0x1b0>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	3307      	adds	r3, #7
 8006148:	f023 0307 	bic.w	r3, r3, #7
 800614c:	3308      	adds	r3, #8
 800614e:	9303      	str	r3, [sp, #12]
 8006150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006152:	4433      	add	r3, r6
 8006154:	9309      	str	r3, [sp, #36]	@ 0x24
 8006156:	e76a      	b.n	800602e <_svfiprintf_r+0x52>
 8006158:	fb0c 3202 	mla	r2, ip, r2, r3
 800615c:	460c      	mov	r4, r1
 800615e:	2001      	movs	r0, #1
 8006160:	e7a8      	b.n	80060b4 <_svfiprintf_r+0xd8>
 8006162:	2300      	movs	r3, #0
 8006164:	3401      	adds	r4, #1
 8006166:	9305      	str	r3, [sp, #20]
 8006168:	4619      	mov	r1, r3
 800616a:	f04f 0c0a 	mov.w	ip, #10
 800616e:	4620      	mov	r0, r4
 8006170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006174:	3a30      	subs	r2, #48	@ 0x30
 8006176:	2a09      	cmp	r2, #9
 8006178:	d903      	bls.n	8006182 <_svfiprintf_r+0x1a6>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0c6      	beq.n	800610c <_svfiprintf_r+0x130>
 800617e:	9105      	str	r1, [sp, #20]
 8006180:	e7c4      	b.n	800610c <_svfiprintf_r+0x130>
 8006182:	fb0c 2101 	mla	r1, ip, r1, r2
 8006186:	4604      	mov	r4, r0
 8006188:	2301      	movs	r3, #1
 800618a:	e7f0      	b.n	800616e <_svfiprintf_r+0x192>
 800618c:	ab03      	add	r3, sp, #12
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	462a      	mov	r2, r5
 8006192:	4b0e      	ldr	r3, [pc, #56]	@ (80061cc <_svfiprintf_r+0x1f0>)
 8006194:	a904      	add	r1, sp, #16
 8006196:	4638      	mov	r0, r7
 8006198:	f3af 8000 	nop.w
 800619c:	1c42      	adds	r2, r0, #1
 800619e:	4606      	mov	r6, r0
 80061a0:	d1d6      	bne.n	8006150 <_svfiprintf_r+0x174>
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	065b      	lsls	r3, r3, #25
 80061a6:	f53f af2d 	bmi.w	8006004 <_svfiprintf_r+0x28>
 80061aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061ac:	e72c      	b.n	8006008 <_svfiprintf_r+0x2c>
 80061ae:	ab03      	add	r3, sp, #12
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	462a      	mov	r2, r5
 80061b4:	4b05      	ldr	r3, [pc, #20]	@ (80061cc <_svfiprintf_r+0x1f0>)
 80061b6:	a904      	add	r1, sp, #16
 80061b8:	4638      	mov	r0, r7
 80061ba:	f000 f879 	bl	80062b0 <_printf_i>
 80061be:	e7ed      	b.n	800619c <_svfiprintf_r+0x1c0>
 80061c0:	08007f11 	.word	0x08007f11
 80061c4:	08007f1b 	.word	0x08007f1b
 80061c8:	00000000 	.word	0x00000000
 80061cc:	08005f25 	.word	0x08005f25
 80061d0:	08007f17 	.word	0x08007f17

080061d4 <_printf_common>:
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	4616      	mov	r6, r2
 80061da:	4698      	mov	r8, r3
 80061dc:	688a      	ldr	r2, [r1, #8]
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061e4:	4293      	cmp	r3, r2
 80061e6:	bfb8      	it	lt
 80061e8:	4613      	movlt	r3, r2
 80061ea:	6033      	str	r3, [r6, #0]
 80061ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061f0:	4607      	mov	r7, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	b10a      	cbz	r2, 80061fa <_printf_common+0x26>
 80061f6:	3301      	adds	r3, #1
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	0699      	lsls	r1, r3, #26
 80061fe:	bf42      	ittt	mi
 8006200:	6833      	ldrmi	r3, [r6, #0]
 8006202:	3302      	addmi	r3, #2
 8006204:	6033      	strmi	r3, [r6, #0]
 8006206:	6825      	ldr	r5, [r4, #0]
 8006208:	f015 0506 	ands.w	r5, r5, #6
 800620c:	d106      	bne.n	800621c <_printf_common+0x48>
 800620e:	f104 0a19 	add.w	sl, r4, #25
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	6832      	ldr	r2, [r6, #0]
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	42ab      	cmp	r3, r5
 800621a:	dc26      	bgt.n	800626a <_printf_common+0x96>
 800621c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	3b00      	subs	r3, #0
 8006224:	bf18      	it	ne
 8006226:	2301      	movne	r3, #1
 8006228:	0692      	lsls	r2, r2, #26
 800622a:	d42b      	bmi.n	8006284 <_printf_common+0xb0>
 800622c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006230:	4641      	mov	r1, r8
 8006232:	4638      	mov	r0, r7
 8006234:	47c8      	blx	r9
 8006236:	3001      	adds	r0, #1
 8006238:	d01e      	beq.n	8006278 <_printf_common+0xa4>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	6922      	ldr	r2, [r4, #16]
 800623e:	f003 0306 	and.w	r3, r3, #6
 8006242:	2b04      	cmp	r3, #4
 8006244:	bf02      	ittt	eq
 8006246:	68e5      	ldreq	r5, [r4, #12]
 8006248:	6833      	ldreq	r3, [r6, #0]
 800624a:	1aed      	subeq	r5, r5, r3
 800624c:	68a3      	ldr	r3, [r4, #8]
 800624e:	bf0c      	ite	eq
 8006250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006254:	2500      	movne	r5, #0
 8006256:	4293      	cmp	r3, r2
 8006258:	bfc4      	itt	gt
 800625a:	1a9b      	subgt	r3, r3, r2
 800625c:	18ed      	addgt	r5, r5, r3
 800625e:	2600      	movs	r6, #0
 8006260:	341a      	adds	r4, #26
 8006262:	42b5      	cmp	r5, r6
 8006264:	d11a      	bne.n	800629c <_printf_common+0xc8>
 8006266:	2000      	movs	r0, #0
 8006268:	e008      	b.n	800627c <_printf_common+0xa8>
 800626a:	2301      	movs	r3, #1
 800626c:	4652      	mov	r2, sl
 800626e:	4641      	mov	r1, r8
 8006270:	4638      	mov	r0, r7
 8006272:	47c8      	blx	r9
 8006274:	3001      	adds	r0, #1
 8006276:	d103      	bne.n	8006280 <_printf_common+0xac>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006280:	3501      	adds	r5, #1
 8006282:	e7c6      	b.n	8006212 <_printf_common+0x3e>
 8006284:	18e1      	adds	r1, r4, r3
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	2030      	movs	r0, #48	@ 0x30
 800628a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800628e:	4422      	add	r2, r4
 8006290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006298:	3302      	adds	r3, #2
 800629a:	e7c7      	b.n	800622c <_printf_common+0x58>
 800629c:	2301      	movs	r3, #1
 800629e:	4622      	mov	r2, r4
 80062a0:	4641      	mov	r1, r8
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c8      	blx	r9
 80062a6:	3001      	adds	r0, #1
 80062a8:	d0e6      	beq.n	8006278 <_printf_common+0xa4>
 80062aa:	3601      	adds	r6, #1
 80062ac:	e7d9      	b.n	8006262 <_printf_common+0x8e>
	...

080062b0 <_printf_i>:
 80062b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	7e0f      	ldrb	r7, [r1, #24]
 80062b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062b8:	2f78      	cmp	r7, #120	@ 0x78
 80062ba:	4691      	mov	r9, r2
 80062bc:	4680      	mov	r8, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	469a      	mov	sl, r3
 80062c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062c6:	d807      	bhi.n	80062d8 <_printf_i+0x28>
 80062c8:	2f62      	cmp	r7, #98	@ 0x62
 80062ca:	d80a      	bhi.n	80062e2 <_printf_i+0x32>
 80062cc:	2f00      	cmp	r7, #0
 80062ce:	f000 80d2 	beq.w	8006476 <_printf_i+0x1c6>
 80062d2:	2f58      	cmp	r7, #88	@ 0x58
 80062d4:	f000 80b9 	beq.w	800644a <_printf_i+0x19a>
 80062d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062e0:	e03a      	b.n	8006358 <_printf_i+0xa8>
 80062e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062e6:	2b15      	cmp	r3, #21
 80062e8:	d8f6      	bhi.n	80062d8 <_printf_i+0x28>
 80062ea:	a101      	add	r1, pc, #4	@ (adr r1, 80062f0 <_printf_i+0x40>)
 80062ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f0:	08006349 	.word	0x08006349
 80062f4:	0800635d 	.word	0x0800635d
 80062f8:	080062d9 	.word	0x080062d9
 80062fc:	080062d9 	.word	0x080062d9
 8006300:	080062d9 	.word	0x080062d9
 8006304:	080062d9 	.word	0x080062d9
 8006308:	0800635d 	.word	0x0800635d
 800630c:	080062d9 	.word	0x080062d9
 8006310:	080062d9 	.word	0x080062d9
 8006314:	080062d9 	.word	0x080062d9
 8006318:	080062d9 	.word	0x080062d9
 800631c:	0800645d 	.word	0x0800645d
 8006320:	08006387 	.word	0x08006387
 8006324:	08006417 	.word	0x08006417
 8006328:	080062d9 	.word	0x080062d9
 800632c:	080062d9 	.word	0x080062d9
 8006330:	0800647f 	.word	0x0800647f
 8006334:	080062d9 	.word	0x080062d9
 8006338:	08006387 	.word	0x08006387
 800633c:	080062d9 	.word	0x080062d9
 8006340:	080062d9 	.word	0x080062d9
 8006344:	0800641f 	.word	0x0800641f
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	1d1a      	adds	r2, r3, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6032      	str	r2, [r6, #0]
 8006350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006358:	2301      	movs	r3, #1
 800635a:	e09d      	b.n	8006498 <_printf_i+0x1e8>
 800635c:	6833      	ldr	r3, [r6, #0]
 800635e:	6820      	ldr	r0, [r4, #0]
 8006360:	1d19      	adds	r1, r3, #4
 8006362:	6031      	str	r1, [r6, #0]
 8006364:	0606      	lsls	r6, r0, #24
 8006366:	d501      	bpl.n	800636c <_printf_i+0xbc>
 8006368:	681d      	ldr	r5, [r3, #0]
 800636a:	e003      	b.n	8006374 <_printf_i+0xc4>
 800636c:	0645      	lsls	r5, r0, #25
 800636e:	d5fb      	bpl.n	8006368 <_printf_i+0xb8>
 8006370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006374:	2d00      	cmp	r5, #0
 8006376:	da03      	bge.n	8006380 <_printf_i+0xd0>
 8006378:	232d      	movs	r3, #45	@ 0x2d
 800637a:	426d      	negs	r5, r5
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006380:	4859      	ldr	r0, [pc, #356]	@ (80064e8 <_printf_i+0x238>)
 8006382:	230a      	movs	r3, #10
 8006384:	e011      	b.n	80063aa <_printf_i+0xfa>
 8006386:	6821      	ldr	r1, [r4, #0]
 8006388:	6833      	ldr	r3, [r6, #0]
 800638a:	0608      	lsls	r0, r1, #24
 800638c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006390:	d402      	bmi.n	8006398 <_printf_i+0xe8>
 8006392:	0649      	lsls	r1, r1, #25
 8006394:	bf48      	it	mi
 8006396:	b2ad      	uxthmi	r5, r5
 8006398:	2f6f      	cmp	r7, #111	@ 0x6f
 800639a:	4853      	ldr	r0, [pc, #332]	@ (80064e8 <_printf_i+0x238>)
 800639c:	6033      	str	r3, [r6, #0]
 800639e:	bf14      	ite	ne
 80063a0:	230a      	movne	r3, #10
 80063a2:	2308      	moveq	r3, #8
 80063a4:	2100      	movs	r1, #0
 80063a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063aa:	6866      	ldr	r6, [r4, #4]
 80063ac:	60a6      	str	r6, [r4, #8]
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	bfa2      	ittt	ge
 80063b2:	6821      	ldrge	r1, [r4, #0]
 80063b4:	f021 0104 	bicge.w	r1, r1, #4
 80063b8:	6021      	strge	r1, [r4, #0]
 80063ba:	b90d      	cbnz	r5, 80063c0 <_printf_i+0x110>
 80063bc:	2e00      	cmp	r6, #0
 80063be:	d04b      	beq.n	8006458 <_printf_i+0x1a8>
 80063c0:	4616      	mov	r6, r2
 80063c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80063c6:	fb03 5711 	mls	r7, r3, r1, r5
 80063ca:	5dc7      	ldrb	r7, [r0, r7]
 80063cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063d0:	462f      	mov	r7, r5
 80063d2:	42bb      	cmp	r3, r7
 80063d4:	460d      	mov	r5, r1
 80063d6:	d9f4      	bls.n	80063c2 <_printf_i+0x112>
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d10b      	bne.n	80063f4 <_printf_i+0x144>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	07df      	lsls	r7, r3, #31
 80063e0:	d508      	bpl.n	80063f4 <_printf_i+0x144>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6861      	ldr	r1, [r4, #4]
 80063e6:	4299      	cmp	r1, r3
 80063e8:	bfde      	ittt	le
 80063ea:	2330      	movle	r3, #48	@ 0x30
 80063ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063f4:	1b92      	subs	r2, r2, r6
 80063f6:	6122      	str	r2, [r4, #16]
 80063f8:	f8cd a000 	str.w	sl, [sp]
 80063fc:	464b      	mov	r3, r9
 80063fe:	aa03      	add	r2, sp, #12
 8006400:	4621      	mov	r1, r4
 8006402:	4640      	mov	r0, r8
 8006404:	f7ff fee6 	bl	80061d4 <_printf_common>
 8006408:	3001      	adds	r0, #1
 800640a:	d14a      	bne.n	80064a2 <_printf_i+0x1f2>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	b004      	add	sp, #16
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	f043 0320 	orr.w	r3, r3, #32
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	4833      	ldr	r0, [pc, #204]	@ (80064ec <_printf_i+0x23c>)
 8006420:	2778      	movs	r7, #120	@ 0x78
 8006422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	6831      	ldr	r1, [r6, #0]
 800642a:	061f      	lsls	r7, r3, #24
 800642c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006430:	d402      	bmi.n	8006438 <_printf_i+0x188>
 8006432:	065f      	lsls	r7, r3, #25
 8006434:	bf48      	it	mi
 8006436:	b2ad      	uxthmi	r5, r5
 8006438:	6031      	str	r1, [r6, #0]
 800643a:	07d9      	lsls	r1, r3, #31
 800643c:	bf44      	itt	mi
 800643e:	f043 0320 	orrmi.w	r3, r3, #32
 8006442:	6023      	strmi	r3, [r4, #0]
 8006444:	b11d      	cbz	r5, 800644e <_printf_i+0x19e>
 8006446:	2310      	movs	r3, #16
 8006448:	e7ac      	b.n	80063a4 <_printf_i+0xf4>
 800644a:	4827      	ldr	r0, [pc, #156]	@ (80064e8 <_printf_i+0x238>)
 800644c:	e7e9      	b.n	8006422 <_printf_i+0x172>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	f023 0320 	bic.w	r3, r3, #32
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	e7f6      	b.n	8006446 <_printf_i+0x196>
 8006458:	4616      	mov	r6, r2
 800645a:	e7bd      	b.n	80063d8 <_printf_i+0x128>
 800645c:	6833      	ldr	r3, [r6, #0]
 800645e:	6825      	ldr	r5, [r4, #0]
 8006460:	6961      	ldr	r1, [r4, #20]
 8006462:	1d18      	adds	r0, r3, #4
 8006464:	6030      	str	r0, [r6, #0]
 8006466:	062e      	lsls	r6, r5, #24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	d501      	bpl.n	8006470 <_printf_i+0x1c0>
 800646c:	6019      	str	r1, [r3, #0]
 800646e:	e002      	b.n	8006476 <_printf_i+0x1c6>
 8006470:	0668      	lsls	r0, r5, #25
 8006472:	d5fb      	bpl.n	800646c <_printf_i+0x1bc>
 8006474:	8019      	strh	r1, [r3, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	4616      	mov	r6, r2
 800647c:	e7bc      	b.n	80063f8 <_printf_i+0x148>
 800647e:	6833      	ldr	r3, [r6, #0]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	6032      	str	r2, [r6, #0]
 8006484:	681e      	ldr	r6, [r3, #0]
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	2100      	movs	r1, #0
 800648a:	4630      	mov	r0, r6
 800648c:	f7f9 fea8 	bl	80001e0 <memchr>
 8006490:	b108      	cbz	r0, 8006496 <_printf_i+0x1e6>
 8006492:	1b80      	subs	r0, r0, r6
 8006494:	6060      	str	r0, [r4, #4]
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	2300      	movs	r3, #0
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a0:	e7aa      	b.n	80063f8 <_printf_i+0x148>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	4632      	mov	r2, r6
 80064a6:	4649      	mov	r1, r9
 80064a8:	4640      	mov	r0, r8
 80064aa:	47d0      	blx	sl
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0ad      	beq.n	800640c <_printf_i+0x15c>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	079b      	lsls	r3, r3, #30
 80064b4:	d413      	bmi.n	80064de <_printf_i+0x22e>
 80064b6:	68e0      	ldr	r0, [r4, #12]
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	4298      	cmp	r0, r3
 80064bc:	bfb8      	it	lt
 80064be:	4618      	movlt	r0, r3
 80064c0:	e7a6      	b.n	8006410 <_printf_i+0x160>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4632      	mov	r2, r6
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d09d      	beq.n	800640c <_printf_i+0x15c>
 80064d0:	3501      	adds	r5, #1
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	9903      	ldr	r1, [sp, #12]
 80064d6:	1a5b      	subs	r3, r3, r1
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dcf2      	bgt.n	80064c2 <_printf_i+0x212>
 80064dc:	e7eb      	b.n	80064b6 <_printf_i+0x206>
 80064de:	2500      	movs	r5, #0
 80064e0:	f104 0619 	add.w	r6, r4, #25
 80064e4:	e7f5      	b.n	80064d2 <_printf_i+0x222>
 80064e6:	bf00      	nop
 80064e8:	08007f22 	.word	0x08007f22
 80064ec:	08007f33 	.word	0x08007f33

080064f0 <__sflush_r>:
 80064f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f8:	0716      	lsls	r6, r2, #28
 80064fa:	4605      	mov	r5, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	d454      	bmi.n	80065aa <__sflush_r+0xba>
 8006500:	684b      	ldr	r3, [r1, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dc02      	bgt.n	800650c <__sflush_r+0x1c>
 8006506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	dd48      	ble.n	800659e <__sflush_r+0xae>
 800650c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800650e:	2e00      	cmp	r6, #0
 8006510:	d045      	beq.n	800659e <__sflush_r+0xae>
 8006512:	2300      	movs	r3, #0
 8006514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006518:	682f      	ldr	r7, [r5, #0]
 800651a:	6a21      	ldr	r1, [r4, #32]
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	d030      	beq.n	8006582 <__sflush_r+0x92>
 8006520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	0759      	lsls	r1, r3, #29
 8006526:	d505      	bpl.n	8006534 <__sflush_r+0x44>
 8006528:	6863      	ldr	r3, [r4, #4]
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800652e:	b10b      	cbz	r3, 8006534 <__sflush_r+0x44>
 8006530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006538:	6a21      	ldr	r1, [r4, #32]
 800653a:	4628      	mov	r0, r5
 800653c:	47b0      	blx	r6
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	d106      	bne.n	8006552 <__sflush_r+0x62>
 8006544:	6829      	ldr	r1, [r5, #0]
 8006546:	291d      	cmp	r1, #29
 8006548:	d82b      	bhi.n	80065a2 <__sflush_r+0xb2>
 800654a:	4a2a      	ldr	r2, [pc, #168]	@ (80065f4 <__sflush_r+0x104>)
 800654c:	410a      	asrs	r2, r1
 800654e:	07d6      	lsls	r6, r2, #31
 8006550:	d427      	bmi.n	80065a2 <__sflush_r+0xb2>
 8006552:	2200      	movs	r2, #0
 8006554:	6062      	str	r2, [r4, #4]
 8006556:	04d9      	lsls	r1, r3, #19
 8006558:	6922      	ldr	r2, [r4, #16]
 800655a:	6022      	str	r2, [r4, #0]
 800655c:	d504      	bpl.n	8006568 <__sflush_r+0x78>
 800655e:	1c42      	adds	r2, r0, #1
 8006560:	d101      	bne.n	8006566 <__sflush_r+0x76>
 8006562:	682b      	ldr	r3, [r5, #0]
 8006564:	b903      	cbnz	r3, 8006568 <__sflush_r+0x78>
 8006566:	6560      	str	r0, [r4, #84]	@ 0x54
 8006568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800656a:	602f      	str	r7, [r5, #0]
 800656c:	b1b9      	cbz	r1, 800659e <__sflush_r+0xae>
 800656e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006572:	4299      	cmp	r1, r3
 8006574:	d002      	beq.n	800657c <__sflush_r+0x8c>
 8006576:	4628      	mov	r0, r5
 8006578:	f7fe fd58 	bl	800502c <_free_r>
 800657c:	2300      	movs	r3, #0
 800657e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006580:	e00d      	b.n	800659e <__sflush_r+0xae>
 8006582:	2301      	movs	r3, #1
 8006584:	4628      	mov	r0, r5
 8006586:	47b0      	blx	r6
 8006588:	4602      	mov	r2, r0
 800658a:	1c50      	adds	r0, r2, #1
 800658c:	d1c9      	bne.n	8006522 <__sflush_r+0x32>
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0c6      	beq.n	8006522 <__sflush_r+0x32>
 8006594:	2b1d      	cmp	r3, #29
 8006596:	d001      	beq.n	800659c <__sflush_r+0xac>
 8006598:	2b16      	cmp	r3, #22
 800659a:	d11e      	bne.n	80065da <__sflush_r+0xea>
 800659c:	602f      	str	r7, [r5, #0]
 800659e:	2000      	movs	r0, #0
 80065a0:	e022      	b.n	80065e8 <__sflush_r+0xf8>
 80065a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	e01b      	b.n	80065e2 <__sflush_r+0xf2>
 80065aa:	690f      	ldr	r7, [r1, #16]
 80065ac:	2f00      	cmp	r7, #0
 80065ae:	d0f6      	beq.n	800659e <__sflush_r+0xae>
 80065b0:	0793      	lsls	r3, r2, #30
 80065b2:	680e      	ldr	r6, [r1, #0]
 80065b4:	bf08      	it	eq
 80065b6:	694b      	ldreq	r3, [r1, #20]
 80065b8:	600f      	str	r7, [r1, #0]
 80065ba:	bf18      	it	ne
 80065bc:	2300      	movne	r3, #0
 80065be:	eba6 0807 	sub.w	r8, r6, r7
 80065c2:	608b      	str	r3, [r1, #8]
 80065c4:	f1b8 0f00 	cmp.w	r8, #0
 80065c8:	dde9      	ble.n	800659e <__sflush_r+0xae>
 80065ca:	6a21      	ldr	r1, [r4, #32]
 80065cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065ce:	4643      	mov	r3, r8
 80065d0:	463a      	mov	r2, r7
 80065d2:	4628      	mov	r0, r5
 80065d4:	47b0      	blx	r6
 80065d6:	2800      	cmp	r0, #0
 80065d8:	dc08      	bgt.n	80065ec <__sflush_r+0xfc>
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ec:	4407      	add	r7, r0
 80065ee:	eba8 0800 	sub.w	r8, r8, r0
 80065f2:	e7e7      	b.n	80065c4 <__sflush_r+0xd4>
 80065f4:	dfbffffe 	.word	0xdfbffffe

080065f8 <_fflush_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	690b      	ldr	r3, [r1, #16]
 80065fc:	4605      	mov	r5, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b913      	cbnz	r3, 8006608 <_fflush_r+0x10>
 8006602:	2500      	movs	r5, #0
 8006604:	4628      	mov	r0, r5
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	b118      	cbz	r0, 8006612 <_fflush_r+0x1a>
 800660a:	6a03      	ldr	r3, [r0, #32]
 800660c:	b90b      	cbnz	r3, 8006612 <_fflush_r+0x1a>
 800660e:	f7fe fbf1 	bl	8004df4 <__sinit>
 8006612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f3      	beq.n	8006602 <_fflush_r+0xa>
 800661a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800661c:	07d0      	lsls	r0, r2, #31
 800661e:	d404      	bmi.n	800662a <_fflush_r+0x32>
 8006620:	0599      	lsls	r1, r3, #22
 8006622:	d402      	bmi.n	800662a <_fflush_r+0x32>
 8006624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006626:	f7fe fcf8 	bl	800501a <__retarget_lock_acquire_recursive>
 800662a:	4628      	mov	r0, r5
 800662c:	4621      	mov	r1, r4
 800662e:	f7ff ff5f 	bl	80064f0 <__sflush_r>
 8006632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006634:	07da      	lsls	r2, r3, #31
 8006636:	4605      	mov	r5, r0
 8006638:	d4e4      	bmi.n	8006604 <_fflush_r+0xc>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	059b      	lsls	r3, r3, #22
 800663e:	d4e1      	bmi.n	8006604 <_fflush_r+0xc>
 8006640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006642:	f7fe fceb 	bl	800501c <__retarget_lock_release_recursive>
 8006646:	e7dd      	b.n	8006604 <_fflush_r+0xc>

08006648 <memmove>:
 8006648:	4288      	cmp	r0, r1
 800664a:	b510      	push	{r4, lr}
 800664c:	eb01 0402 	add.w	r4, r1, r2
 8006650:	d902      	bls.n	8006658 <memmove+0x10>
 8006652:	4284      	cmp	r4, r0
 8006654:	4623      	mov	r3, r4
 8006656:	d807      	bhi.n	8006668 <memmove+0x20>
 8006658:	1e43      	subs	r3, r0, #1
 800665a:	42a1      	cmp	r1, r4
 800665c:	d008      	beq.n	8006670 <memmove+0x28>
 800665e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006666:	e7f8      	b.n	800665a <memmove+0x12>
 8006668:	4402      	add	r2, r0
 800666a:	4601      	mov	r1, r0
 800666c:	428a      	cmp	r2, r1
 800666e:	d100      	bne.n	8006672 <memmove+0x2a>
 8006670:	bd10      	pop	{r4, pc}
 8006672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800667a:	e7f7      	b.n	800666c <memmove+0x24>

0800667c <strncmp>:
 800667c:	b510      	push	{r4, lr}
 800667e:	b16a      	cbz	r2, 800669c <strncmp+0x20>
 8006680:	3901      	subs	r1, #1
 8006682:	1884      	adds	r4, r0, r2
 8006684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006688:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800668c:	429a      	cmp	r2, r3
 800668e:	d103      	bne.n	8006698 <strncmp+0x1c>
 8006690:	42a0      	cmp	r0, r4
 8006692:	d001      	beq.n	8006698 <strncmp+0x1c>
 8006694:	2a00      	cmp	r2, #0
 8006696:	d1f5      	bne.n	8006684 <strncmp+0x8>
 8006698:	1ad0      	subs	r0, r2, r3
 800669a:	bd10      	pop	{r4, pc}
 800669c:	4610      	mov	r0, r2
 800669e:	e7fc      	b.n	800669a <strncmp+0x1e>

080066a0 <_sbrk_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d06      	ldr	r5, [pc, #24]	@ (80066bc <_sbrk_r+0x1c>)
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	f7fb fb5c 	bl	8001d68 <_sbrk>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_sbrk_r+0x1a>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_sbrk_r+0x1a>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	20000458 	.word	0x20000458

080066c0 <memcpy>:
 80066c0:	440a      	add	r2, r1
 80066c2:	4291      	cmp	r1, r2
 80066c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066c8:	d100      	bne.n	80066cc <memcpy+0xc>
 80066ca:	4770      	bx	lr
 80066cc:	b510      	push	{r4, lr}
 80066ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d6:	4291      	cmp	r1, r2
 80066d8:	d1f9      	bne.n	80066ce <memcpy+0xe>
 80066da:	bd10      	pop	{r4, pc}
 80066dc:	0000      	movs	r0, r0
	...

080066e0 <nan>:
 80066e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80066e8 <nan+0x8>
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	00000000 	.word	0x00000000
 80066ec:	7ff80000 	.word	0x7ff80000

080066f0 <rshift>:
 80066f0:	6903      	ldr	r3, [r0, #16]
 80066f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80066f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80066fe:	f100 0414 	add.w	r4, r0, #20
 8006702:	dd45      	ble.n	8006790 <rshift+0xa0>
 8006704:	f011 011f 	ands.w	r1, r1, #31
 8006708:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800670c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006710:	d10c      	bne.n	800672c <rshift+0x3c>
 8006712:	f100 0710 	add.w	r7, r0, #16
 8006716:	4629      	mov	r1, r5
 8006718:	42b1      	cmp	r1, r6
 800671a:	d334      	bcc.n	8006786 <rshift+0x96>
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	1eea      	subs	r2, r5, #3
 8006722:	4296      	cmp	r6, r2
 8006724:	bf38      	it	cc
 8006726:	2300      	movcc	r3, #0
 8006728:	4423      	add	r3, r4
 800672a:	e015      	b.n	8006758 <rshift+0x68>
 800672c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006730:	f1c1 0820 	rsb	r8, r1, #32
 8006734:	40cf      	lsrs	r7, r1
 8006736:	f105 0e04 	add.w	lr, r5, #4
 800673a:	46a1      	mov	r9, r4
 800673c:	4576      	cmp	r6, lr
 800673e:	46f4      	mov	ip, lr
 8006740:	d815      	bhi.n	800676e <rshift+0x7e>
 8006742:	1a9a      	subs	r2, r3, r2
 8006744:	0092      	lsls	r2, r2, #2
 8006746:	3a04      	subs	r2, #4
 8006748:	3501      	adds	r5, #1
 800674a:	42ae      	cmp	r6, r5
 800674c:	bf38      	it	cc
 800674e:	2200      	movcc	r2, #0
 8006750:	18a3      	adds	r3, r4, r2
 8006752:	50a7      	str	r7, [r4, r2]
 8006754:	b107      	cbz	r7, 8006758 <rshift+0x68>
 8006756:	3304      	adds	r3, #4
 8006758:	1b1a      	subs	r2, r3, r4
 800675a:	42a3      	cmp	r3, r4
 800675c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006760:	bf08      	it	eq
 8006762:	2300      	moveq	r3, #0
 8006764:	6102      	str	r2, [r0, #16]
 8006766:	bf08      	it	eq
 8006768:	6143      	streq	r3, [r0, #20]
 800676a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800676e:	f8dc c000 	ldr.w	ip, [ip]
 8006772:	fa0c fc08 	lsl.w	ip, ip, r8
 8006776:	ea4c 0707 	orr.w	r7, ip, r7
 800677a:	f849 7b04 	str.w	r7, [r9], #4
 800677e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006782:	40cf      	lsrs	r7, r1
 8006784:	e7da      	b.n	800673c <rshift+0x4c>
 8006786:	f851 cb04 	ldr.w	ip, [r1], #4
 800678a:	f847 cf04 	str.w	ip, [r7, #4]!
 800678e:	e7c3      	b.n	8006718 <rshift+0x28>
 8006790:	4623      	mov	r3, r4
 8006792:	e7e1      	b.n	8006758 <rshift+0x68>

08006794 <__hexdig_fun>:
 8006794:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006798:	2b09      	cmp	r3, #9
 800679a:	d802      	bhi.n	80067a2 <__hexdig_fun+0xe>
 800679c:	3820      	subs	r0, #32
 800679e:	b2c0      	uxtb	r0, r0
 80067a0:	4770      	bx	lr
 80067a2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80067a6:	2b05      	cmp	r3, #5
 80067a8:	d801      	bhi.n	80067ae <__hexdig_fun+0x1a>
 80067aa:	3847      	subs	r0, #71	@ 0x47
 80067ac:	e7f7      	b.n	800679e <__hexdig_fun+0xa>
 80067ae:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	d801      	bhi.n	80067ba <__hexdig_fun+0x26>
 80067b6:	3827      	subs	r0, #39	@ 0x27
 80067b8:	e7f1      	b.n	800679e <__hexdig_fun+0xa>
 80067ba:	2000      	movs	r0, #0
 80067bc:	4770      	bx	lr
	...

080067c0 <__gethex>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	b085      	sub	sp, #20
 80067c6:	468a      	mov	sl, r1
 80067c8:	9302      	str	r3, [sp, #8]
 80067ca:	680b      	ldr	r3, [r1, #0]
 80067cc:	9001      	str	r0, [sp, #4]
 80067ce:	4690      	mov	r8, r2
 80067d0:	1c9c      	adds	r4, r3, #2
 80067d2:	46a1      	mov	r9, r4
 80067d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80067d8:	2830      	cmp	r0, #48	@ 0x30
 80067da:	d0fa      	beq.n	80067d2 <__gethex+0x12>
 80067dc:	eba9 0303 	sub.w	r3, r9, r3
 80067e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80067e4:	f7ff ffd6 	bl	8006794 <__hexdig_fun>
 80067e8:	4605      	mov	r5, r0
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d168      	bne.n	80068c0 <__gethex+0x100>
 80067ee:	49a0      	ldr	r1, [pc, #640]	@ (8006a70 <__gethex+0x2b0>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	4648      	mov	r0, r9
 80067f4:	f7ff ff42 	bl	800667c <strncmp>
 80067f8:	4607      	mov	r7, r0
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d167      	bne.n	80068ce <__gethex+0x10e>
 80067fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006802:	4626      	mov	r6, r4
 8006804:	f7ff ffc6 	bl	8006794 <__hexdig_fun>
 8006808:	2800      	cmp	r0, #0
 800680a:	d062      	beq.n	80068d2 <__gethex+0x112>
 800680c:	4623      	mov	r3, r4
 800680e:	7818      	ldrb	r0, [r3, #0]
 8006810:	2830      	cmp	r0, #48	@ 0x30
 8006812:	4699      	mov	r9, r3
 8006814:	f103 0301 	add.w	r3, r3, #1
 8006818:	d0f9      	beq.n	800680e <__gethex+0x4e>
 800681a:	f7ff ffbb 	bl	8006794 <__hexdig_fun>
 800681e:	fab0 f580 	clz	r5, r0
 8006822:	096d      	lsrs	r5, r5, #5
 8006824:	f04f 0b01 	mov.w	fp, #1
 8006828:	464a      	mov	r2, r9
 800682a:	4616      	mov	r6, r2
 800682c:	3201      	adds	r2, #1
 800682e:	7830      	ldrb	r0, [r6, #0]
 8006830:	f7ff ffb0 	bl	8006794 <__hexdig_fun>
 8006834:	2800      	cmp	r0, #0
 8006836:	d1f8      	bne.n	800682a <__gethex+0x6a>
 8006838:	498d      	ldr	r1, [pc, #564]	@ (8006a70 <__gethex+0x2b0>)
 800683a:	2201      	movs	r2, #1
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff ff1d 	bl	800667c <strncmp>
 8006842:	2800      	cmp	r0, #0
 8006844:	d13f      	bne.n	80068c6 <__gethex+0x106>
 8006846:	b944      	cbnz	r4, 800685a <__gethex+0x9a>
 8006848:	1c74      	adds	r4, r6, #1
 800684a:	4622      	mov	r2, r4
 800684c:	4616      	mov	r6, r2
 800684e:	3201      	adds	r2, #1
 8006850:	7830      	ldrb	r0, [r6, #0]
 8006852:	f7ff ff9f 	bl	8006794 <__hexdig_fun>
 8006856:	2800      	cmp	r0, #0
 8006858:	d1f8      	bne.n	800684c <__gethex+0x8c>
 800685a:	1ba4      	subs	r4, r4, r6
 800685c:	00a7      	lsls	r7, r4, #2
 800685e:	7833      	ldrb	r3, [r6, #0]
 8006860:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006864:	2b50      	cmp	r3, #80	@ 0x50
 8006866:	d13e      	bne.n	80068e6 <__gethex+0x126>
 8006868:	7873      	ldrb	r3, [r6, #1]
 800686a:	2b2b      	cmp	r3, #43	@ 0x2b
 800686c:	d033      	beq.n	80068d6 <__gethex+0x116>
 800686e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006870:	d034      	beq.n	80068dc <__gethex+0x11c>
 8006872:	1c71      	adds	r1, r6, #1
 8006874:	2400      	movs	r4, #0
 8006876:	7808      	ldrb	r0, [r1, #0]
 8006878:	f7ff ff8c 	bl	8006794 <__hexdig_fun>
 800687c:	1e43      	subs	r3, r0, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b18      	cmp	r3, #24
 8006882:	d830      	bhi.n	80068e6 <__gethex+0x126>
 8006884:	f1a0 0210 	sub.w	r2, r0, #16
 8006888:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800688c:	f7ff ff82 	bl	8006794 <__hexdig_fun>
 8006890:	f100 3cff 	add.w	ip, r0, #4294967295
 8006894:	fa5f fc8c 	uxtb.w	ip, ip
 8006898:	f1bc 0f18 	cmp.w	ip, #24
 800689c:	f04f 030a 	mov.w	r3, #10
 80068a0:	d91e      	bls.n	80068e0 <__gethex+0x120>
 80068a2:	b104      	cbz	r4, 80068a6 <__gethex+0xe6>
 80068a4:	4252      	negs	r2, r2
 80068a6:	4417      	add	r7, r2
 80068a8:	f8ca 1000 	str.w	r1, [sl]
 80068ac:	b1ed      	cbz	r5, 80068ea <__gethex+0x12a>
 80068ae:	f1bb 0f00 	cmp.w	fp, #0
 80068b2:	bf0c      	ite	eq
 80068b4:	2506      	moveq	r5, #6
 80068b6:	2500      	movne	r5, #0
 80068b8:	4628      	mov	r0, r5
 80068ba:	b005      	add	sp, #20
 80068bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c0:	2500      	movs	r5, #0
 80068c2:	462c      	mov	r4, r5
 80068c4:	e7b0      	b.n	8006828 <__gethex+0x68>
 80068c6:	2c00      	cmp	r4, #0
 80068c8:	d1c7      	bne.n	800685a <__gethex+0x9a>
 80068ca:	4627      	mov	r7, r4
 80068cc:	e7c7      	b.n	800685e <__gethex+0x9e>
 80068ce:	464e      	mov	r6, r9
 80068d0:	462f      	mov	r7, r5
 80068d2:	2501      	movs	r5, #1
 80068d4:	e7c3      	b.n	800685e <__gethex+0x9e>
 80068d6:	2400      	movs	r4, #0
 80068d8:	1cb1      	adds	r1, r6, #2
 80068da:	e7cc      	b.n	8006876 <__gethex+0xb6>
 80068dc:	2401      	movs	r4, #1
 80068de:	e7fb      	b.n	80068d8 <__gethex+0x118>
 80068e0:	fb03 0002 	mla	r0, r3, r2, r0
 80068e4:	e7ce      	b.n	8006884 <__gethex+0xc4>
 80068e6:	4631      	mov	r1, r6
 80068e8:	e7de      	b.n	80068a8 <__gethex+0xe8>
 80068ea:	eba6 0309 	sub.w	r3, r6, r9
 80068ee:	3b01      	subs	r3, #1
 80068f0:	4629      	mov	r1, r5
 80068f2:	2b07      	cmp	r3, #7
 80068f4:	dc0a      	bgt.n	800690c <__gethex+0x14c>
 80068f6:	9801      	ldr	r0, [sp, #4]
 80068f8:	f000 fa46 	bl	8006d88 <_Balloc>
 80068fc:	4604      	mov	r4, r0
 80068fe:	b940      	cbnz	r0, 8006912 <__gethex+0x152>
 8006900:	4b5c      	ldr	r3, [pc, #368]	@ (8006a74 <__gethex+0x2b4>)
 8006902:	4602      	mov	r2, r0
 8006904:	21e4      	movs	r1, #228	@ 0xe4
 8006906:	485c      	ldr	r0, [pc, #368]	@ (8006a78 <__gethex+0x2b8>)
 8006908:	f000 ff2c 	bl	8007764 <__assert_func>
 800690c:	3101      	adds	r1, #1
 800690e:	105b      	asrs	r3, r3, #1
 8006910:	e7ef      	b.n	80068f2 <__gethex+0x132>
 8006912:	f100 0a14 	add.w	sl, r0, #20
 8006916:	2300      	movs	r3, #0
 8006918:	4655      	mov	r5, sl
 800691a:	469b      	mov	fp, r3
 800691c:	45b1      	cmp	r9, r6
 800691e:	d337      	bcc.n	8006990 <__gethex+0x1d0>
 8006920:	f845 bb04 	str.w	fp, [r5], #4
 8006924:	eba5 050a 	sub.w	r5, r5, sl
 8006928:	10ad      	asrs	r5, r5, #2
 800692a:	6125      	str	r5, [r4, #16]
 800692c:	4658      	mov	r0, fp
 800692e:	f000 fb1d 	bl	8006f6c <__hi0bits>
 8006932:	016d      	lsls	r5, r5, #5
 8006934:	f8d8 6000 	ldr.w	r6, [r8]
 8006938:	1a2d      	subs	r5, r5, r0
 800693a:	42b5      	cmp	r5, r6
 800693c:	dd54      	ble.n	80069e8 <__gethex+0x228>
 800693e:	1bad      	subs	r5, r5, r6
 8006940:	4629      	mov	r1, r5
 8006942:	4620      	mov	r0, r4
 8006944:	f000 feb1 	bl	80076aa <__any_on>
 8006948:	4681      	mov	r9, r0
 800694a:	b178      	cbz	r0, 800696c <__gethex+0x1ac>
 800694c:	1e6b      	subs	r3, r5, #1
 800694e:	1159      	asrs	r1, r3, #5
 8006950:	f003 021f 	and.w	r2, r3, #31
 8006954:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006958:	f04f 0901 	mov.w	r9, #1
 800695c:	fa09 f202 	lsl.w	r2, r9, r2
 8006960:	420a      	tst	r2, r1
 8006962:	d003      	beq.n	800696c <__gethex+0x1ac>
 8006964:	454b      	cmp	r3, r9
 8006966:	dc36      	bgt.n	80069d6 <__gethex+0x216>
 8006968:	f04f 0902 	mov.w	r9, #2
 800696c:	4629      	mov	r1, r5
 800696e:	4620      	mov	r0, r4
 8006970:	f7ff febe 	bl	80066f0 <rshift>
 8006974:	442f      	add	r7, r5
 8006976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800697a:	42bb      	cmp	r3, r7
 800697c:	da42      	bge.n	8006a04 <__gethex+0x244>
 800697e:	9801      	ldr	r0, [sp, #4]
 8006980:	4621      	mov	r1, r4
 8006982:	f000 fa41 	bl	8006e08 <_Bfree>
 8006986:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006988:	2300      	movs	r3, #0
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	25a3      	movs	r5, #163	@ 0xa3
 800698e:	e793      	b.n	80068b8 <__gethex+0xf8>
 8006990:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006994:	2a2e      	cmp	r2, #46	@ 0x2e
 8006996:	d012      	beq.n	80069be <__gethex+0x1fe>
 8006998:	2b20      	cmp	r3, #32
 800699a:	d104      	bne.n	80069a6 <__gethex+0x1e6>
 800699c:	f845 bb04 	str.w	fp, [r5], #4
 80069a0:	f04f 0b00 	mov.w	fp, #0
 80069a4:	465b      	mov	r3, fp
 80069a6:	7830      	ldrb	r0, [r6, #0]
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	f7ff fef3 	bl	8006794 <__hexdig_fun>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	f000 000f 	and.w	r0, r0, #15
 80069b4:	4098      	lsls	r0, r3
 80069b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80069ba:	3304      	adds	r3, #4
 80069bc:	e7ae      	b.n	800691c <__gethex+0x15c>
 80069be:	45b1      	cmp	r9, r6
 80069c0:	d8ea      	bhi.n	8006998 <__gethex+0x1d8>
 80069c2:	492b      	ldr	r1, [pc, #172]	@ (8006a70 <__gethex+0x2b0>)
 80069c4:	9303      	str	r3, [sp, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff fe57 	bl	800667c <strncmp>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d1e1      	bne.n	8006998 <__gethex+0x1d8>
 80069d4:	e7a2      	b.n	800691c <__gethex+0x15c>
 80069d6:	1ea9      	subs	r1, r5, #2
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 fe66 	bl	80076aa <__any_on>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d0c2      	beq.n	8006968 <__gethex+0x1a8>
 80069e2:	f04f 0903 	mov.w	r9, #3
 80069e6:	e7c1      	b.n	800696c <__gethex+0x1ac>
 80069e8:	da09      	bge.n	80069fe <__gethex+0x23e>
 80069ea:	1b75      	subs	r5, r6, r5
 80069ec:	4621      	mov	r1, r4
 80069ee:	9801      	ldr	r0, [sp, #4]
 80069f0:	462a      	mov	r2, r5
 80069f2:	f000 fc21 	bl	8007238 <__lshift>
 80069f6:	1b7f      	subs	r7, r7, r5
 80069f8:	4604      	mov	r4, r0
 80069fa:	f100 0a14 	add.w	sl, r0, #20
 80069fe:	f04f 0900 	mov.w	r9, #0
 8006a02:	e7b8      	b.n	8006976 <__gethex+0x1b6>
 8006a04:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a08:	42bd      	cmp	r5, r7
 8006a0a:	dd6f      	ble.n	8006aec <__gethex+0x32c>
 8006a0c:	1bed      	subs	r5, r5, r7
 8006a0e:	42ae      	cmp	r6, r5
 8006a10:	dc34      	bgt.n	8006a7c <__gethex+0x2bc>
 8006a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d022      	beq.n	8006a60 <__gethex+0x2a0>
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d024      	beq.n	8006a68 <__gethex+0x2a8>
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d115      	bne.n	8006a4e <__gethex+0x28e>
 8006a22:	42ae      	cmp	r6, r5
 8006a24:	d113      	bne.n	8006a4e <__gethex+0x28e>
 8006a26:	2e01      	cmp	r6, #1
 8006a28:	d10b      	bne.n	8006a42 <__gethex+0x282>
 8006a2a:	9a02      	ldr	r2, [sp, #8]
 8006a2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	2301      	movs	r3, #1
 8006a34:	6123      	str	r3, [r4, #16]
 8006a36:	f8ca 3000 	str.w	r3, [sl]
 8006a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a3c:	2562      	movs	r5, #98	@ 0x62
 8006a3e:	601c      	str	r4, [r3, #0]
 8006a40:	e73a      	b.n	80068b8 <__gethex+0xf8>
 8006a42:	1e71      	subs	r1, r6, #1
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 fe30 	bl	80076aa <__any_on>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d1ed      	bne.n	8006a2a <__gethex+0x26a>
 8006a4e:	9801      	ldr	r0, [sp, #4]
 8006a50:	4621      	mov	r1, r4
 8006a52:	f000 f9d9 	bl	8006e08 <_Bfree>
 8006a56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	2550      	movs	r5, #80	@ 0x50
 8006a5e:	e72b      	b.n	80068b8 <__gethex+0xf8>
 8006a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f3      	bne.n	8006a4e <__gethex+0x28e>
 8006a66:	e7e0      	b.n	8006a2a <__gethex+0x26a>
 8006a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1dd      	bne.n	8006a2a <__gethex+0x26a>
 8006a6e:	e7ee      	b.n	8006a4e <__gethex+0x28e>
 8006a70:	08007db1 	.word	0x08007db1
 8006a74:	08007f4c 	.word	0x08007f4c
 8006a78:	08007f5d 	.word	0x08007f5d
 8006a7c:	1e6f      	subs	r7, r5, #1
 8006a7e:	f1b9 0f00 	cmp.w	r9, #0
 8006a82:	d130      	bne.n	8006ae6 <__gethex+0x326>
 8006a84:	b127      	cbz	r7, 8006a90 <__gethex+0x2d0>
 8006a86:	4639      	mov	r1, r7
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fe0e 	bl	80076aa <__any_on>
 8006a8e:	4681      	mov	r9, r0
 8006a90:	117a      	asrs	r2, r7, #5
 8006a92:	2301      	movs	r3, #1
 8006a94:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006a98:	f007 071f 	and.w	r7, r7, #31
 8006a9c:	40bb      	lsls	r3, r7
 8006a9e:	4213      	tst	r3, r2
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	bf18      	it	ne
 8006aa6:	f049 0902 	orrne.w	r9, r9, #2
 8006aaa:	f7ff fe21 	bl	80066f0 <rshift>
 8006aae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006ab2:	1b76      	subs	r6, r6, r5
 8006ab4:	2502      	movs	r5, #2
 8006ab6:	f1b9 0f00 	cmp.w	r9, #0
 8006aba:	d047      	beq.n	8006b4c <__gethex+0x38c>
 8006abc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d015      	beq.n	8006af0 <__gethex+0x330>
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d017      	beq.n	8006af8 <__gethex+0x338>
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d109      	bne.n	8006ae0 <__gethex+0x320>
 8006acc:	f019 0f02 	tst.w	r9, #2
 8006ad0:	d006      	beq.n	8006ae0 <__gethex+0x320>
 8006ad2:	f8da 3000 	ldr.w	r3, [sl]
 8006ad6:	ea49 0903 	orr.w	r9, r9, r3
 8006ada:	f019 0f01 	tst.w	r9, #1
 8006ade:	d10e      	bne.n	8006afe <__gethex+0x33e>
 8006ae0:	f045 0510 	orr.w	r5, r5, #16
 8006ae4:	e032      	b.n	8006b4c <__gethex+0x38c>
 8006ae6:	f04f 0901 	mov.w	r9, #1
 8006aea:	e7d1      	b.n	8006a90 <__gethex+0x2d0>
 8006aec:	2501      	movs	r5, #1
 8006aee:	e7e2      	b.n	8006ab6 <__gethex+0x2f6>
 8006af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006af2:	f1c3 0301 	rsb	r3, r3, #1
 8006af6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <__gethex+0x320>
 8006afe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006b02:	f104 0314 	add.w	r3, r4, #20
 8006b06:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006b0a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006b0e:	f04f 0c00 	mov.w	ip, #0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b1c:	d01b      	beq.n	8006b56 <__gethex+0x396>
 8006b1e:	3201      	adds	r2, #1
 8006b20:	6002      	str	r2, [r0, #0]
 8006b22:	2d02      	cmp	r5, #2
 8006b24:	f104 0314 	add.w	r3, r4, #20
 8006b28:	d13c      	bne.n	8006ba4 <__gethex+0x3e4>
 8006b2a:	f8d8 2000 	ldr.w	r2, [r8]
 8006b2e:	3a01      	subs	r2, #1
 8006b30:	42b2      	cmp	r2, r6
 8006b32:	d109      	bne.n	8006b48 <__gethex+0x388>
 8006b34:	1171      	asrs	r1, r6, #5
 8006b36:	2201      	movs	r2, #1
 8006b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b3c:	f006 061f 	and.w	r6, r6, #31
 8006b40:	fa02 f606 	lsl.w	r6, r2, r6
 8006b44:	421e      	tst	r6, r3
 8006b46:	d13a      	bne.n	8006bbe <__gethex+0x3fe>
 8006b48:	f045 0520 	orr.w	r5, r5, #32
 8006b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b4e:	601c      	str	r4, [r3, #0]
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	601f      	str	r7, [r3, #0]
 8006b54:	e6b0      	b.n	80068b8 <__gethex+0xf8>
 8006b56:	4299      	cmp	r1, r3
 8006b58:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b5c:	d8d9      	bhi.n	8006b12 <__gethex+0x352>
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	459b      	cmp	fp, r3
 8006b62:	db17      	blt.n	8006b94 <__gethex+0x3d4>
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	9801      	ldr	r0, [sp, #4]
 8006b68:	3101      	adds	r1, #1
 8006b6a:	f000 f90d 	bl	8006d88 <_Balloc>
 8006b6e:	4681      	mov	r9, r0
 8006b70:	b918      	cbnz	r0, 8006b7a <__gethex+0x3ba>
 8006b72:	4b1a      	ldr	r3, [pc, #104]	@ (8006bdc <__gethex+0x41c>)
 8006b74:	4602      	mov	r2, r0
 8006b76:	2184      	movs	r1, #132	@ 0x84
 8006b78:	e6c5      	b.n	8006906 <__gethex+0x146>
 8006b7a:	6922      	ldr	r2, [r4, #16]
 8006b7c:	3202      	adds	r2, #2
 8006b7e:	f104 010c 	add.w	r1, r4, #12
 8006b82:	0092      	lsls	r2, r2, #2
 8006b84:	300c      	adds	r0, #12
 8006b86:	f7ff fd9b 	bl	80066c0 <memcpy>
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	9801      	ldr	r0, [sp, #4]
 8006b8e:	f000 f93b 	bl	8006e08 <_Bfree>
 8006b92:	464c      	mov	r4, r9
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b9c:	6122      	str	r2, [r4, #16]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	615a      	str	r2, [r3, #20]
 8006ba2:	e7be      	b.n	8006b22 <__gethex+0x362>
 8006ba4:	6922      	ldr	r2, [r4, #16]
 8006ba6:	455a      	cmp	r2, fp
 8006ba8:	dd0b      	ble.n	8006bc2 <__gethex+0x402>
 8006baa:	2101      	movs	r1, #1
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7ff fd9f 	bl	80066f0 <rshift>
 8006bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bb6:	3701      	adds	r7, #1
 8006bb8:	42bb      	cmp	r3, r7
 8006bba:	f6ff aee0 	blt.w	800697e <__gethex+0x1be>
 8006bbe:	2501      	movs	r5, #1
 8006bc0:	e7c2      	b.n	8006b48 <__gethex+0x388>
 8006bc2:	f016 061f 	ands.w	r6, r6, #31
 8006bc6:	d0fa      	beq.n	8006bbe <__gethex+0x3fe>
 8006bc8:	4453      	add	r3, sl
 8006bca:	f1c6 0620 	rsb	r6, r6, #32
 8006bce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006bd2:	f000 f9cb 	bl	8006f6c <__hi0bits>
 8006bd6:	42b0      	cmp	r0, r6
 8006bd8:	dbe7      	blt.n	8006baa <__gethex+0x3ea>
 8006bda:	e7f0      	b.n	8006bbe <__gethex+0x3fe>
 8006bdc:	08007f4c 	.word	0x08007f4c

08006be0 <L_shift>:
 8006be0:	f1c2 0208 	rsb	r2, r2, #8
 8006be4:	0092      	lsls	r2, r2, #2
 8006be6:	b570      	push	{r4, r5, r6, lr}
 8006be8:	f1c2 0620 	rsb	r6, r2, #32
 8006bec:	6843      	ldr	r3, [r0, #4]
 8006bee:	6804      	ldr	r4, [r0, #0]
 8006bf0:	fa03 f506 	lsl.w	r5, r3, r6
 8006bf4:	432c      	orrs	r4, r5
 8006bf6:	40d3      	lsrs	r3, r2
 8006bf8:	6004      	str	r4, [r0, #0]
 8006bfa:	f840 3f04 	str.w	r3, [r0, #4]!
 8006bfe:	4288      	cmp	r0, r1
 8006c00:	d3f4      	bcc.n	8006bec <L_shift+0xc>
 8006c02:	bd70      	pop	{r4, r5, r6, pc}

08006c04 <__match>:
 8006c04:	b530      	push	{r4, r5, lr}
 8006c06:	6803      	ldr	r3, [r0, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c0e:	b914      	cbnz	r4, 8006c16 <__match+0x12>
 8006c10:	6003      	str	r3, [r0, #0]
 8006c12:	2001      	movs	r0, #1
 8006c14:	bd30      	pop	{r4, r5, pc}
 8006c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006c1e:	2d19      	cmp	r5, #25
 8006c20:	bf98      	it	ls
 8006c22:	3220      	addls	r2, #32
 8006c24:	42a2      	cmp	r2, r4
 8006c26:	d0f0      	beq.n	8006c0a <__match+0x6>
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e7f3      	b.n	8006c14 <__match+0x10>

08006c2c <__hexnan>:
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	680b      	ldr	r3, [r1, #0]
 8006c32:	6801      	ldr	r1, [r0, #0]
 8006c34:	115e      	asrs	r6, r3, #5
 8006c36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006c3a:	f013 031f 	ands.w	r3, r3, #31
 8006c3e:	b087      	sub	sp, #28
 8006c40:	bf18      	it	ne
 8006c42:	3604      	addne	r6, #4
 8006c44:	2500      	movs	r5, #0
 8006c46:	1f37      	subs	r7, r6, #4
 8006c48:	4682      	mov	sl, r0
 8006c4a:	4690      	mov	r8, r2
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	f846 5c04 	str.w	r5, [r6, #-4]
 8006c52:	46b9      	mov	r9, r7
 8006c54:	463c      	mov	r4, r7
 8006c56:	9502      	str	r5, [sp, #8]
 8006c58:	46ab      	mov	fp, r5
 8006c5a:	784a      	ldrb	r2, [r1, #1]
 8006c5c:	1c4b      	adds	r3, r1, #1
 8006c5e:	9303      	str	r3, [sp, #12]
 8006c60:	b342      	cbz	r2, 8006cb4 <__hexnan+0x88>
 8006c62:	4610      	mov	r0, r2
 8006c64:	9105      	str	r1, [sp, #20]
 8006c66:	9204      	str	r2, [sp, #16]
 8006c68:	f7ff fd94 	bl	8006794 <__hexdig_fun>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d151      	bne.n	8006d14 <__hexnan+0xe8>
 8006c70:	9a04      	ldr	r2, [sp, #16]
 8006c72:	9905      	ldr	r1, [sp, #20]
 8006c74:	2a20      	cmp	r2, #32
 8006c76:	d818      	bhi.n	8006caa <__hexnan+0x7e>
 8006c78:	9b02      	ldr	r3, [sp, #8]
 8006c7a:	459b      	cmp	fp, r3
 8006c7c:	dd13      	ble.n	8006ca6 <__hexnan+0x7a>
 8006c7e:	454c      	cmp	r4, r9
 8006c80:	d206      	bcs.n	8006c90 <__hexnan+0x64>
 8006c82:	2d07      	cmp	r5, #7
 8006c84:	dc04      	bgt.n	8006c90 <__hexnan+0x64>
 8006c86:	462a      	mov	r2, r5
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7ff ffa8 	bl	8006be0 <L_shift>
 8006c90:	4544      	cmp	r4, r8
 8006c92:	d952      	bls.n	8006d3a <__hexnan+0x10e>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f1a4 0904 	sub.w	r9, r4, #4
 8006c9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c9e:	f8cd b008 	str.w	fp, [sp, #8]
 8006ca2:	464c      	mov	r4, r9
 8006ca4:	461d      	mov	r5, r3
 8006ca6:	9903      	ldr	r1, [sp, #12]
 8006ca8:	e7d7      	b.n	8006c5a <__hexnan+0x2e>
 8006caa:	2a29      	cmp	r2, #41	@ 0x29
 8006cac:	d157      	bne.n	8006d5e <__hexnan+0x132>
 8006cae:	3102      	adds	r1, #2
 8006cb0:	f8ca 1000 	str.w	r1, [sl]
 8006cb4:	f1bb 0f00 	cmp.w	fp, #0
 8006cb8:	d051      	beq.n	8006d5e <__hexnan+0x132>
 8006cba:	454c      	cmp	r4, r9
 8006cbc:	d206      	bcs.n	8006ccc <__hexnan+0xa0>
 8006cbe:	2d07      	cmp	r5, #7
 8006cc0:	dc04      	bgt.n	8006ccc <__hexnan+0xa0>
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7ff ff8a 	bl	8006be0 <L_shift>
 8006ccc:	4544      	cmp	r4, r8
 8006cce:	d936      	bls.n	8006d3e <__hexnan+0x112>
 8006cd0:	f1a8 0204 	sub.w	r2, r8, #4
 8006cd4:	4623      	mov	r3, r4
 8006cd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8006cda:	f842 1f04 	str.w	r1, [r2, #4]!
 8006cde:	429f      	cmp	r7, r3
 8006ce0:	d2f9      	bcs.n	8006cd6 <__hexnan+0xaa>
 8006ce2:	1b3b      	subs	r3, r7, r4
 8006ce4:	f023 0303 	bic.w	r3, r3, #3
 8006ce8:	3304      	adds	r3, #4
 8006cea:	3401      	adds	r4, #1
 8006cec:	3e03      	subs	r6, #3
 8006cee:	42b4      	cmp	r4, r6
 8006cf0:	bf88      	it	hi
 8006cf2:	2304      	movhi	r3, #4
 8006cf4:	4443      	add	r3, r8
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f843 2b04 	str.w	r2, [r3], #4
 8006cfc:	429f      	cmp	r7, r3
 8006cfe:	d2fb      	bcs.n	8006cf8 <__hexnan+0xcc>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	b91b      	cbnz	r3, 8006d0c <__hexnan+0xe0>
 8006d04:	4547      	cmp	r7, r8
 8006d06:	d128      	bne.n	8006d5a <__hexnan+0x12e>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	2005      	movs	r0, #5
 8006d0e:	b007      	add	sp, #28
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	3501      	adds	r5, #1
 8006d16:	2d08      	cmp	r5, #8
 8006d18:	f10b 0b01 	add.w	fp, fp, #1
 8006d1c:	dd06      	ble.n	8006d2c <__hexnan+0x100>
 8006d1e:	4544      	cmp	r4, r8
 8006d20:	d9c1      	bls.n	8006ca6 <__hexnan+0x7a>
 8006d22:	2300      	movs	r3, #0
 8006d24:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d28:	2501      	movs	r5, #1
 8006d2a:	3c04      	subs	r4, #4
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	f000 000f 	and.w	r0, r0, #15
 8006d32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006d36:	6020      	str	r0, [r4, #0]
 8006d38:	e7b5      	b.n	8006ca6 <__hexnan+0x7a>
 8006d3a:	2508      	movs	r5, #8
 8006d3c:	e7b3      	b.n	8006ca6 <__hexnan+0x7a>
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0dd      	beq.n	8006d00 <__hexnan+0xd4>
 8006d44:	f1c3 0320 	rsb	r3, r3, #32
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	40da      	lsrs	r2, r3
 8006d4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006d52:	4013      	ands	r3, r2
 8006d54:	f846 3c04 	str.w	r3, [r6, #-4]
 8006d58:	e7d2      	b.n	8006d00 <__hexnan+0xd4>
 8006d5a:	3f04      	subs	r7, #4
 8006d5c:	e7d0      	b.n	8006d00 <__hexnan+0xd4>
 8006d5e:	2004      	movs	r0, #4
 8006d60:	e7d5      	b.n	8006d0e <__hexnan+0xe2>

08006d62 <__ascii_mbtowc>:
 8006d62:	b082      	sub	sp, #8
 8006d64:	b901      	cbnz	r1, 8006d68 <__ascii_mbtowc+0x6>
 8006d66:	a901      	add	r1, sp, #4
 8006d68:	b142      	cbz	r2, 8006d7c <__ascii_mbtowc+0x1a>
 8006d6a:	b14b      	cbz	r3, 8006d80 <__ascii_mbtowc+0x1e>
 8006d6c:	7813      	ldrb	r3, [r2, #0]
 8006d6e:	600b      	str	r3, [r1, #0]
 8006d70:	7812      	ldrb	r2, [r2, #0]
 8006d72:	1e10      	subs	r0, r2, #0
 8006d74:	bf18      	it	ne
 8006d76:	2001      	movne	r0, #1
 8006d78:	b002      	add	sp, #8
 8006d7a:	4770      	bx	lr
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	e7fb      	b.n	8006d78 <__ascii_mbtowc+0x16>
 8006d80:	f06f 0001 	mvn.w	r0, #1
 8006d84:	e7f8      	b.n	8006d78 <__ascii_mbtowc+0x16>
	...

08006d88 <_Balloc>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	69c6      	ldr	r6, [r0, #28]
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	460d      	mov	r5, r1
 8006d90:	b976      	cbnz	r6, 8006db0 <_Balloc+0x28>
 8006d92:	2010      	movs	r0, #16
 8006d94:	f000 fd18 	bl	80077c8 <malloc>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	61e0      	str	r0, [r4, #28]
 8006d9c:	b920      	cbnz	r0, 8006da8 <_Balloc+0x20>
 8006d9e:	4b18      	ldr	r3, [pc, #96]	@ (8006e00 <_Balloc+0x78>)
 8006da0:	4818      	ldr	r0, [pc, #96]	@ (8006e04 <_Balloc+0x7c>)
 8006da2:	216b      	movs	r1, #107	@ 0x6b
 8006da4:	f000 fcde 	bl	8007764 <__assert_func>
 8006da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dac:	6006      	str	r6, [r0, #0]
 8006dae:	60c6      	str	r6, [r0, #12]
 8006db0:	69e6      	ldr	r6, [r4, #28]
 8006db2:	68f3      	ldr	r3, [r6, #12]
 8006db4:	b183      	cbz	r3, 8006dd8 <_Balloc+0x50>
 8006db6:	69e3      	ldr	r3, [r4, #28]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dbe:	b9b8      	cbnz	r0, 8006df0 <_Balloc+0x68>
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8006dc6:	1d72      	adds	r2, r6, #5
 8006dc8:	0092      	lsls	r2, r2, #2
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 fce8 	bl	80077a0 <_calloc_r>
 8006dd0:	b160      	cbz	r0, 8006dec <_Balloc+0x64>
 8006dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dd6:	e00e      	b.n	8006df6 <_Balloc+0x6e>
 8006dd8:	2221      	movs	r2, #33	@ 0x21
 8006dda:	2104      	movs	r1, #4
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fcdf 	bl	80077a0 <_calloc_r>
 8006de2:	69e3      	ldr	r3, [r4, #28]
 8006de4:	60f0      	str	r0, [r6, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e4      	bne.n	8006db6 <_Balloc+0x2e>
 8006dec:	2000      	movs	r0, #0
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006df6:	2300      	movs	r3, #0
 8006df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dfc:	e7f7      	b.n	8006dee <_Balloc+0x66>
 8006dfe:	bf00      	nop
 8006e00:	08007fbd 	.word	0x08007fbd
 8006e04:	08007fd4 	.word	0x08007fd4

08006e08 <_Bfree>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	69c6      	ldr	r6, [r0, #28]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	b976      	cbnz	r6, 8006e30 <_Bfree+0x28>
 8006e12:	2010      	movs	r0, #16
 8006e14:	f000 fcd8 	bl	80077c8 <malloc>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	61e8      	str	r0, [r5, #28]
 8006e1c:	b920      	cbnz	r0, 8006e28 <_Bfree+0x20>
 8006e1e:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <_Bfree+0x3c>)
 8006e20:	4809      	ldr	r0, [pc, #36]	@ (8006e48 <_Bfree+0x40>)
 8006e22:	218f      	movs	r1, #143	@ 0x8f
 8006e24:	f000 fc9e 	bl	8007764 <__assert_func>
 8006e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e2c:	6006      	str	r6, [r0, #0]
 8006e2e:	60c6      	str	r6, [r0, #12]
 8006e30:	b13c      	cbz	r4, 8006e42 <_Bfree+0x3a>
 8006e32:	69eb      	ldr	r3, [r5, #28]
 8006e34:	6862      	ldr	r2, [r4, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e3c:	6021      	str	r1, [r4, #0]
 8006e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	08007fbd 	.word	0x08007fbd
 8006e48:	08007fd4 	.word	0x08007fd4

08006e4c <__multadd>:
 8006e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e50:	690d      	ldr	r5, [r1, #16]
 8006e52:	4607      	mov	r7, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	461e      	mov	r6, r3
 8006e58:	f101 0c14 	add.w	ip, r1, #20
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e62:	b299      	uxth	r1, r3
 8006e64:	fb02 6101 	mla	r1, r2, r1, r6
 8006e68:	0c1e      	lsrs	r6, r3, #16
 8006e6a:	0c0b      	lsrs	r3, r1, #16
 8006e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8006e70:	b289      	uxth	r1, r1
 8006e72:	3001      	adds	r0, #1
 8006e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e78:	4285      	cmp	r5, r0
 8006e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e82:	dcec      	bgt.n	8006e5e <__multadd+0x12>
 8006e84:	b30e      	cbz	r6, 8006eca <__multadd+0x7e>
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc19      	bgt.n	8006ec0 <__multadd+0x74>
 8006e8c:	6861      	ldr	r1, [r4, #4]
 8006e8e:	4638      	mov	r0, r7
 8006e90:	3101      	adds	r1, #1
 8006e92:	f7ff ff79 	bl	8006d88 <_Balloc>
 8006e96:	4680      	mov	r8, r0
 8006e98:	b928      	cbnz	r0, 8006ea6 <__multadd+0x5a>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <__multadd+0x84>)
 8006e9e:	480d      	ldr	r0, [pc, #52]	@ (8006ed4 <__multadd+0x88>)
 8006ea0:	21ba      	movs	r1, #186	@ 0xba
 8006ea2:	f000 fc5f 	bl	8007764 <__assert_func>
 8006ea6:	6922      	ldr	r2, [r4, #16]
 8006ea8:	3202      	adds	r2, #2
 8006eaa:	f104 010c 	add.w	r1, r4, #12
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	300c      	adds	r0, #12
 8006eb2:	f7ff fc05 	bl	80066c0 <memcpy>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff ffa5 	bl	8006e08 <_Bfree>
 8006ebe:	4644      	mov	r4, r8
 8006ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	615e      	str	r6, [r3, #20]
 8006ec8:	6125      	str	r5, [r4, #16]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed0:	08007f4c 	.word	0x08007f4c
 8006ed4:	08007fd4 	.word	0x08007fd4

08006ed8 <__s2b>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	460c      	mov	r4, r1
 8006ede:	4615      	mov	r5, r2
 8006ee0:	461f      	mov	r7, r3
 8006ee2:	2209      	movs	r2, #9
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eec:	2100      	movs	r1, #0
 8006eee:	2201      	movs	r2, #1
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	db09      	blt.n	8006f08 <__s2b+0x30>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f7ff ff47 	bl	8006d88 <_Balloc>
 8006efa:	b940      	cbnz	r0, 8006f0e <__s2b+0x36>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b19      	ldr	r3, [pc, #100]	@ (8006f64 <__s2b+0x8c>)
 8006f00:	4819      	ldr	r0, [pc, #100]	@ (8006f68 <__s2b+0x90>)
 8006f02:	21d3      	movs	r1, #211	@ 0xd3
 8006f04:	f000 fc2e 	bl	8007764 <__assert_func>
 8006f08:	0052      	lsls	r2, r2, #1
 8006f0a:	3101      	adds	r1, #1
 8006f0c:	e7f0      	b.n	8006ef0 <__s2b+0x18>
 8006f0e:	9b08      	ldr	r3, [sp, #32]
 8006f10:	6143      	str	r3, [r0, #20]
 8006f12:	2d09      	cmp	r5, #9
 8006f14:	f04f 0301 	mov.w	r3, #1
 8006f18:	6103      	str	r3, [r0, #16]
 8006f1a:	dd16      	ble.n	8006f4a <__s2b+0x72>
 8006f1c:	f104 0909 	add.w	r9, r4, #9
 8006f20:	46c8      	mov	r8, r9
 8006f22:	442c      	add	r4, r5
 8006f24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f28:	4601      	mov	r1, r0
 8006f2a:	3b30      	subs	r3, #48	@ 0x30
 8006f2c:	220a      	movs	r2, #10
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f7ff ff8c 	bl	8006e4c <__multadd>
 8006f34:	45a0      	cmp	r8, r4
 8006f36:	d1f5      	bne.n	8006f24 <__s2b+0x4c>
 8006f38:	f1a5 0408 	sub.w	r4, r5, #8
 8006f3c:	444c      	add	r4, r9
 8006f3e:	1b2d      	subs	r5, r5, r4
 8006f40:	1963      	adds	r3, r4, r5
 8006f42:	42bb      	cmp	r3, r7
 8006f44:	db04      	blt.n	8006f50 <__s2b+0x78>
 8006f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4a:	340a      	adds	r4, #10
 8006f4c:	2509      	movs	r5, #9
 8006f4e:	e7f6      	b.n	8006f3e <__s2b+0x66>
 8006f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f54:	4601      	mov	r1, r0
 8006f56:	3b30      	subs	r3, #48	@ 0x30
 8006f58:	220a      	movs	r2, #10
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff ff76 	bl	8006e4c <__multadd>
 8006f60:	e7ee      	b.n	8006f40 <__s2b+0x68>
 8006f62:	bf00      	nop
 8006f64:	08007f4c 	.word	0x08007f4c
 8006f68:	08007fd4 	.word	0x08007fd4

08006f6c <__hi0bits>:
 8006f6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f70:	4603      	mov	r3, r0
 8006f72:	bf36      	itet	cc
 8006f74:	0403      	lslcc	r3, r0, #16
 8006f76:	2000      	movcs	r0, #0
 8006f78:	2010      	movcc	r0, #16
 8006f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f7e:	bf3c      	itt	cc
 8006f80:	021b      	lslcc	r3, r3, #8
 8006f82:	3008      	addcc	r0, #8
 8006f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f88:	bf3c      	itt	cc
 8006f8a:	011b      	lslcc	r3, r3, #4
 8006f8c:	3004      	addcc	r0, #4
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f92:	bf3c      	itt	cc
 8006f94:	009b      	lslcc	r3, r3, #2
 8006f96:	3002      	addcc	r0, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	db05      	blt.n	8006fa8 <__hi0bits+0x3c>
 8006f9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006fa0:	f100 0001 	add.w	r0, r0, #1
 8006fa4:	bf08      	it	eq
 8006fa6:	2020      	moveq	r0, #32
 8006fa8:	4770      	bx	lr

08006faa <__lo0bits>:
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	4602      	mov	r2, r0
 8006fae:	f013 0007 	ands.w	r0, r3, #7
 8006fb2:	d00b      	beq.n	8006fcc <__lo0bits+0x22>
 8006fb4:	07d9      	lsls	r1, r3, #31
 8006fb6:	d421      	bmi.n	8006ffc <__lo0bits+0x52>
 8006fb8:	0798      	lsls	r0, r3, #30
 8006fba:	bf49      	itett	mi
 8006fbc:	085b      	lsrmi	r3, r3, #1
 8006fbe:	089b      	lsrpl	r3, r3, #2
 8006fc0:	2001      	movmi	r0, #1
 8006fc2:	6013      	strmi	r3, [r2, #0]
 8006fc4:	bf5c      	itt	pl
 8006fc6:	6013      	strpl	r3, [r2, #0]
 8006fc8:	2002      	movpl	r0, #2
 8006fca:	4770      	bx	lr
 8006fcc:	b299      	uxth	r1, r3
 8006fce:	b909      	cbnz	r1, 8006fd4 <__lo0bits+0x2a>
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	2010      	movs	r0, #16
 8006fd4:	b2d9      	uxtb	r1, r3
 8006fd6:	b909      	cbnz	r1, 8006fdc <__lo0bits+0x32>
 8006fd8:	3008      	adds	r0, #8
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	0719      	lsls	r1, r3, #28
 8006fde:	bf04      	itt	eq
 8006fe0:	091b      	lsreq	r3, r3, #4
 8006fe2:	3004      	addeq	r0, #4
 8006fe4:	0799      	lsls	r1, r3, #30
 8006fe6:	bf04      	itt	eq
 8006fe8:	089b      	lsreq	r3, r3, #2
 8006fea:	3002      	addeq	r0, #2
 8006fec:	07d9      	lsls	r1, r3, #31
 8006fee:	d403      	bmi.n	8006ff8 <__lo0bits+0x4e>
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	f100 0001 	add.w	r0, r0, #1
 8006ff6:	d003      	beq.n	8007000 <__lo0bits+0x56>
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4770      	bx	lr
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	4770      	bx	lr
 8007000:	2020      	movs	r0, #32
 8007002:	4770      	bx	lr

08007004 <__i2b>:
 8007004:	b510      	push	{r4, lr}
 8007006:	460c      	mov	r4, r1
 8007008:	2101      	movs	r1, #1
 800700a:	f7ff febd 	bl	8006d88 <_Balloc>
 800700e:	4602      	mov	r2, r0
 8007010:	b928      	cbnz	r0, 800701e <__i2b+0x1a>
 8007012:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <__i2b+0x24>)
 8007014:	4805      	ldr	r0, [pc, #20]	@ (800702c <__i2b+0x28>)
 8007016:	f240 1145 	movw	r1, #325	@ 0x145
 800701a:	f000 fba3 	bl	8007764 <__assert_func>
 800701e:	2301      	movs	r3, #1
 8007020:	6144      	str	r4, [r0, #20]
 8007022:	6103      	str	r3, [r0, #16]
 8007024:	bd10      	pop	{r4, pc}
 8007026:	bf00      	nop
 8007028:	08007f4c 	.word	0x08007f4c
 800702c:	08007fd4 	.word	0x08007fd4

08007030 <__multiply>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	4614      	mov	r4, r2
 8007036:	690a      	ldr	r2, [r1, #16]
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	bfa8      	it	ge
 800703e:	4623      	movge	r3, r4
 8007040:	460f      	mov	r7, r1
 8007042:	bfa4      	itt	ge
 8007044:	460c      	movge	r4, r1
 8007046:	461f      	movge	r7, r3
 8007048:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800704c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007050:	68a3      	ldr	r3, [r4, #8]
 8007052:	6861      	ldr	r1, [r4, #4]
 8007054:	eb0a 0609 	add.w	r6, sl, r9
 8007058:	42b3      	cmp	r3, r6
 800705a:	b085      	sub	sp, #20
 800705c:	bfb8      	it	lt
 800705e:	3101      	addlt	r1, #1
 8007060:	f7ff fe92 	bl	8006d88 <_Balloc>
 8007064:	b930      	cbnz	r0, 8007074 <__multiply+0x44>
 8007066:	4602      	mov	r2, r0
 8007068:	4b44      	ldr	r3, [pc, #272]	@ (800717c <__multiply+0x14c>)
 800706a:	4845      	ldr	r0, [pc, #276]	@ (8007180 <__multiply+0x150>)
 800706c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007070:	f000 fb78 	bl	8007764 <__assert_func>
 8007074:	f100 0514 	add.w	r5, r0, #20
 8007078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800707c:	462b      	mov	r3, r5
 800707e:	2200      	movs	r2, #0
 8007080:	4543      	cmp	r3, r8
 8007082:	d321      	bcc.n	80070c8 <__multiply+0x98>
 8007084:	f107 0114 	add.w	r1, r7, #20
 8007088:	f104 0214 	add.w	r2, r4, #20
 800708c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007090:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007094:	9302      	str	r3, [sp, #8]
 8007096:	1b13      	subs	r3, r2, r4
 8007098:	3b15      	subs	r3, #21
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	3304      	adds	r3, #4
 80070a0:	f104 0715 	add.w	r7, r4, #21
 80070a4:	42ba      	cmp	r2, r7
 80070a6:	bf38      	it	cc
 80070a8:	2304      	movcc	r3, #4
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	9b02      	ldr	r3, [sp, #8]
 80070ae:	9103      	str	r1, [sp, #12]
 80070b0:	428b      	cmp	r3, r1
 80070b2:	d80c      	bhi.n	80070ce <__multiply+0x9e>
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	dd03      	ble.n	80070c0 <__multiply+0x90>
 80070b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d05b      	beq.n	8007178 <__multiply+0x148>
 80070c0:	6106      	str	r6, [r0, #16]
 80070c2:	b005      	add	sp, #20
 80070c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c8:	f843 2b04 	str.w	r2, [r3], #4
 80070cc:	e7d8      	b.n	8007080 <__multiply+0x50>
 80070ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80070d2:	f1ba 0f00 	cmp.w	sl, #0
 80070d6:	d024      	beq.n	8007122 <__multiply+0xf2>
 80070d8:	f104 0e14 	add.w	lr, r4, #20
 80070dc:	46a9      	mov	r9, r5
 80070de:	f04f 0c00 	mov.w	ip, #0
 80070e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070e6:	f8d9 3000 	ldr.w	r3, [r9]
 80070ea:	fa1f fb87 	uxth.w	fp, r7
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80070f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80070f8:	f8d9 7000 	ldr.w	r7, [r9]
 80070fc:	4463      	add	r3, ip
 80070fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007102:	fb0a c70b 	mla	r7, sl, fp, ip
 8007106:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007110:	4572      	cmp	r2, lr
 8007112:	f849 3b04 	str.w	r3, [r9], #4
 8007116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800711a:	d8e2      	bhi.n	80070e2 <__multiply+0xb2>
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	f845 c003 	str.w	ip, [r5, r3]
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007128:	3104      	adds	r1, #4
 800712a:	f1b9 0f00 	cmp.w	r9, #0
 800712e:	d021      	beq.n	8007174 <__multiply+0x144>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	f104 0c14 	add.w	ip, r4, #20
 8007136:	46ae      	mov	lr, r5
 8007138:	f04f 0a00 	mov.w	sl, #0
 800713c:	f8bc b000 	ldrh.w	fp, [ip]
 8007140:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007144:	fb09 770b 	mla	r7, r9, fp, r7
 8007148:	4457      	add	r7, sl
 800714a:	b29b      	uxth	r3, r3
 800714c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007150:	f84e 3b04 	str.w	r3, [lr], #4
 8007154:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007158:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800715c:	f8be 3000 	ldrh.w	r3, [lr]
 8007160:	fb09 330a 	mla	r3, r9, sl, r3
 8007164:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007168:	4562      	cmp	r2, ip
 800716a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800716e:	d8e5      	bhi.n	800713c <__multiply+0x10c>
 8007170:	9f01      	ldr	r7, [sp, #4]
 8007172:	51eb      	str	r3, [r5, r7]
 8007174:	3504      	adds	r5, #4
 8007176:	e799      	b.n	80070ac <__multiply+0x7c>
 8007178:	3e01      	subs	r6, #1
 800717a:	e79b      	b.n	80070b4 <__multiply+0x84>
 800717c:	08007f4c 	.word	0x08007f4c
 8007180:	08007fd4 	.word	0x08007fd4

08007184 <__pow5mult>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	4615      	mov	r5, r2
 800718a:	f012 0203 	ands.w	r2, r2, #3
 800718e:	4607      	mov	r7, r0
 8007190:	460e      	mov	r6, r1
 8007192:	d007      	beq.n	80071a4 <__pow5mult+0x20>
 8007194:	4c25      	ldr	r4, [pc, #148]	@ (800722c <__pow5mult+0xa8>)
 8007196:	3a01      	subs	r2, #1
 8007198:	2300      	movs	r3, #0
 800719a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800719e:	f7ff fe55 	bl	8006e4c <__multadd>
 80071a2:	4606      	mov	r6, r0
 80071a4:	10ad      	asrs	r5, r5, #2
 80071a6:	d03d      	beq.n	8007224 <__pow5mult+0xa0>
 80071a8:	69fc      	ldr	r4, [r7, #28]
 80071aa:	b97c      	cbnz	r4, 80071cc <__pow5mult+0x48>
 80071ac:	2010      	movs	r0, #16
 80071ae:	f000 fb0b 	bl	80077c8 <malloc>
 80071b2:	4602      	mov	r2, r0
 80071b4:	61f8      	str	r0, [r7, #28]
 80071b6:	b928      	cbnz	r0, 80071c4 <__pow5mult+0x40>
 80071b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007230 <__pow5mult+0xac>)
 80071ba:	481e      	ldr	r0, [pc, #120]	@ (8007234 <__pow5mult+0xb0>)
 80071bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80071c0:	f000 fad0 	bl	8007764 <__assert_func>
 80071c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071c8:	6004      	str	r4, [r0, #0]
 80071ca:	60c4      	str	r4, [r0, #12]
 80071cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80071d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071d4:	b94c      	cbnz	r4, 80071ea <__pow5mult+0x66>
 80071d6:	f240 2171 	movw	r1, #625	@ 0x271
 80071da:	4638      	mov	r0, r7
 80071dc:	f7ff ff12 	bl	8007004 <__i2b>
 80071e0:	2300      	movs	r3, #0
 80071e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80071e6:	4604      	mov	r4, r0
 80071e8:	6003      	str	r3, [r0, #0]
 80071ea:	f04f 0900 	mov.w	r9, #0
 80071ee:	07eb      	lsls	r3, r5, #31
 80071f0:	d50a      	bpl.n	8007208 <__pow5mult+0x84>
 80071f2:	4631      	mov	r1, r6
 80071f4:	4622      	mov	r2, r4
 80071f6:	4638      	mov	r0, r7
 80071f8:	f7ff ff1a 	bl	8007030 <__multiply>
 80071fc:	4631      	mov	r1, r6
 80071fe:	4680      	mov	r8, r0
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff fe01 	bl	8006e08 <_Bfree>
 8007206:	4646      	mov	r6, r8
 8007208:	106d      	asrs	r5, r5, #1
 800720a:	d00b      	beq.n	8007224 <__pow5mult+0xa0>
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	b938      	cbnz	r0, 8007220 <__pow5mult+0x9c>
 8007210:	4622      	mov	r2, r4
 8007212:	4621      	mov	r1, r4
 8007214:	4638      	mov	r0, r7
 8007216:	f7ff ff0b 	bl	8007030 <__multiply>
 800721a:	6020      	str	r0, [r4, #0]
 800721c:	f8c0 9000 	str.w	r9, [r0]
 8007220:	4604      	mov	r4, r0
 8007222:	e7e4      	b.n	80071ee <__pow5mult+0x6a>
 8007224:	4630      	mov	r0, r6
 8007226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722a:	bf00      	nop
 800722c:	08008030 	.word	0x08008030
 8007230:	08007fbd 	.word	0x08007fbd
 8007234:	08007fd4 	.word	0x08007fd4

08007238 <__lshift>:
 8007238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	460c      	mov	r4, r1
 800723e:	6849      	ldr	r1, [r1, #4]
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007246:	68a3      	ldr	r3, [r4, #8]
 8007248:	4607      	mov	r7, r0
 800724a:	4691      	mov	r9, r2
 800724c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007250:	f108 0601 	add.w	r6, r8, #1
 8007254:	42b3      	cmp	r3, r6
 8007256:	db0b      	blt.n	8007270 <__lshift+0x38>
 8007258:	4638      	mov	r0, r7
 800725a:	f7ff fd95 	bl	8006d88 <_Balloc>
 800725e:	4605      	mov	r5, r0
 8007260:	b948      	cbnz	r0, 8007276 <__lshift+0x3e>
 8007262:	4602      	mov	r2, r0
 8007264:	4b28      	ldr	r3, [pc, #160]	@ (8007308 <__lshift+0xd0>)
 8007266:	4829      	ldr	r0, [pc, #164]	@ (800730c <__lshift+0xd4>)
 8007268:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800726c:	f000 fa7a 	bl	8007764 <__assert_func>
 8007270:	3101      	adds	r1, #1
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	e7ee      	b.n	8007254 <__lshift+0x1c>
 8007276:	2300      	movs	r3, #0
 8007278:	f100 0114 	add.w	r1, r0, #20
 800727c:	f100 0210 	add.w	r2, r0, #16
 8007280:	4618      	mov	r0, r3
 8007282:	4553      	cmp	r3, sl
 8007284:	db33      	blt.n	80072ee <__lshift+0xb6>
 8007286:	6920      	ldr	r0, [r4, #16]
 8007288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800728c:	f104 0314 	add.w	r3, r4, #20
 8007290:	f019 091f 	ands.w	r9, r9, #31
 8007294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800729c:	d02b      	beq.n	80072f6 <__lshift+0xbe>
 800729e:	f1c9 0e20 	rsb	lr, r9, #32
 80072a2:	468a      	mov	sl, r1
 80072a4:	2200      	movs	r2, #0
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	fa00 f009 	lsl.w	r0, r0, r9
 80072ac:	4310      	orrs	r0, r2
 80072ae:	f84a 0b04 	str.w	r0, [sl], #4
 80072b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b6:	459c      	cmp	ip, r3
 80072b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072bc:	d8f3      	bhi.n	80072a6 <__lshift+0x6e>
 80072be:	ebac 0304 	sub.w	r3, ip, r4
 80072c2:	3b15      	subs	r3, #21
 80072c4:	f023 0303 	bic.w	r3, r3, #3
 80072c8:	3304      	adds	r3, #4
 80072ca:	f104 0015 	add.w	r0, r4, #21
 80072ce:	4584      	cmp	ip, r0
 80072d0:	bf38      	it	cc
 80072d2:	2304      	movcc	r3, #4
 80072d4:	50ca      	str	r2, [r1, r3]
 80072d6:	b10a      	cbz	r2, 80072dc <__lshift+0xa4>
 80072d8:	f108 0602 	add.w	r6, r8, #2
 80072dc:	3e01      	subs	r6, #1
 80072de:	4638      	mov	r0, r7
 80072e0:	612e      	str	r6, [r5, #16]
 80072e2:	4621      	mov	r1, r4
 80072e4:	f7ff fd90 	bl	8006e08 <_Bfree>
 80072e8:	4628      	mov	r0, r5
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80072f2:	3301      	adds	r3, #1
 80072f4:	e7c5      	b.n	8007282 <__lshift+0x4a>
 80072f6:	3904      	subs	r1, #4
 80072f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007300:	459c      	cmp	ip, r3
 8007302:	d8f9      	bhi.n	80072f8 <__lshift+0xc0>
 8007304:	e7ea      	b.n	80072dc <__lshift+0xa4>
 8007306:	bf00      	nop
 8007308:	08007f4c 	.word	0x08007f4c
 800730c:	08007fd4 	.word	0x08007fd4

08007310 <__mcmp>:
 8007310:	690a      	ldr	r2, [r1, #16]
 8007312:	4603      	mov	r3, r0
 8007314:	6900      	ldr	r0, [r0, #16]
 8007316:	1a80      	subs	r0, r0, r2
 8007318:	b530      	push	{r4, r5, lr}
 800731a:	d10e      	bne.n	800733a <__mcmp+0x2a>
 800731c:	3314      	adds	r3, #20
 800731e:	3114      	adds	r1, #20
 8007320:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007324:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007328:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800732c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007330:	4295      	cmp	r5, r2
 8007332:	d003      	beq.n	800733c <__mcmp+0x2c>
 8007334:	d205      	bcs.n	8007342 <__mcmp+0x32>
 8007336:	f04f 30ff 	mov.w	r0, #4294967295
 800733a:	bd30      	pop	{r4, r5, pc}
 800733c:	42a3      	cmp	r3, r4
 800733e:	d3f3      	bcc.n	8007328 <__mcmp+0x18>
 8007340:	e7fb      	b.n	800733a <__mcmp+0x2a>
 8007342:	2001      	movs	r0, #1
 8007344:	e7f9      	b.n	800733a <__mcmp+0x2a>
	...

08007348 <__mdiff>:
 8007348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	4689      	mov	r9, r1
 800734e:	4606      	mov	r6, r0
 8007350:	4611      	mov	r1, r2
 8007352:	4648      	mov	r0, r9
 8007354:	4614      	mov	r4, r2
 8007356:	f7ff ffdb 	bl	8007310 <__mcmp>
 800735a:	1e05      	subs	r5, r0, #0
 800735c:	d112      	bne.n	8007384 <__mdiff+0x3c>
 800735e:	4629      	mov	r1, r5
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff fd11 	bl	8006d88 <_Balloc>
 8007366:	4602      	mov	r2, r0
 8007368:	b928      	cbnz	r0, 8007376 <__mdiff+0x2e>
 800736a:	4b3f      	ldr	r3, [pc, #252]	@ (8007468 <__mdiff+0x120>)
 800736c:	f240 2137 	movw	r1, #567	@ 0x237
 8007370:	483e      	ldr	r0, [pc, #248]	@ (800746c <__mdiff+0x124>)
 8007372:	f000 f9f7 	bl	8007764 <__assert_func>
 8007376:	2301      	movs	r3, #1
 8007378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800737c:	4610      	mov	r0, r2
 800737e:	b003      	add	sp, #12
 8007380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007384:	bfbc      	itt	lt
 8007386:	464b      	movlt	r3, r9
 8007388:	46a1      	movlt	r9, r4
 800738a:	4630      	mov	r0, r6
 800738c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007390:	bfba      	itte	lt
 8007392:	461c      	movlt	r4, r3
 8007394:	2501      	movlt	r5, #1
 8007396:	2500      	movge	r5, #0
 8007398:	f7ff fcf6 	bl	8006d88 <_Balloc>
 800739c:	4602      	mov	r2, r0
 800739e:	b918      	cbnz	r0, 80073a8 <__mdiff+0x60>
 80073a0:	4b31      	ldr	r3, [pc, #196]	@ (8007468 <__mdiff+0x120>)
 80073a2:	f240 2145 	movw	r1, #581	@ 0x245
 80073a6:	e7e3      	b.n	8007370 <__mdiff+0x28>
 80073a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80073ac:	6926      	ldr	r6, [r4, #16]
 80073ae:	60c5      	str	r5, [r0, #12]
 80073b0:	f109 0310 	add.w	r3, r9, #16
 80073b4:	f109 0514 	add.w	r5, r9, #20
 80073b8:	f104 0e14 	add.w	lr, r4, #20
 80073bc:	f100 0b14 	add.w	fp, r0, #20
 80073c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80073c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	46d9      	mov	r9, fp
 80073cc:	f04f 0c00 	mov.w	ip, #0
 80073d0:	9b01      	ldr	r3, [sp, #4]
 80073d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80073d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	fa1f f38a 	uxth.w	r3, sl
 80073e0:	4619      	mov	r1, r3
 80073e2:	b283      	uxth	r3, r0
 80073e4:	1acb      	subs	r3, r1, r3
 80073e6:	0c00      	lsrs	r0, r0, #16
 80073e8:	4463      	add	r3, ip
 80073ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80073ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80073f8:	4576      	cmp	r6, lr
 80073fa:	f849 3b04 	str.w	r3, [r9], #4
 80073fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007402:	d8e5      	bhi.n	80073d0 <__mdiff+0x88>
 8007404:	1b33      	subs	r3, r6, r4
 8007406:	3b15      	subs	r3, #21
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	3415      	adds	r4, #21
 800740e:	3304      	adds	r3, #4
 8007410:	42a6      	cmp	r6, r4
 8007412:	bf38      	it	cc
 8007414:	2304      	movcc	r3, #4
 8007416:	441d      	add	r5, r3
 8007418:	445b      	add	r3, fp
 800741a:	461e      	mov	r6, r3
 800741c:	462c      	mov	r4, r5
 800741e:	4544      	cmp	r4, r8
 8007420:	d30e      	bcc.n	8007440 <__mdiff+0xf8>
 8007422:	f108 0103 	add.w	r1, r8, #3
 8007426:	1b49      	subs	r1, r1, r5
 8007428:	f021 0103 	bic.w	r1, r1, #3
 800742c:	3d03      	subs	r5, #3
 800742e:	45a8      	cmp	r8, r5
 8007430:	bf38      	it	cc
 8007432:	2100      	movcc	r1, #0
 8007434:	440b      	add	r3, r1
 8007436:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800743a:	b191      	cbz	r1, 8007462 <__mdiff+0x11a>
 800743c:	6117      	str	r7, [r2, #16]
 800743e:	e79d      	b.n	800737c <__mdiff+0x34>
 8007440:	f854 1b04 	ldr.w	r1, [r4], #4
 8007444:	46e6      	mov	lr, ip
 8007446:	0c08      	lsrs	r0, r1, #16
 8007448:	fa1c fc81 	uxtah	ip, ip, r1
 800744c:	4471      	add	r1, lr
 800744e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007452:	b289      	uxth	r1, r1
 8007454:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007458:	f846 1b04 	str.w	r1, [r6], #4
 800745c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007460:	e7dd      	b.n	800741e <__mdiff+0xd6>
 8007462:	3f01      	subs	r7, #1
 8007464:	e7e7      	b.n	8007436 <__mdiff+0xee>
 8007466:	bf00      	nop
 8007468:	08007f4c 	.word	0x08007f4c
 800746c:	08007fd4 	.word	0x08007fd4

08007470 <__ulp>:
 8007470:	b082      	sub	sp, #8
 8007472:	ed8d 0b00 	vstr	d0, [sp]
 8007476:	9a01      	ldr	r2, [sp, #4]
 8007478:	4b0f      	ldr	r3, [pc, #60]	@ (80074b8 <__ulp+0x48>)
 800747a:	4013      	ands	r3, r2
 800747c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007480:	2b00      	cmp	r3, #0
 8007482:	dc08      	bgt.n	8007496 <__ulp+0x26>
 8007484:	425b      	negs	r3, r3
 8007486:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800748a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800748e:	da04      	bge.n	800749a <__ulp+0x2a>
 8007490:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007494:	4113      	asrs	r3, r2
 8007496:	2200      	movs	r2, #0
 8007498:	e008      	b.n	80074ac <__ulp+0x3c>
 800749a:	f1a2 0314 	sub.w	r3, r2, #20
 800749e:	2b1e      	cmp	r3, #30
 80074a0:	bfda      	itte	le
 80074a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80074a6:	40da      	lsrle	r2, r3
 80074a8:	2201      	movgt	r2, #1
 80074aa:	2300      	movs	r3, #0
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	ec41 0b10 	vmov	d0, r0, r1
 80074b4:	b002      	add	sp, #8
 80074b6:	4770      	bx	lr
 80074b8:	7ff00000 	.word	0x7ff00000

080074bc <__b2d>:
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	6906      	ldr	r6, [r0, #16]
 80074c2:	f100 0814 	add.w	r8, r0, #20
 80074c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80074ca:	1f37      	subs	r7, r6, #4
 80074cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80074d0:	4610      	mov	r0, r2
 80074d2:	f7ff fd4b 	bl	8006f6c <__hi0bits>
 80074d6:	f1c0 0320 	rsb	r3, r0, #32
 80074da:	280a      	cmp	r0, #10
 80074dc:	600b      	str	r3, [r1, #0]
 80074de:	491b      	ldr	r1, [pc, #108]	@ (800754c <__b2d+0x90>)
 80074e0:	dc15      	bgt.n	800750e <__b2d+0x52>
 80074e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80074e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80074ea:	45b8      	cmp	r8, r7
 80074ec:	ea43 0501 	orr.w	r5, r3, r1
 80074f0:	bf34      	ite	cc
 80074f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80074f6:	2300      	movcs	r3, #0
 80074f8:	3015      	adds	r0, #21
 80074fa:	fa02 f000 	lsl.w	r0, r2, r0
 80074fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8007502:	4303      	orrs	r3, r0
 8007504:	461c      	mov	r4, r3
 8007506:	ec45 4b10 	vmov	d0, r4, r5
 800750a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800750e:	45b8      	cmp	r8, r7
 8007510:	bf3a      	itte	cc
 8007512:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007516:	f1a6 0708 	subcc.w	r7, r6, #8
 800751a:	2300      	movcs	r3, #0
 800751c:	380b      	subs	r0, #11
 800751e:	d012      	beq.n	8007546 <__b2d+0x8a>
 8007520:	f1c0 0120 	rsb	r1, r0, #32
 8007524:	fa23 f401 	lsr.w	r4, r3, r1
 8007528:	4082      	lsls	r2, r0
 800752a:	4322      	orrs	r2, r4
 800752c:	4547      	cmp	r7, r8
 800752e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007532:	bf8c      	ite	hi
 8007534:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007538:	2200      	movls	r2, #0
 800753a:	4083      	lsls	r3, r0
 800753c:	40ca      	lsrs	r2, r1
 800753e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007542:	4313      	orrs	r3, r2
 8007544:	e7de      	b.n	8007504 <__b2d+0x48>
 8007546:	ea42 0501 	orr.w	r5, r2, r1
 800754a:	e7db      	b.n	8007504 <__b2d+0x48>
 800754c:	3ff00000 	.word	0x3ff00000

08007550 <__d2b>:
 8007550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007554:	460f      	mov	r7, r1
 8007556:	2101      	movs	r1, #1
 8007558:	ec59 8b10 	vmov	r8, r9, d0
 800755c:	4616      	mov	r6, r2
 800755e:	f7ff fc13 	bl	8006d88 <_Balloc>
 8007562:	4604      	mov	r4, r0
 8007564:	b930      	cbnz	r0, 8007574 <__d2b+0x24>
 8007566:	4602      	mov	r2, r0
 8007568:	4b23      	ldr	r3, [pc, #140]	@ (80075f8 <__d2b+0xa8>)
 800756a:	4824      	ldr	r0, [pc, #144]	@ (80075fc <__d2b+0xac>)
 800756c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007570:	f000 f8f8 	bl	8007764 <__assert_func>
 8007574:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800757c:	b10d      	cbz	r5, 8007582 <__d2b+0x32>
 800757e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	f1b8 0300 	subs.w	r3, r8, #0
 8007588:	d023      	beq.n	80075d2 <__d2b+0x82>
 800758a:	4668      	mov	r0, sp
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	f7ff fd0c 	bl	8006faa <__lo0bits>
 8007592:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007596:	b1d0      	cbz	r0, 80075ce <__d2b+0x7e>
 8007598:	f1c0 0320 	rsb	r3, r0, #32
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	430b      	orrs	r3, r1
 80075a2:	40c2      	lsrs	r2, r0
 80075a4:	6163      	str	r3, [r4, #20]
 80075a6:	9201      	str	r2, [sp, #4]
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	61a3      	str	r3, [r4, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2201      	moveq	r2, #1
 80075b2:	2202      	movne	r2, #2
 80075b4:	6122      	str	r2, [r4, #16]
 80075b6:	b1a5      	cbz	r5, 80075e2 <__d2b+0x92>
 80075b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80075bc:	4405      	add	r5, r0
 80075be:	603d      	str	r5, [r7, #0]
 80075c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80075c4:	6030      	str	r0, [r6, #0]
 80075c6:	4620      	mov	r0, r4
 80075c8:	b003      	add	sp, #12
 80075ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075ce:	6161      	str	r1, [r4, #20]
 80075d0:	e7ea      	b.n	80075a8 <__d2b+0x58>
 80075d2:	a801      	add	r0, sp, #4
 80075d4:	f7ff fce9 	bl	8006faa <__lo0bits>
 80075d8:	9b01      	ldr	r3, [sp, #4]
 80075da:	6163      	str	r3, [r4, #20]
 80075dc:	3020      	adds	r0, #32
 80075de:	2201      	movs	r2, #1
 80075e0:	e7e8      	b.n	80075b4 <__d2b+0x64>
 80075e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075ea:	6038      	str	r0, [r7, #0]
 80075ec:	6918      	ldr	r0, [r3, #16]
 80075ee:	f7ff fcbd 	bl	8006f6c <__hi0bits>
 80075f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075f6:	e7e5      	b.n	80075c4 <__d2b+0x74>
 80075f8:	08007f4c 	.word	0x08007f4c
 80075fc:	08007fd4 	.word	0x08007fd4

08007600 <__ratio>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	b085      	sub	sp, #20
 8007606:	e9cd 1000 	strd	r1, r0, [sp]
 800760a:	a902      	add	r1, sp, #8
 800760c:	f7ff ff56 	bl	80074bc <__b2d>
 8007610:	9800      	ldr	r0, [sp, #0]
 8007612:	a903      	add	r1, sp, #12
 8007614:	ec55 4b10 	vmov	r4, r5, d0
 8007618:	f7ff ff50 	bl	80074bc <__b2d>
 800761c:	9b01      	ldr	r3, [sp, #4]
 800761e:	6919      	ldr	r1, [r3, #16]
 8007620:	9b00      	ldr	r3, [sp, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	1ac9      	subs	r1, r1, r3
 8007626:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	ec5b ab10 	vmov	sl, fp, d0
 8007630:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfce      	itee	gt
 8007638:	462a      	movgt	r2, r5
 800763a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800763e:	465a      	movle	r2, fp
 8007640:	462f      	mov	r7, r5
 8007642:	46d9      	mov	r9, fp
 8007644:	bfcc      	ite	gt
 8007646:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800764a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800764e:	464b      	mov	r3, r9
 8007650:	4652      	mov	r2, sl
 8007652:	4620      	mov	r0, r4
 8007654:	4639      	mov	r1, r7
 8007656:	f7f9 f8f9 	bl	800084c <__aeabi_ddiv>
 800765a:	ec41 0b10 	vmov	d0, r0, r1
 800765e:	b005      	add	sp, #20
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007664 <__copybits>:
 8007664:	3901      	subs	r1, #1
 8007666:	b570      	push	{r4, r5, r6, lr}
 8007668:	1149      	asrs	r1, r1, #5
 800766a:	6914      	ldr	r4, [r2, #16]
 800766c:	3101      	adds	r1, #1
 800766e:	f102 0314 	add.w	r3, r2, #20
 8007672:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007676:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800767a:	1f05      	subs	r5, r0, #4
 800767c:	42a3      	cmp	r3, r4
 800767e:	d30c      	bcc.n	800769a <__copybits+0x36>
 8007680:	1aa3      	subs	r3, r4, r2
 8007682:	3b11      	subs	r3, #17
 8007684:	f023 0303 	bic.w	r3, r3, #3
 8007688:	3211      	adds	r2, #17
 800768a:	42a2      	cmp	r2, r4
 800768c:	bf88      	it	hi
 800768e:	2300      	movhi	r3, #0
 8007690:	4418      	add	r0, r3
 8007692:	2300      	movs	r3, #0
 8007694:	4288      	cmp	r0, r1
 8007696:	d305      	bcc.n	80076a4 <__copybits+0x40>
 8007698:	bd70      	pop	{r4, r5, r6, pc}
 800769a:	f853 6b04 	ldr.w	r6, [r3], #4
 800769e:	f845 6f04 	str.w	r6, [r5, #4]!
 80076a2:	e7eb      	b.n	800767c <__copybits+0x18>
 80076a4:	f840 3b04 	str.w	r3, [r0], #4
 80076a8:	e7f4      	b.n	8007694 <__copybits+0x30>

080076aa <__any_on>:
 80076aa:	f100 0214 	add.w	r2, r0, #20
 80076ae:	6900      	ldr	r0, [r0, #16]
 80076b0:	114b      	asrs	r3, r1, #5
 80076b2:	4298      	cmp	r0, r3
 80076b4:	b510      	push	{r4, lr}
 80076b6:	db11      	blt.n	80076dc <__any_on+0x32>
 80076b8:	dd0a      	ble.n	80076d0 <__any_on+0x26>
 80076ba:	f011 011f 	ands.w	r1, r1, #31
 80076be:	d007      	beq.n	80076d0 <__any_on+0x26>
 80076c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076c4:	fa24 f001 	lsr.w	r0, r4, r1
 80076c8:	fa00 f101 	lsl.w	r1, r0, r1
 80076cc:	428c      	cmp	r4, r1
 80076ce:	d10b      	bne.n	80076e8 <__any_on+0x3e>
 80076d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d803      	bhi.n	80076e0 <__any_on+0x36>
 80076d8:	2000      	movs	r0, #0
 80076da:	bd10      	pop	{r4, pc}
 80076dc:	4603      	mov	r3, r0
 80076de:	e7f7      	b.n	80076d0 <__any_on+0x26>
 80076e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076e4:	2900      	cmp	r1, #0
 80076e6:	d0f5      	beq.n	80076d4 <__any_on+0x2a>
 80076e8:	2001      	movs	r0, #1
 80076ea:	e7f6      	b.n	80076da <__any_on+0x30>

080076ec <_realloc_r>:
 80076ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	4680      	mov	r8, r0
 80076f2:	4615      	mov	r5, r2
 80076f4:	460c      	mov	r4, r1
 80076f6:	b921      	cbnz	r1, 8007702 <_realloc_r+0x16>
 80076f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076fc:	4611      	mov	r1, r2
 80076fe:	f7fd bd01 	b.w	8005104 <_malloc_r>
 8007702:	b92a      	cbnz	r2, 8007710 <_realloc_r+0x24>
 8007704:	f7fd fc92 	bl	800502c <_free_r>
 8007708:	2400      	movs	r4, #0
 800770a:	4620      	mov	r0, r4
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007710:	f000 f862 	bl	80077d8 <_malloc_usable_size_r>
 8007714:	4285      	cmp	r5, r0
 8007716:	4606      	mov	r6, r0
 8007718:	d802      	bhi.n	8007720 <_realloc_r+0x34>
 800771a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800771e:	d8f4      	bhi.n	800770a <_realloc_r+0x1e>
 8007720:	4629      	mov	r1, r5
 8007722:	4640      	mov	r0, r8
 8007724:	f7fd fcee 	bl	8005104 <_malloc_r>
 8007728:	4607      	mov	r7, r0
 800772a:	2800      	cmp	r0, #0
 800772c:	d0ec      	beq.n	8007708 <_realloc_r+0x1c>
 800772e:	42b5      	cmp	r5, r6
 8007730:	462a      	mov	r2, r5
 8007732:	4621      	mov	r1, r4
 8007734:	bf28      	it	cs
 8007736:	4632      	movcs	r2, r6
 8007738:	f7fe ffc2 	bl	80066c0 <memcpy>
 800773c:	4621      	mov	r1, r4
 800773e:	4640      	mov	r0, r8
 8007740:	f7fd fc74 	bl	800502c <_free_r>
 8007744:	463c      	mov	r4, r7
 8007746:	e7e0      	b.n	800770a <_realloc_r+0x1e>

08007748 <__ascii_wctomb>:
 8007748:	4603      	mov	r3, r0
 800774a:	4608      	mov	r0, r1
 800774c:	b141      	cbz	r1, 8007760 <__ascii_wctomb+0x18>
 800774e:	2aff      	cmp	r2, #255	@ 0xff
 8007750:	d904      	bls.n	800775c <__ascii_wctomb+0x14>
 8007752:	228a      	movs	r2, #138	@ 0x8a
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	4770      	bx	lr
 800775c:	700a      	strb	r2, [r1, #0]
 800775e:	2001      	movs	r0, #1
 8007760:	4770      	bx	lr
	...

08007764 <__assert_func>:
 8007764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007766:	4614      	mov	r4, r2
 8007768:	461a      	mov	r2, r3
 800776a:	4b09      	ldr	r3, [pc, #36]	@ (8007790 <__assert_func+0x2c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4605      	mov	r5, r0
 8007770:	68d8      	ldr	r0, [r3, #12]
 8007772:	b954      	cbnz	r4, 800778a <__assert_func+0x26>
 8007774:	4b07      	ldr	r3, [pc, #28]	@ (8007794 <__assert_func+0x30>)
 8007776:	461c      	mov	r4, r3
 8007778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800777c:	9100      	str	r1, [sp, #0]
 800777e:	462b      	mov	r3, r5
 8007780:	4905      	ldr	r1, [pc, #20]	@ (8007798 <__assert_func+0x34>)
 8007782:	f000 f831 	bl	80077e8 <fiprintf>
 8007786:	f000 f841 	bl	800780c <abort>
 800778a:	4b04      	ldr	r3, [pc, #16]	@ (800779c <__assert_func+0x38>)
 800778c:	e7f4      	b.n	8007778 <__assert_func+0x14>
 800778e:	bf00      	nop
 8007790:	20000018 	.word	0x20000018
 8007794:	0800816b 	.word	0x0800816b
 8007798:	0800813d 	.word	0x0800813d
 800779c:	08008130 	.word	0x08008130

080077a0 <_calloc_r>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	fba1 5402 	umull	r5, r4, r1, r2
 80077a6:	b93c      	cbnz	r4, 80077b8 <_calloc_r+0x18>
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7fd fcab 	bl	8005104 <_malloc_r>
 80077ae:	4606      	mov	r6, r0
 80077b0:	b928      	cbnz	r0, 80077be <_calloc_r+0x1e>
 80077b2:	2600      	movs	r6, #0
 80077b4:	4630      	mov	r0, r6
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	220c      	movs	r2, #12
 80077ba:	6002      	str	r2, [r0, #0]
 80077bc:	e7f9      	b.n	80077b2 <_calloc_r+0x12>
 80077be:	462a      	mov	r2, r5
 80077c0:	4621      	mov	r1, r4
 80077c2:	f7fd fbb0 	bl	8004f26 <memset>
 80077c6:	e7f5      	b.n	80077b4 <_calloc_r+0x14>

080077c8 <malloc>:
 80077c8:	4b02      	ldr	r3, [pc, #8]	@ (80077d4 <malloc+0xc>)
 80077ca:	4601      	mov	r1, r0
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	f7fd bc99 	b.w	8005104 <_malloc_r>
 80077d2:	bf00      	nop
 80077d4:	20000018 	.word	0x20000018

080077d8 <_malloc_usable_size_r>:
 80077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077dc:	1f18      	subs	r0, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfbc      	itt	lt
 80077e2:	580b      	ldrlt	r3, [r1, r0]
 80077e4:	18c0      	addlt	r0, r0, r3
 80077e6:	4770      	bx	lr

080077e8 <fiprintf>:
 80077e8:	b40e      	push	{r1, r2, r3}
 80077ea:	b503      	push	{r0, r1, lr}
 80077ec:	4601      	mov	r1, r0
 80077ee:	ab03      	add	r3, sp, #12
 80077f0:	4805      	ldr	r0, [pc, #20]	@ (8007808 <fiprintf+0x20>)
 80077f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f6:	6800      	ldr	r0, [r0, #0]
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	f000 f837 	bl	800786c <_vfiprintf_r>
 80077fe:	b002      	add	sp, #8
 8007800:	f85d eb04 	ldr.w	lr, [sp], #4
 8007804:	b003      	add	sp, #12
 8007806:	4770      	bx	lr
 8007808:	20000018 	.word	0x20000018

0800780c <abort>:
 800780c:	b508      	push	{r3, lr}
 800780e:	2006      	movs	r0, #6
 8007810:	f000 fa00 	bl	8007c14 <raise>
 8007814:	2001      	movs	r0, #1
 8007816:	f7fa fa2e 	bl	8001c76 <_exit>

0800781a <__sfputc_r>:
 800781a:	6893      	ldr	r3, [r2, #8]
 800781c:	3b01      	subs	r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	b410      	push	{r4}
 8007822:	6093      	str	r3, [r2, #8]
 8007824:	da08      	bge.n	8007838 <__sfputc_r+0x1e>
 8007826:	6994      	ldr	r4, [r2, #24]
 8007828:	42a3      	cmp	r3, r4
 800782a:	db01      	blt.n	8007830 <__sfputc_r+0x16>
 800782c:	290a      	cmp	r1, #10
 800782e:	d103      	bne.n	8007838 <__sfputc_r+0x1e>
 8007830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007834:	f000 b932 	b.w	8007a9c <__swbuf_r>
 8007838:	6813      	ldr	r3, [r2, #0]
 800783a:	1c58      	adds	r0, r3, #1
 800783c:	6010      	str	r0, [r2, #0]
 800783e:	7019      	strb	r1, [r3, #0]
 8007840:	4608      	mov	r0, r1
 8007842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007846:	4770      	bx	lr

08007848 <__sfputs_r>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	4606      	mov	r6, r0
 800784c:	460f      	mov	r7, r1
 800784e:	4614      	mov	r4, r2
 8007850:	18d5      	adds	r5, r2, r3
 8007852:	42ac      	cmp	r4, r5
 8007854:	d101      	bne.n	800785a <__sfputs_r+0x12>
 8007856:	2000      	movs	r0, #0
 8007858:	e007      	b.n	800786a <__sfputs_r+0x22>
 800785a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785e:	463a      	mov	r2, r7
 8007860:	4630      	mov	r0, r6
 8007862:	f7ff ffda 	bl	800781a <__sfputc_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	d1f3      	bne.n	8007852 <__sfputs_r+0xa>
 800786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800786c <_vfiprintf_r>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	460d      	mov	r5, r1
 8007872:	b09d      	sub	sp, #116	@ 0x74
 8007874:	4614      	mov	r4, r2
 8007876:	4698      	mov	r8, r3
 8007878:	4606      	mov	r6, r0
 800787a:	b118      	cbz	r0, 8007884 <_vfiprintf_r+0x18>
 800787c:	6a03      	ldr	r3, [r0, #32]
 800787e:	b90b      	cbnz	r3, 8007884 <_vfiprintf_r+0x18>
 8007880:	f7fd fab8 	bl	8004df4 <__sinit>
 8007884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007886:	07d9      	lsls	r1, r3, #31
 8007888:	d405      	bmi.n	8007896 <_vfiprintf_r+0x2a>
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	059a      	lsls	r2, r3, #22
 800788e:	d402      	bmi.n	8007896 <_vfiprintf_r+0x2a>
 8007890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007892:	f7fd fbc2 	bl	800501a <__retarget_lock_acquire_recursive>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	071b      	lsls	r3, r3, #28
 800789a:	d501      	bpl.n	80078a0 <_vfiprintf_r+0x34>
 800789c:	692b      	ldr	r3, [r5, #16]
 800789e:	b99b      	cbnz	r3, 80078c8 <_vfiprintf_r+0x5c>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4630      	mov	r0, r6
 80078a4:	f000 f938 	bl	8007b18 <__swsetup_r>
 80078a8:	b170      	cbz	r0, 80078c8 <_vfiprintf_r+0x5c>
 80078aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ac:	07dc      	lsls	r4, r3, #31
 80078ae:	d504      	bpl.n	80078ba <_vfiprintf_r+0x4e>
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	b01d      	add	sp, #116	@ 0x74
 80078b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ba:	89ab      	ldrh	r3, [r5, #12]
 80078bc:	0598      	lsls	r0, r3, #22
 80078be:	d4f7      	bmi.n	80078b0 <_vfiprintf_r+0x44>
 80078c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078c2:	f7fd fbab 	bl	800501c <__retarget_lock_release_recursive>
 80078c6:	e7f3      	b.n	80078b0 <_vfiprintf_r+0x44>
 80078c8:	2300      	movs	r3, #0
 80078ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80078cc:	2320      	movs	r3, #32
 80078ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d6:	2330      	movs	r3, #48	@ 0x30
 80078d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a88 <_vfiprintf_r+0x21c>
 80078dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078e0:	f04f 0901 	mov.w	r9, #1
 80078e4:	4623      	mov	r3, r4
 80078e6:	469a      	mov	sl, r3
 80078e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ec:	b10a      	cbz	r2, 80078f2 <_vfiprintf_r+0x86>
 80078ee:	2a25      	cmp	r2, #37	@ 0x25
 80078f0:	d1f9      	bne.n	80078e6 <_vfiprintf_r+0x7a>
 80078f2:	ebba 0b04 	subs.w	fp, sl, r4
 80078f6:	d00b      	beq.n	8007910 <_vfiprintf_r+0xa4>
 80078f8:	465b      	mov	r3, fp
 80078fa:	4622      	mov	r2, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff ffa2 	bl	8007848 <__sfputs_r>
 8007904:	3001      	adds	r0, #1
 8007906:	f000 80a7 	beq.w	8007a58 <_vfiprintf_r+0x1ec>
 800790a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800790c:	445a      	add	r2, fp
 800790e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007910:	f89a 3000 	ldrb.w	r3, [sl]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 809f 	beq.w	8007a58 <_vfiprintf_r+0x1ec>
 800791a:	2300      	movs	r3, #0
 800791c:	f04f 32ff 	mov.w	r2, #4294967295
 8007920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007924:	f10a 0a01 	add.w	sl, sl, #1
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	9307      	str	r3, [sp, #28]
 800792c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007930:	931a      	str	r3, [sp, #104]	@ 0x68
 8007932:	4654      	mov	r4, sl
 8007934:	2205      	movs	r2, #5
 8007936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793a:	4853      	ldr	r0, [pc, #332]	@ (8007a88 <_vfiprintf_r+0x21c>)
 800793c:	f7f8 fc50 	bl	80001e0 <memchr>
 8007940:	9a04      	ldr	r2, [sp, #16]
 8007942:	b9d8      	cbnz	r0, 800797c <_vfiprintf_r+0x110>
 8007944:	06d1      	lsls	r1, r2, #27
 8007946:	bf44      	itt	mi
 8007948:	2320      	movmi	r3, #32
 800794a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800794e:	0713      	lsls	r3, r2, #28
 8007950:	bf44      	itt	mi
 8007952:	232b      	movmi	r3, #43	@ 0x2b
 8007954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007958:	f89a 3000 	ldrb.w	r3, [sl]
 800795c:	2b2a      	cmp	r3, #42	@ 0x2a
 800795e:	d015      	beq.n	800798c <_vfiprintf_r+0x120>
 8007960:	9a07      	ldr	r2, [sp, #28]
 8007962:	4654      	mov	r4, sl
 8007964:	2000      	movs	r0, #0
 8007966:	f04f 0c0a 	mov.w	ip, #10
 800796a:	4621      	mov	r1, r4
 800796c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007970:	3b30      	subs	r3, #48	@ 0x30
 8007972:	2b09      	cmp	r3, #9
 8007974:	d94b      	bls.n	8007a0e <_vfiprintf_r+0x1a2>
 8007976:	b1b0      	cbz	r0, 80079a6 <_vfiprintf_r+0x13a>
 8007978:	9207      	str	r2, [sp, #28]
 800797a:	e014      	b.n	80079a6 <_vfiprintf_r+0x13a>
 800797c:	eba0 0308 	sub.w	r3, r0, r8
 8007980:	fa09 f303 	lsl.w	r3, r9, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	9304      	str	r3, [sp, #16]
 8007988:	46a2      	mov	sl, r4
 800798a:	e7d2      	b.n	8007932 <_vfiprintf_r+0xc6>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	1d19      	adds	r1, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	9103      	str	r1, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	bfbb      	ittet	lt
 8007998:	425b      	neglt	r3, r3
 800799a:	f042 0202 	orrlt.w	r2, r2, #2
 800799e:	9307      	strge	r3, [sp, #28]
 80079a0:	9307      	strlt	r3, [sp, #28]
 80079a2:	bfb8      	it	lt
 80079a4:	9204      	strlt	r2, [sp, #16]
 80079a6:	7823      	ldrb	r3, [r4, #0]
 80079a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80079aa:	d10a      	bne.n	80079c2 <_vfiprintf_r+0x156>
 80079ac:	7863      	ldrb	r3, [r4, #1]
 80079ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80079b0:	d132      	bne.n	8007a18 <_vfiprintf_r+0x1ac>
 80079b2:	9b03      	ldr	r3, [sp, #12]
 80079b4:	1d1a      	adds	r2, r3, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	9203      	str	r2, [sp, #12]
 80079ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079be:	3402      	adds	r4, #2
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a98 <_vfiprintf_r+0x22c>
 80079c6:	7821      	ldrb	r1, [r4, #0]
 80079c8:	2203      	movs	r2, #3
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fc08 	bl	80001e0 <memchr>
 80079d0:	b138      	cbz	r0, 80079e2 <_vfiprintf_r+0x176>
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	eba0 000a 	sub.w	r0, r0, sl
 80079d8:	2240      	movs	r2, #64	@ 0x40
 80079da:	4082      	lsls	r2, r0
 80079dc:	4313      	orrs	r3, r2
 80079de:	3401      	adds	r4, #1
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e6:	4829      	ldr	r0, [pc, #164]	@ (8007a8c <_vfiprintf_r+0x220>)
 80079e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079ec:	2206      	movs	r2, #6
 80079ee:	f7f8 fbf7 	bl	80001e0 <memchr>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d03f      	beq.n	8007a76 <_vfiprintf_r+0x20a>
 80079f6:	4b26      	ldr	r3, [pc, #152]	@ (8007a90 <_vfiprintf_r+0x224>)
 80079f8:	bb1b      	cbnz	r3, 8007a42 <_vfiprintf_r+0x1d6>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	3307      	adds	r3, #7
 80079fe:	f023 0307 	bic.w	r3, r3, #7
 8007a02:	3308      	adds	r3, #8
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a08:	443b      	add	r3, r7
 8007a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a0c:	e76a      	b.n	80078e4 <_vfiprintf_r+0x78>
 8007a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a12:	460c      	mov	r4, r1
 8007a14:	2001      	movs	r0, #1
 8007a16:	e7a8      	b.n	800796a <_vfiprintf_r+0xfe>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	3401      	adds	r4, #1
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f04f 0c0a 	mov.w	ip, #10
 8007a24:	4620      	mov	r0, r4
 8007a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2a:	3a30      	subs	r2, #48	@ 0x30
 8007a2c:	2a09      	cmp	r2, #9
 8007a2e:	d903      	bls.n	8007a38 <_vfiprintf_r+0x1cc>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0c6      	beq.n	80079c2 <_vfiprintf_r+0x156>
 8007a34:	9105      	str	r1, [sp, #20]
 8007a36:	e7c4      	b.n	80079c2 <_vfiprintf_r+0x156>
 8007a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e7f0      	b.n	8007a24 <_vfiprintf_r+0x1b8>
 8007a42:	ab03      	add	r3, sp, #12
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	462a      	mov	r2, r5
 8007a48:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <_vfiprintf_r+0x228>)
 8007a4a:	a904      	add	r1, sp, #16
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f3af 8000 	nop.w
 8007a52:	4607      	mov	r7, r0
 8007a54:	1c78      	adds	r0, r7, #1
 8007a56:	d1d6      	bne.n	8007a06 <_vfiprintf_r+0x19a>
 8007a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a5a:	07d9      	lsls	r1, r3, #31
 8007a5c:	d405      	bmi.n	8007a6a <_vfiprintf_r+0x1fe>
 8007a5e:	89ab      	ldrh	r3, [r5, #12]
 8007a60:	059a      	lsls	r2, r3, #22
 8007a62:	d402      	bmi.n	8007a6a <_vfiprintf_r+0x1fe>
 8007a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a66:	f7fd fad9 	bl	800501c <__retarget_lock_release_recursive>
 8007a6a:	89ab      	ldrh	r3, [r5, #12]
 8007a6c:	065b      	lsls	r3, r3, #25
 8007a6e:	f53f af1f 	bmi.w	80078b0 <_vfiprintf_r+0x44>
 8007a72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a74:	e71e      	b.n	80078b4 <_vfiprintf_r+0x48>
 8007a76:	ab03      	add	r3, sp, #12
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	4b05      	ldr	r3, [pc, #20]	@ (8007a94 <_vfiprintf_r+0x228>)
 8007a7e:	a904      	add	r1, sp, #16
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7fe fc15 	bl	80062b0 <_printf_i>
 8007a86:	e7e4      	b.n	8007a52 <_vfiprintf_r+0x1e6>
 8007a88:	08007f11 	.word	0x08007f11
 8007a8c:	08007f1b 	.word	0x08007f1b
 8007a90:	00000000 	.word	0x00000000
 8007a94:	08007849 	.word	0x08007849
 8007a98:	08007f17 	.word	0x08007f17

08007a9c <__swbuf_r>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	460e      	mov	r6, r1
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	b118      	cbz	r0, 8007aae <__swbuf_r+0x12>
 8007aa6:	6a03      	ldr	r3, [r0, #32]
 8007aa8:	b90b      	cbnz	r3, 8007aae <__swbuf_r+0x12>
 8007aaa:	f7fd f9a3 	bl	8004df4 <__sinit>
 8007aae:	69a3      	ldr	r3, [r4, #24]
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	071a      	lsls	r2, r3, #28
 8007ab6:	d501      	bpl.n	8007abc <__swbuf_r+0x20>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	b943      	cbnz	r3, 8007ace <__swbuf_r+0x32>
 8007abc:	4621      	mov	r1, r4
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f82a 	bl	8007b18 <__swsetup_r>
 8007ac4:	b118      	cbz	r0, 8007ace <__swbuf_r+0x32>
 8007ac6:	f04f 37ff 	mov.w	r7, #4294967295
 8007aca:	4638      	mov	r0, r7
 8007acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	6922      	ldr	r2, [r4, #16]
 8007ad2:	1a98      	subs	r0, r3, r2
 8007ad4:	6963      	ldr	r3, [r4, #20]
 8007ad6:	b2f6      	uxtb	r6, r6
 8007ad8:	4283      	cmp	r3, r0
 8007ada:	4637      	mov	r7, r6
 8007adc:	dc05      	bgt.n	8007aea <__swbuf_r+0x4e>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7fe fd89 	bl	80065f8 <_fflush_r>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d1ed      	bne.n	8007ac6 <__swbuf_r+0x2a>
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	60a3      	str	r3, [r4, #8]
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	6022      	str	r2, [r4, #0]
 8007af6:	701e      	strb	r6, [r3, #0]
 8007af8:	6962      	ldr	r2, [r4, #20]
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d004      	beq.n	8007b0a <__swbuf_r+0x6e>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	07db      	lsls	r3, r3, #31
 8007b04:	d5e1      	bpl.n	8007aca <__swbuf_r+0x2e>
 8007b06:	2e0a      	cmp	r6, #10
 8007b08:	d1df      	bne.n	8007aca <__swbuf_r+0x2e>
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f7fe fd73 	bl	80065f8 <_fflush_r>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d0d9      	beq.n	8007aca <__swbuf_r+0x2e>
 8007b16:	e7d6      	b.n	8007ac6 <__swbuf_r+0x2a>

08007b18 <__swsetup_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4b29      	ldr	r3, [pc, #164]	@ (8007bc0 <__swsetup_r+0xa8>)
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	460c      	mov	r4, r1
 8007b22:	b118      	cbz	r0, 8007b2c <__swsetup_r+0x14>
 8007b24:	6a03      	ldr	r3, [r0, #32]
 8007b26:	b90b      	cbnz	r3, 8007b2c <__swsetup_r+0x14>
 8007b28:	f7fd f964 	bl	8004df4 <__sinit>
 8007b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b30:	0719      	lsls	r1, r3, #28
 8007b32:	d422      	bmi.n	8007b7a <__swsetup_r+0x62>
 8007b34:	06da      	lsls	r2, r3, #27
 8007b36:	d407      	bmi.n	8007b48 <__swsetup_r+0x30>
 8007b38:	2209      	movs	r2, #9
 8007b3a:	602a      	str	r2, [r5, #0]
 8007b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	e033      	b.n	8007bb0 <__swsetup_r+0x98>
 8007b48:	0758      	lsls	r0, r3, #29
 8007b4a:	d512      	bpl.n	8007b72 <__swsetup_r+0x5a>
 8007b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b4e:	b141      	cbz	r1, 8007b62 <__swsetup_r+0x4a>
 8007b50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d002      	beq.n	8007b5e <__swsetup_r+0x46>
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7fd fa67 	bl	800502c <_free_r>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f043 0308 	orr.w	r3, r3, #8
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	b94b      	cbnz	r3, 8007b92 <__swsetup_r+0x7a>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b88:	d003      	beq.n	8007b92 <__swsetup_r+0x7a>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f000 f883 	bl	8007c98 <__smakebuf_r>
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	f013 0201 	ands.w	r2, r3, #1
 8007b9a:	d00a      	beq.n	8007bb2 <__swsetup_r+0x9a>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	60a2      	str	r2, [r4, #8]
 8007ba0:	6962      	ldr	r2, [r4, #20]
 8007ba2:	4252      	negs	r2, r2
 8007ba4:	61a2      	str	r2, [r4, #24]
 8007ba6:	6922      	ldr	r2, [r4, #16]
 8007ba8:	b942      	cbnz	r2, 8007bbc <__swsetup_r+0xa4>
 8007baa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bae:	d1c5      	bne.n	8007b3c <__swsetup_r+0x24>
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	0799      	lsls	r1, r3, #30
 8007bb4:	bf58      	it	pl
 8007bb6:	6962      	ldrpl	r2, [r4, #20]
 8007bb8:	60a2      	str	r2, [r4, #8]
 8007bba:	e7f4      	b.n	8007ba6 <__swsetup_r+0x8e>
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	e7f7      	b.n	8007bb0 <__swsetup_r+0x98>
 8007bc0:	20000018 	.word	0x20000018

08007bc4 <_raise_r>:
 8007bc4:	291f      	cmp	r1, #31
 8007bc6:	b538      	push	{r3, r4, r5, lr}
 8007bc8:	4605      	mov	r5, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	d904      	bls.n	8007bd8 <_raise_r+0x14>
 8007bce:	2316      	movs	r3, #22
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bda:	b112      	cbz	r2, 8007be2 <_raise_r+0x1e>
 8007bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007be0:	b94b      	cbnz	r3, 8007bf6 <_raise_r+0x32>
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 f830 	bl	8007c48 <_getpid_r>
 8007be8:	4622      	mov	r2, r4
 8007bea:	4601      	mov	r1, r0
 8007bec:	4628      	mov	r0, r5
 8007bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf2:	f000 b817 	b.w	8007c24 <_kill_r>
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d00a      	beq.n	8007c10 <_raise_r+0x4c>
 8007bfa:	1c59      	adds	r1, r3, #1
 8007bfc:	d103      	bne.n	8007c06 <_raise_r+0x42>
 8007bfe:	2316      	movs	r3, #22
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	2001      	movs	r0, #1
 8007c04:	e7e7      	b.n	8007bd6 <_raise_r+0x12>
 8007c06:	2100      	movs	r1, #0
 8007c08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	4798      	blx	r3
 8007c10:	2000      	movs	r0, #0
 8007c12:	e7e0      	b.n	8007bd6 <_raise_r+0x12>

08007c14 <raise>:
 8007c14:	4b02      	ldr	r3, [pc, #8]	@ (8007c20 <raise+0xc>)
 8007c16:	4601      	mov	r1, r0
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	f7ff bfd3 	b.w	8007bc4 <_raise_r>
 8007c1e:	bf00      	nop
 8007c20:	20000018 	.word	0x20000018

08007c24 <_kill_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	@ (8007c44 <_kill_r+0x20>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	f7fa f810 	bl	8001c56 <_kill>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d102      	bne.n	8007c40 <_kill_r+0x1c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	b103      	cbz	r3, 8007c40 <_kill_r+0x1c>
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	bf00      	nop
 8007c44:	20000458 	.word	0x20000458

08007c48 <_getpid_r>:
 8007c48:	f7f9 bffd 	b.w	8001c46 <_getpid>

08007c4c <__swhatbuf_r>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	460c      	mov	r4, r1
 8007c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c54:	2900      	cmp	r1, #0
 8007c56:	b096      	sub	sp, #88	@ 0x58
 8007c58:	4615      	mov	r5, r2
 8007c5a:	461e      	mov	r6, r3
 8007c5c:	da0d      	bge.n	8007c7a <__swhatbuf_r+0x2e>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c64:	f04f 0100 	mov.w	r1, #0
 8007c68:	bf14      	ite	ne
 8007c6a:	2340      	movne	r3, #64	@ 0x40
 8007c6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c70:	2000      	movs	r0, #0
 8007c72:	6031      	str	r1, [r6, #0]
 8007c74:	602b      	str	r3, [r5, #0]
 8007c76:	b016      	add	sp, #88	@ 0x58
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
 8007c7a:	466a      	mov	r2, sp
 8007c7c:	f000 f848 	bl	8007d10 <_fstat_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	dbec      	blt.n	8007c5e <__swhatbuf_r+0x12>
 8007c84:	9901      	ldr	r1, [sp, #4]
 8007c86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c8e:	4259      	negs	r1, r3
 8007c90:	4159      	adcs	r1, r3
 8007c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c96:	e7eb      	b.n	8007c70 <__swhatbuf_r+0x24>

08007c98 <__smakebuf_r>:
 8007c98:	898b      	ldrh	r3, [r1, #12]
 8007c9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c9c:	079d      	lsls	r5, r3, #30
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	d507      	bpl.n	8007cb4 <__smakebuf_r+0x1c>
 8007ca4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	6123      	str	r3, [r4, #16]
 8007cac:	2301      	movs	r3, #1
 8007cae:	6163      	str	r3, [r4, #20]
 8007cb0:	b003      	add	sp, #12
 8007cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb4:	ab01      	add	r3, sp, #4
 8007cb6:	466a      	mov	r2, sp
 8007cb8:	f7ff ffc8 	bl	8007c4c <__swhatbuf_r>
 8007cbc:	9f00      	ldr	r7, [sp, #0]
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7fd fa1e 	bl	8005104 <_malloc_r>
 8007cc8:	b948      	cbnz	r0, 8007cde <__smakebuf_r+0x46>
 8007cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cce:	059a      	lsls	r2, r3, #22
 8007cd0:	d4ee      	bmi.n	8007cb0 <__smakebuf_r+0x18>
 8007cd2:	f023 0303 	bic.w	r3, r3, #3
 8007cd6:	f043 0302 	orr.w	r3, r3, #2
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	e7e2      	b.n	8007ca4 <__smakebuf_r+0xc>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	6020      	str	r0, [r4, #0]
 8007ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	9b01      	ldr	r3, [sp, #4]
 8007cea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007cee:	b15b      	cbz	r3, 8007d08 <__smakebuf_r+0x70>
 8007cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f000 f81d 	bl	8007d34 <_isatty_r>
 8007cfa:	b128      	cbz	r0, 8007d08 <__smakebuf_r+0x70>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	f043 0301 	orr.w	r3, r3, #1
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	431d      	orrs	r5, r3
 8007d0c:	81a5      	strh	r5, [r4, #12]
 8007d0e:	e7cf      	b.n	8007cb0 <__smakebuf_r+0x18>

08007d10 <_fstat_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d07      	ldr	r5, [pc, #28]	@ (8007d30 <_fstat_r+0x20>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	f7f9 fffa 	bl	8001d16 <_fstat>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d102      	bne.n	8007d2c <_fstat_r+0x1c>
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	b103      	cbz	r3, 8007d2c <_fstat_r+0x1c>
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000458 	.word	0x20000458

08007d34 <_isatty_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d06      	ldr	r5, [pc, #24]	@ (8007d50 <_isatty_r+0x1c>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	602b      	str	r3, [r5, #0]
 8007d40:	f7f9 fff9 	bl	8001d36 <_isatty>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d102      	bne.n	8007d4e <_isatty_r+0x1a>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b103      	cbz	r3, 8007d4e <_isatty_r+0x1a>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	20000458 	.word	0x20000458

08007d54 <_init>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr

08007d60 <_fini>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr
